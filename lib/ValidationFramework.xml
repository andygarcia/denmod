<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ValidationFramework</name>
    </assembly>
    <members>
        <member name="T:ValidationFramework.Web.ParameterValidatorGenerator">
            <summary>
            Adds <see cref="T:System.Web.UI.WebControls.BaseValidator"/>s to <see cref="T:System.Web.UI.Control"/>s based on the <see cref="T:ValidationFramework.Rule"/>s on a <see cref="T:System.Type"/>.
            </summary>
            <remarks>
            The following <see cref="T:ValidationFramework.Rule"/>s are supported for front end javascript validation.
            <list type="bullet">
             <item>
            	<see cref="T:ValidationFramework.CompareRule`1"/>
             </item>
             <item>
            	<see cref="T:ValidationFramework.CompareRule`1"/>. But only for the following types <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.DateTime"/><br/>
              Note: see <B>Note on <see cref="T:System.DateTime"/>s</B> 
             </item>
             <item>
            	<see cref="T:ValidationFramework.LengthStringRule"/>
             </item>
             <item>
            	<see cref="T:ValidationFramework.RangeStringRule"/>
             </item>
             <item>
            	<see cref="T:ValidationFramework.RangeRule`1"/>. But only for the following types <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.DateTime"/><br/>
              Note: see <B>Note on <see cref="T:System.DateTime"/>s</B> <br/>
              Note: is either <see cref="P:ValidationFramework.RangeRule`1.EqualsMaximumIsValid"/> or <see cref="P:ValidationFramework.RangeRule`1.EqualsMinimumIsValid"/> are set to false no <see cref="T:System.Web.UI.WebControls.BaseValidator"/>s will be generated. This is due to extensibility restrictions of the MS web validators and will be fixed in future versions.
             </item>
             <item>
            	<see cref="T:ValidationFramework.RegexRule"/>
             </item>
             <item>
            	<see cref="T:ValidationFramework.RequiredStringRule"/>
             </item>
             <item>
            	<see cref="T:ValidationFramework.RequiredRule`1"/>. Note: see <B>Note on <see cref="T:System.DateTime"/>s</B> 
             </item>
            </list>
            All <see cref="T:ValidationFramework.Rule"/>s, including those listed above, will be validated server side. <br/>
            
            <B>Note on <see cref="T:System.DateTime"/>s</B>: <see cref="T:System.DateTime"/>s will only work if the <see cref="P:ValidationFramework.RequiredRule`1.InitialValue"/>, <see cref="P:ValidationFramework.CompareRule`1.ValueToCompare"/>, <see cref="P:ValidationFramework.RangeRule`1.Minimum"/> and <see cref="P:ValidationFramework.RangeRule`1.Maximum"/> is a <see cref="T:System.DateTime"/> with no time component. This is due to the limitation of both the <see cref="T:System.Web.UI.WebControls.RequiredFieldValidator"/> and <see cref="T:System.Web.UI.WebControls.CompareValidator"/>, since they only support "yyyy-MM-dd". Note that if a <see cref="T:ValidationFramework.RequiredRule`1"/> is applied to a <see cref="T:System.DateTime"/> property that is <b>not</b> <see cref="T:System.Nullable`1"/> <see cref="F:System.DateTime.MinValue"/> will be used as the <see cref="P:ValidationFramework.RequiredRule`1.InitialValue"/>.
            </remarks>
        </member>
        <member name="T:ValidationFramework.Web.BaseValidatorGenerator">
            <summary>
            Adds <see cref="T:System.Web.UI.WebControls.BaseValidator"/>s to <see cref="T:System.Web.UI.Control"/>s based on the <see cref="T:ValidationFramework.Rule"/>s on a <see cref="T:System.Type"/>.
            </summary>
            <remarks>
            The following <see cref="T:ValidationFramework.Rule"/>s are supported for front end javascript validation.
            <list type="bullet">
             <item>
            	<see cref="T:ValidationFramework.CompareRule`1"/>
             </item>
             <item>
            	<see cref="T:ValidationFramework.CompareRule`1"/>. But only for the following types <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.DateTime"/><br/>
              Note: see <B>Note on <see cref="T:System.DateTime"/>s</B> 
             </item>
             <item>
            	<see cref="T:ValidationFramework.LengthStringRule"/>
             </item>
             <item>
            	<see cref="T:ValidationFramework.RangeStringRule"/>
             </item>
             <item>
            	<see cref="T:ValidationFramework.RangeRule`1"/>. But only for the following types <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.DateTime"/><br/>
              Note: see <B>Note on <see cref="T:System.DateTime"/>s</B> <br/>
              Note: is either <see cref="P:ValidationFramework.RangeRule`1.EqualsMaximumIsValid"/> or <see cref="P:ValidationFramework.RangeRule`1.EqualsMinimumIsValid"/> are set to false no <see cref="T:System.Web.UI.WebControls.BaseValidator"/>s will be generated. This is due to extensibility restrictions of the MS web validators and will be fixed in future versions.
             </item>
             <item>
            	<see cref="T:ValidationFramework.RegexRule"/>
             </item>
             <item>
            	<see cref="T:ValidationFramework.RequiredStringRule"/>
             </item>
             <item>
            	<see cref="T:ValidationFramework.RequiredRule`1"/>. Note: see <B>Note on <see cref="T:System.DateTime"/>s</B> 
             </item>
            </list>
            All <see cref="T:ValidationFramework.Rule"/>s, including those listed above, will be validated server side. <br/>
            
            <B>Note on <see cref="T:System.DateTime"/>s</B>: <see cref="T:System.DateTime"/>s will only work if the <see cref="P:ValidationFramework.RequiredRule`1.InitialValue"/>, <see cref="P:ValidationFramework.CompareRule`1.ValueToCompare"/>, <see cref="P:ValidationFramework.RangeRule`1.Minimum"/> and <see cref="P:ValidationFramework.RangeRule`1.Maximum"/> is a <see cref="T:System.DateTime"/> with no time component. This is due to the limitation of both the <see cref="T:System.Web.UI.WebControls.RequiredFieldValidator"/> and <see cref="T:System.Web.UI.WebControls.CompareValidator"/>, since they only support "yyyy-MM-dd". Note that if a <see cref="T:ValidationFramework.RequiredRule`1"/> is applied to a <see cref="T:System.DateTime"/> member that is <b>not</b> <see cref="T:System.Nullable`1"/> <see cref="F:System.DateTime.MinValue"/> will be used as the <see cref="P:ValidationFramework.RequiredRule`1.InitialValue"/>.
            </remarks>
            <seealso cref="M:ValidationFramework.Web.BaseValidatorGenerator.AddAssociation(System.Web.UI.Control,System.String)"/>
            <seealso cref="M:ValidationFramework.Web.BaseValidatorGenerator.AddAssociation(System.Web.UI.Control,System.String,System.Web.UI.Control)"/>
            <seealso cref="M:ValidationFramework.Web.BaseValidatorGenerator.GenerateValidators"/>
        </member>
        <member name="M:ValidationFramework.Web.BaseValidatorGenerator.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:ValidationFramework.Web.BaseValidatorGenerator"/> class.
            </summary>
        </member>
        <member name="M:ValidationFramework.Web.BaseValidatorGenerator.AddAssociation(System.Web.UI.Control,System.String,System.Web.UI.Control)">
            <summary>
            A shortcut method to add a new <see cref="T:ValidationFramework.Web.ValidationAssociation"/> to <see cref="P:ValidationFramework.Web.BaseValidatorGenerator.ValidationAssociations"/>.
            </summary>
            <param name="controlToValidate">The <see cref="T:System.Web.UI.Control"/> to validate.</param>
            <param name="memberName">The name of the member to validate.</param>
            <param name="containerControl">A <see cref="T:System.Web.UI.Control"/> to use to locate where the <see cref="T:System.Web.UI.WebControls.BaseValidator"/> will be rendered. Null is accepted.</param>
            <returns>The <see cref="T:ValidationFramework.Web.ValidationAssociation"/> that has been added to <see cref="P:ValidationFramework.Web.BaseValidatorGenerator.ValidationAssociations"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="controlToValidate"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="memberName"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="memberName"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.Web.BaseValidatorGenerator.AddAssociation(System.Web.UI.Control,System.String)">
            <summary>
            A shortcut method to add a new <see cref="T:ValidationFramework.Web.ValidationAssociation"/> to <see cref="P:ValidationFramework.Web.BaseValidatorGenerator.ValidationAssociations"/>.
            </summary>
            <param name="controlToValidate">The <see cref="T:System.Web.UI.Control"/> to validate.</param>
            <param name="memberName">The name of the member to validate.</param>
            <returns>The <see cref="T:ValidationFramework.Web.ValidationAssociation"/> that has been added to <see cref="P:ValidationFramework.Web.BaseValidatorGenerator.ValidationAssociations"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="controlToValidate"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="memberName"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="memberName"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.Web.BaseValidatorGenerator.GetInfoDescriptor(System.String)">
            <summary>
            Get the <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> for a specified member name.
            </summary>
            <param name="memberName">The member name to find get the <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> for.</param>
            <returns>The <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> for a specified member name.</returns>
        </member>
        <member name="M:ValidationFramework.Web.BaseValidatorGenerator.GenerateValidators">
            <summary>
            Go through all the <see cref="P:ValidationFramework.Web.BaseValidatorGenerator.ValidationAssociations"/> and add <see cref="T:System.Web.UI.WebControls.BaseValidator"/>s to each.
            </summary>
        </member>
        <member name="P:ValidationFramework.Web.BaseValidatorGenerator.ValidationAssociations">
            <summary>
            Gets or sets a <see cref="T:ValidationFramework.Web.ValidationAssociationCollection"/> containing all the <see cref="T:ValidationFramework.Web.ValidationAssociation"/>s for this <see cref="T:ValidationFramework.Web.ParameterValidatorGenerator"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.Web.BaseValidatorGenerator.Mode">
            <summary>
            Gets or sets a the type of validators that will be generated. Client Server or both.
            </summary>
            <remarks>If <see cref="P:ValidationFramework.Web.BaseValidatorGenerator.Mode"/> is set to <see cref="F:ValidationFramework.Web.Mode.Client"/> it is not necessary to attach to the server object required event. Not all <see cref="T:ValidationFramework.Rule"/>s can be validated on the client side so your business layer will be responsible for doing a validation of the object on the server side and displaying the message to the user.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> is out of the accepted range.</exception>
        </member>
        <member name="P:ValidationFramework.Web.BaseValidatorGenerator.ValidationGroup">
            <summary>
            Gets or sets the name of the validation group to which all the <see cref="P:System.Web.UI.WebControls.BaseValidator.ValidationGroup"/>s will default to. 
            </summary>
        </member>
        <member name="P:ValidationFramework.Web.BaseValidatorGenerator.Display">
            <summary>
            Gets or sets the display behavior of the error message to which all the <see cref="P:System.Web.UI.WebControls.BaseValidator.Display"/>s will default to. The default value is <see cref="F:System.Web.UI.WebControls.ValidatorDisplay.Dynamic"/>. 
            </summary>
        </member>
        <member name="P:ValidationFramework.Web.BaseValidatorGenerator.Context">
            <summary>
            Gets or sets the context to pass to <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>
            </summary>
        </member>
        <member name="M:ValidationFramework.Web.ParameterValidatorGenerator.OnParametersRequired(ValidationFramework.Web.ParametersRequiredEventArgs)">
            <summary>
            Raises the <see cref="P:ValidationFramework.Web.ParameterValidatorGenerator.ParametersRequired"/> event. 
            </summary>
            <param name="parametersRequiredEventArgs">A <see cref="T:ValidationFramework.Web.TargetObjectRequiredEventArgs"/> that contains the event data.</param>
            <returns>The target object to be validated.</returns>
        </member>
        <member name="M:ValidationFramework.Web.ParameterValidatorGenerator.GetInfoDescriptor(System.String)">
            <summary>
            Get the <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> for a specified member name.
            </summary>
            <param name="memberName">The member name to find get the <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> for.</param>
            <returns>The <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> for a specified member name.</returns>
        </member>
        <member name="P:ValidationFramework.Web.ParameterValidatorGenerator.MethodToValidate">
            <summary>
            Gets or sets the fully qualified name of the target <see cref="T:System.Type"/> to validate.
            </summary>
        </member>
        <member name="P:ValidationFramework.Web.ParameterValidatorGenerator.ParametersRequired">
            <summary>
            Occurs when the <see cref="T:ValidationFramework.Web.ParameterValidatorGenerator"/> requires a target object for validation. 
            </summary>
        </member>
        <member name="T:ValidationFramework.CompareStringRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.CompareRule`1"/> should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.CompareRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.CompareRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\CompareValidators\CompareStringRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\CompareValidators\CompareStringRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="T:ValidationFramework.CompareRuleAttribute">
            <summary>
            Specifies that a comparison operation should be applied to the program element.
            </summary>
        </member>
        <member name="T:ValidationFramework.RuleAttribute">
            <summary>
            Base class for all <see cref="T:System.Attribute"/>s that define <see cref="T:ValidationFramework.Rule"/>s.
            </summary>
            <seealso cref="T:ValidationFramework.IRuleAttribute"/>
            <seealso cref="T:ValidationFramework.IParameterRuleAttribute"/>
            <seealso cref="T:ValidationFramework.IPropertyRuleAttribute"/>
            <example>
            <b>Extending the validation framework</b><br/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\RequiredCharacterRule.cs" title="Implementing a custom rule by inheriting from Rule" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\NewRule\RequiredCharacterRule.vb" title="Implementing a custom rule by inheriting from Rule" lang="vbnet"/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\RequiredCharacterRuleAttribute.cs" title="Creating a IRuleAttribute for that Rule" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\NewRule\RequiredCharacterRuleAttribute.vb" title="Creating a IRuleAttribute for that Rule" lang="vbnet"/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\RequiredCharacterRuleConfigReader.cs" title="Creating IRuleConfigReader for that Rule." lang="cs"/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\RequiredCharacterRuleConfigReaderUsage.cs" title="Using the custom ConfigReader." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\NewRule\RequiredCharacterRuleConfigReader.vb" title="Creating IRuleConfigReader for that Rule." lang="vbnet"/>
            <code source="Examples\ExampleLibraryVB\NewRule\RequiredCharacterRuleConfigReaderUsage.vb" title="Using the custom ConfigReader." lang="vbnet"/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\ClientRegularExpressionWebValidator.cs" title="A custom RegularExpressionValidator that only validates on the client side." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\NewRule\ClientRegularExpressionWebValidator.vb" title="A custom RegularExpressionValidator that only validates on the client side." lang="vbnet"/>
            </example>
        </member>
        <member name="T:ValidationFramework.IRuleAttribute">
            <summary>
            Defines properties that must be implemented to allow a <see cref="T:System.Attribute"/> to define <see cref="T:ValidationFramework.Rule"/>s.
            </summary>
            <seealso cref="T:ValidationFramework.IParameterRuleAttribute"/>
            <seealso cref="T:ValidationFramework.IPropertyRuleAttribute"/>
            <example>
            <b>Extending the validation framework</b><br/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\RequiredCharacterRule.cs" title="Implementing a custom rule by inheriting from Rule" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\NewRule\RequiredCharacterRule.vb" title="Implementing a custom rule by inheriting from Rule" lang="vbnet"/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\RequiredCharacterRuleAttribute.cs" title="Creating a IRuleAttribute for that Rule" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\NewRule\RequiredCharacterRuleAttribute.vb" title="Creating a IRuleAttribute for that Rule" lang="vbnet"/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\RequiredCharacterRuleConfigReader.cs" title="Creating IRuleConfigReader for that Rule." lang="cs"/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\RequiredCharacterRuleConfigReaderUsage.cs" title="Using the custom ConfigReader." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\NewRule\RequiredCharacterRuleConfigReader.vb" title="Creating IRuleConfigReader for that Rule." lang="vbnet"/>
            <code source="Examples\ExampleLibraryVB\NewRule\RequiredCharacterRuleConfigReaderUsage.vb" title="Using the custom ConfigReader." lang="vbnet"/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\ClientRegularExpressionWebValidator.cs" title="A custom RegularExpressionValidator that only validates on the client side." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\NewRule\ClientRegularExpressionWebValidator.vb" title="A custom RegularExpressionValidator that only validates on the client side." lang="vbnet"/>
            </example>
        </member>
        <member name="P:ValidationFramework.IRuleAttribute.ErrorMessage">
            <summary>
            Gets or sets the error message for <see cref="T:ValidationFramework.IRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.RuleAttribute.RuleSet">
            <summary>
            Gets or sets A <see cref="T:System.String"/> used to group <see cref="T:ValidationFramework.Rule"/>s. Use a null to indicate no grouping.
            </summary>
            <seealso cref="P:ValidationFramework.Rule.RuleSet"/>
        </member>
        <member name="P:ValidationFramework.RuleAttribute.UseErrorMessageProvider">
            <seealso cref="P:ValidationFramework.Rule.UseErrorMessageProvider"/>
        </member>
        <member name="P:ValidationFramework.RuleAttribute.ErrorMessage">
            <summary>
            Gets or sets the error message for <see cref="T:ValidationFramework.IRuleAttribute"/>.
            </summary>
            <seealso cref="P:ValidationFramework.Rule.ErrorMessage"/>
        </member>
        <member name="T:ValidationFramework.IPropertyRuleAttribute">
            <summary>
            Used to define <see cref="T:ValidationFramework.Rule"/>s on the properties of a class.
            </summary>
            <example>
            <b>Extending the validation framework</b><br/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\RequiredCharacterRule.cs" title="Implementing a custom rule by inheriting from Rule" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\NewRule\RequiredCharacterRule.vb" title="Implementing a custom rule by inheriting from Rule" lang="vbnet"/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\RequiredCharacterRuleAttribute.cs" title="Creating a IRuleAttribute for that Rule" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\NewRule\RequiredCharacterRuleAttribute.vb" title="Creating a IRuleAttribute for that Rule" lang="vbnet"/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\RequiredCharacterRuleConfigReader.cs" title="Creating IRuleConfigReader for that Rule." lang="cs"/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\RequiredCharacterRuleConfigReaderUsage.cs" title="Using the custom ConfigReader." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\NewRule\RequiredCharacterRuleConfigReader.vb" title="Creating IRuleConfigReader for that Rule." lang="vbnet"/>
            <code source="Examples\ExampleLibraryVB\NewRule\RequiredCharacterRuleConfigReaderUsage.vb" title="Using the custom ConfigReader." lang="vbnet"/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\ClientRegularExpressionWebValidator.cs" title="A custom RegularExpressionValidator that only validates on the client side." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\NewRule\ClientRegularExpressionWebValidator.vb" title="A custom RegularExpressionValidator that only validates on the client side." lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.IPropertyRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="T:ValidationFramework.IParameterRuleAttribute">
            <summary>
            Used to define <see cref="T:ValidationFramework.Rule"/>s on the parameters of a method.
            </summary>
            <example>
            <b>Extending the validation framework</b><br/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\RequiredCharacterRule.cs" title="Implementing a custom rule by inheriting from Rule" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\NewRule\RequiredCharacterRule.vb" title="Implementing a custom rule by inheriting from Rule" lang="vbnet"/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\RequiredCharacterRuleAttribute.cs" title="Creating a IRuleAttribute for that Rule" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\NewRule\RequiredCharacterRuleAttribute.vb" title="Creating a IRuleAttribute for that Rule" lang="vbnet"/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\RequiredCharacterRuleConfigReader.cs" title="Creating IRuleConfigReader for that Rule." lang="cs"/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\RequiredCharacterRuleConfigReaderUsage.cs" title="Using the custom ConfigReader." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\NewRule\RequiredCharacterRuleConfigReader.vb" title="Creating IRuleConfigReader for that Rule." lang="vbnet"/>
            <code source="Examples\ExampleLibraryVB\NewRule\RequiredCharacterRuleConfigReaderUsage.vb" title="Using the custom ConfigReader." lang="vbnet"/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\ClientRegularExpressionWebValidator.cs" title="A custom RegularExpressionValidator that only validates on the client side." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\NewRule\ClientRegularExpressionWebValidator.vb" title="A custom RegularExpressionValidator that only validates on the client side." lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.IParameterRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="T:ValidationFramework.IFieldRuleAttribute">
            <summary>
            Used to define <see cref="T:ValidationFramework.Rule"/>s on the fields of a class.
            </summary>
            <example>
            <b>Extending the validation framework</b><br/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\RequiredCharacterRule.cs" title="Implementing a custom rule by inheriting from Rule" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\NewRule\RequiredCharacterRule.vb" title="Implementing a custom rule by inheriting from Rule" lang="vbnet"/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\RequiredCharacterRuleAttribute.cs" title="Creating a IRuleAttribute for that Rule" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\NewRule\RequiredCharacterRuleAttribute.vb" title="Creating a IRuleAttribute for that Rule" lang="vbnet"/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\RequiredCharacterRuleConfigReader.cs" title="Creating IRuleConfigReader for that Rule." lang="cs"/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\RequiredCharacterRuleConfigReaderUsage.cs" title="Using the custom ConfigReader." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\NewRule\RequiredCharacterRuleConfigReader.vb" title="Creating IRuleConfigReader for that Rule." lang="vbnet"/>
            <code source="Examples\ExampleLibraryVB\NewRule\RequiredCharacterRuleConfigReaderUsage.vb" title="Using the custom ConfigReader." lang="vbnet"/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\ClientRegularExpressionWebValidator.cs" title="A custom RegularExpressionValidator that only validates on the client side." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\NewRule\ClientRegularExpressionWebValidator.vb" title="A custom RegularExpressionValidator that only validates on the client side." lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.IFieldRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.CompareRuleAttribute.#ctor(ValidationFramework.CompareOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.CompareRuleAttribute"/> class.
            </summary>
            <param name="operator">The comparison operation to perform.</param>
        </member>
        <member name="M:ValidationFramework.CompareRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.CompareRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.CompareRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.CompareRuleAttribute.Operator">
            <summary>
            Gets the comparison operation to perform. 
            </summary>
            <seealso cref="P:ValidationFramework.CompareRule`1.CompareOperator"/>
        </member>
        <member name="M:ValidationFramework.CompareStringRuleAttribute.#ctor(System.String,ValidationFramework.CompareOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.CompareStringRuleAttribute"/> class.
            </summary>
            <param name="operator">The comparison operation to perform.</param>
            <param name="valueToCompare">The value to compare with.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueToCompare"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="valueToCompare"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.CompareStringRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.CompareStringRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.CompareStringRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.CompareStringRuleAttribute.ValueToCompare">
            <summary>
            Gets the value to compare.
            </summary>
            <seealso cref="P:ValidationFramework.CompareRule`1.ValueToCompare"/>
        </member>
        <member name="T:ValidationFramework.Reflection.MethodDescriptor">
            <summary>
            A light-weight wrapper for <see cref="T:System.Reflection.MethodBase"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.Reflection.MethodDescriptor.#ctor(System.RuntimeMethodHandle)">
            <summary>
            Initialize a new instance of <see cref="T:ValidationFramework.Reflection.MethodDescriptor"/> class.
            </summary>
            <param name="runtimeMethodHandle">The <see cref="T:System.RuntimeMethodHandle"/> of the <see cref="T:System.Reflection.MethodBase"/> to wrap.</param>
        </member>
        <member name="P:ValidationFramework.Reflection.MethodDescriptor.Name">
            <summary>
            Gets the name of the <see cref="T:ValidationFramework.Reflection.MethodDescriptor"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.Reflection.MethodDescriptor.IsStatic">
            <summary>
            Gets a value indicating whether the <see cref="T:ValidationFramework.Reflection.MethodDescriptor"/> is static. 
            </summary>
        </member>
        <member name="P:ValidationFramework.Reflection.MethodDescriptor.Parameters">
            <summary>
            Gets a <see cref="T:ValidationFramework.Reflection.ParameterCollection"/> containing all <see cref="T:ValidationFramework.Reflection.ParameterDescriptor"/>s for the <see cref="T:ValidationFramework.Reflection.MethodDescriptor"/>.
            </summary>
            <remarks>This <see cref="T:ValidationFramework.Reflection.ParameterCollection"/> is set to readonly. <see cref="P:ValidationFramework.AutoKeyDictionary`2.IsReadOnly"/></remarks>
        </member>
        <member name="P:ValidationFramework.Reflection.MethodDescriptor.RuntimeMethodHandle">
            <summary>
            Gets the <see cref="T:System.RuntimeMethodHandle"/> that represents the <see cref="T:System.Reflection.MethodInfo"/> that this <see cref="T:ValidationFramework.Reflection.MethodDescriptor"/> returns.
            </summary>
        </member>
        <member name="T:ValidationFramework.ResultFormatter">
            <summary>
            Helps in the formatting of <see cref="T:ValidationFramework.ValidationResult"/>s.
            </summary>
        </member>
        <member name="M:ValidationFramework.ResultFormatter.GetErrorMessages(System.Collections.Generic.ICollection{ValidationFramework.ValidationResult})">
            <summary>
            Gets a <see see="ICollection{T}"/> of <see langword="string"/>s that contain all the <see cref="P:ValidationFramework.ValidationResult.ErrorMessage"/>s for all the <see cref="T:ValidationFramework.ValidationResult"/>s in <paramref name="validationResults"/>.
            </summary>
            <param name="validationResults">A <see cref="T:System.Collections.Generic.ICollection`1"/> if <see cref="T:ValidationFramework.ValidationResult"/>s to extract the <see cref="P:ValidationFramework.ValidationResult.ErrorMessage"/>s from.</param>
        </member>
        <member name="M:ValidationFramework.ResultFormatter.GetErrorMessages(System.Collections.Generic.ICollection{ValidationFramework.ValidationResult},System.Boolean)">
            <summary>
            Gets a <see see="ICollection{T}"/> of <see langword="string"/>s that contain all the <see cref="P:ValidationFramework.ValidationResult.ErrorMessage"/>s for all the <see cref="T:ValidationFramework.ValidationResult"/>s in <paramref name="validationResults"/>.
            </summary>
            <param name="splitMessagesOnNewLine"><c>true</c> to split any <see cref="P:ValidationFramework.ValidationResult.ErrorMessage"/> that contains <see cref="P:System.Environment.NewLine"/> into multiple entries.</param>
            <param name="validationResults">A <see cref="T:System.Collections.Generic.ICollection`1"/> if <see cref="T:ValidationFramework.ValidationResult"/>s to extract the <see cref="P:ValidationFramework.ValidationResult.ErrorMessage"/>s from.</param>
        </member>
        <member name="M:ValidationFramework.ResultFormatter.GetConcatenatedErrorMessages(System.Collections.Generic.ICollection{ValidationFramework.ValidationResult})">
            <summary>
            Concatenate a <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:ValidationFramework.ValidationResult"/>.
            </summary>
            <remarks>Use a <see cref="P:System.Environment.NewLine"/> a the separator.</remarks>
            <param name="validationResults">The <see cref="T:ValidationFramework.ValidationResult"/>s to concatenate.</param>
            <returns>A concatenated string of all <see cref="P:ValidationFramework.ValidationResult.ErrorMessage"/>s.</returns>
        </member>
        <member name="M:ValidationFramework.ResultFormatter.GetConcatenatedErrorMessages(System.String,System.Collections.Generic.ICollection{ValidationFramework.ValidationResult})">
            <summary>
            Concatenate a <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:ValidationFramework.ValidationResult"/>.
            </summary>
            <param name="separator">The separator to use between each validation message.</param>
            <param name="validationResults">The <see cref="T:ValidationFramework.ValidationResult"/>s to concatenate.</param>
            <returns>A concatenated string of all <see cref="P:ValidationFramework.ValidationResult.ErrorMessage"/>s.</returns>
        </member>
        <member name="M:ValidationFramework.ResultFormatter.GetConcatenatedErrorMessages(System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Concatenate a <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:ValidationFramework.ValidationResult"/>.
            </summary>
            <param name="separator">The separator to use between each validation message.</param>
            <param name="errorMessages">The <see cref="T:ValidationFramework.ValidationResult"/>s to concatenate.</param>
            <returns>A concatenated string of all <see cref="P:ValidationFramework.ValidationResult.ErrorMessage"/>s.</returns>
        </member>
        <member name="M:ValidationFramework.ResultFormatter.GetConcatenatedErrorMessages(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Concatenate a <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:ValidationFramework.ValidationResult"/>.
            </summary>
            <param name="errorMessages">The <see cref="T:ValidationFramework.ValidationResult"/>s to concatenate.</param>
            <returns>A concatenated string of all <see cref="P:ValidationFramework.ValidationResult.ErrorMessage"/>s.</returns>
        </member>
        <member name="T:ValidationFramework.Reflection.MethodCache">
            <summary>
            Provides an in memory cache of <see cref="T:ValidationFramework.Reflection.MethodDescriptor"/>s.
            </summary>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Reflection\MethodCacheSample.cs" title="The following example shows how to programmatically add validation Rules to a method." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Reflection\MethodCacheSample.vb" title="The following example shows how to programmatically add validation Rules to a method." lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.Reflection.MethodCache.Clear">
            <summary>
            Clear all <see cref="T:ValidationFramework.Reflection.MethodDescriptor"/>s from <see cref="T:ValidationFramework.Reflection.MethodCache"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.Reflection.MethodCache.GetMethod(System.RuntimeMethodHandle)">
            <summary>
            Get a <see cref="T:ValidationFramework.Reflection.MethodDescriptor"/> for a <see cref="T:System.RuntimeTypeHandle"/>.
            </summary>
            <param name="runtimeMethodHandle">The <see cref="T:System.RuntimeTypeHandle"/> for which to get the <see cref="T:ValidationFramework.Reflection.MethodDescriptor"/>.</param>
            <returns>A <see cref="T:ValidationFramework.Reflection.MethodDescriptor"/> corresponding to <paramref name="runtimeMethodHandle"/>.</returns>
        </member>
        <member name="T:ValidationFramework.Reflection.FieldDescriptor">
            <summary>
            A light-weight wrapper for <see cref="T:System.Reflection.FieldInfo"/>.
            </summary>
        </member>
        <member name="T:ValidationFramework.Reflection.InfoDescriptor">
            <summary>
            A base class for reflected infos (<see cref="T:System.Reflection.ParameterInfo"/> and <see cref="T:System.Reflection.PropertyInfo"/>) that are to be cached for performance reasons.
            </summary>
            <seealso cref="T:ValidationFramework.Reflection.PropertyDescriptor"/>
            <seealso cref="T:ValidationFramework.Reflection.ParameterDescriptor"/>
        </member>
        <member name="M:ValidationFramework.Reflection.InfoDescriptor.#ctor(System.RuntimeTypeHandle,System.String)">
            <summary>
            Initialize a new instance of <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/>. Exposed for testing purposes.
            </summary>
            <param name="runtimeTypeHandle"></param>
            <param name="name">The name of the <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exclude/>
        </member>
        <member name="M:ValidationFramework.Reflection.InfoDescriptor.GetValue(System.Object)">
            <summary>
            Get the value for this <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/>.
            </summary>
            <param name="target">The object on which to extract the field value. If a <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> is static, this argument is ignored.</param>
            <returns>The value for the <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/>.</returns>
        </member>
        <member name="P:ValidationFramework.Reflection.InfoDescriptor.Name">
            <summary>
            Gets the name of the <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.Reflection.InfoDescriptor.RuntimeTypeHandle">
            <summary>
            Gets the <see cref="P:ValidationFramework.Reflection.InfoDescriptor.RuntimeTypeHandle"/> for the <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/>.
            </summary>
            <remarks>For a <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> this will be the <see cref="P:ValidationFramework.Reflection.InfoDescriptor.RuntimeTypeHandle"/> for the return <see cref="T:System.Type"/> of the get. For a <see cref="T:ValidationFramework.Reflection.ParameterDescriptor"/> this will be the <see cref="P:ValidationFramework.Reflection.InfoDescriptor.RuntimeTypeHandle"/> for the <see cref="T:System.Type"/> of the <see langword="parameter"/>.</remarks>
        </member>
        <member name="P:ValidationFramework.Reflection.InfoDescriptor.Rules">
            <summary>
            Gets a <see cref="T:ValidationFramework.Reflection.RuleCollection"/> containing all <see cref="T:ValidationFramework.Rule"/>s for the <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.Reflection.FieldDescriptor.#ctor(System.RuntimeTypeHandle,System.String)">
            <summary>
            For testing purposes
            </summary>
            <exclude/>
        </member>
        <member name="M:ValidationFramework.Reflection.FieldDescriptor.#ctor(ValidationFramework.Reflection.TypeDescriptor,System.Reflection.FieldInfo)">
            <summary>
            Initialize a new instance of <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/>.
            </summary>
            <param name="fieldInfo">The <see cref="T:System.Reflection.FieldInfo"/> to wrap.</param>
            <param name="typeDescriptor">The <see cref="T:ValidationFramework.Reflection.TypeDescriptor"/> this <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/> belongs to.</param>
            <exception cref="T:System.NullReferenceException"><paramref name="fieldInfo"/> is null.</exception>
        </member>
        <member name="M:ValidationFramework.Reflection.FieldDescriptor.GetValue(System.Object)">
            <summary>
            Get the value for this <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/>.
            </summary>
            <param name="target">The object on which to extract the field value. If a <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/> is static, this argument is ignored.</param>
            <returns>The value for the field.</returns>
        </member>
        <member name="P:ValidationFramework.Reflection.FieldDescriptor.IsStatic">
            <summary>
            Gets a value indicating whether the <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/> is static. 
            </summary>
        </member>
        <member name="P:ValidationFramework.Reflection.FieldDescriptor.TypeDescriptor">
            <summary>
            Gets the <see cref="T:ValidationFramework.Reflection.TypeDescriptor"/> for this <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/>.
            </summary>
        </member>
        <member name="T:ValidationFramework.Reflection.FieldCollection">
            <summary>
            A <see cref="T:ValidationFramework.AutoKeyDictionary`2"/>  of <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/>s.
            </summary>
        </member>
        <member name="T:ValidationFramework.AutoKeyDictionary`2">
            <summary>
            Provides the abstract base class for a dictionary that generated its own keys.
            </summary>
            <typeparam name="TKey">The type of keys in the collection.</typeparam>
            <typeparam name="TItem">The type of items in the collection.</typeparam>
        </member>
        <member name="M:ValidationFramework.AutoKeyDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.AutoKeyDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:ValidationFramework.AutoKeyDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.AutoKeyDictionary`2"/> class that uses the specified equality comparer.</summary>
            <param name="comparer">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> generic interface to use when comparing keys, or null to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"></see>.</param>
        </member>
        <member name="M:ValidationFramework.AutoKeyDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.AutoKeyDictionary`2"/> class that uses the specified equality comparer.
            </summary>
            <param name="comparer">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> generic interface to use when comparing keys, or null to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>.</param>
            <param name="capacity">The initial number of elements that the <see cref="T:ValidationFramework.AutoKeyDictionary`2"/> can contain.</param>
        </member>
        <member name="M:ValidationFramework.AutoKeyDictionary`2.Add(`1)">
            <summary>
            Adds an object to the end of the Collection. 
            </summary>
            <param name="item">The object to be added.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:ValidationFramework.AutoKeyDictionary`2"/> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception> 
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:ValidationFramework.AutoKeyDictionary`2"/>.</exception>
            <seealso cref="P:ValidationFramework.AutoKeyDictionary`2.IsReadOnly"/> 
            <seealso cref="M:ValidationFramework.AutoKeyDictionary`2.SetToReadOnly"/>
        </member>
        <member name="M:ValidationFramework.AutoKeyDictionary`2.Clear">
            <summary>
            Removes all keys and values from the <see cref="T:ValidationFramework.AutoKeyDictionary`2"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:ValidationFramework.AutoKeyDictionary`2"/> is read-only.</exception>
            <seealso cref="P:ValidationFramework.AutoKeyDictionary`2.IsReadOnly"/>
            <seealso cref="M:ValidationFramework.AutoKeyDictionary`2.SetToReadOnly"/>
        </member>
        <member name="M:ValidationFramework.AutoKeyDictionary`2.Contains(`1)">
            <summary>
            Determines whether the <see cref="T:ValidationFramework.AutoKeyDictionary`2"/> contains a specific item.
            </summary>
            <returns>true if the <see cref="T:ValidationFramework.AutoKeyDictionary`2"/> contains an element with the specified item; otherwise, false.</returns>
            <param name="item">The item to locate in the <see cref="T:ValidationFramework.AutoKeyDictionary`2"/>. </param>
            <exception><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:ValidationFramework.AutoKeyDictionary`2.CopyTo(`1[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an array of type <typeparamref name="TItem"/>, starting at the specified array index. 
            </summary>
            <param name="array">The one-dimensional array of type <typeparamref name="TItem"/> that is the destination of the <typeparamref name="TItem"/> elements copied from the <see cref="T:System.Collections.Generic.ICollection`1"/>. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:ValidationFramework.AutoKeyDictionary`2.Remove(`1)">
            <summary>
            Removes the element from the <see cref="T:ValidationFramework.AutoKeyDictionary`2"/>. 
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:ValidationFramework.AutoKeyDictionary`2"/> is read-only. </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
            <seealso cref="P:ValidationFramework.AutoKeyDictionary`2.IsReadOnly"/> 
            <seealso cref="M:ValidationFramework.AutoKeyDictionary`2.SetToReadOnly"/>
        </member>
        <member name="M:ValidationFramework.AutoKeyDictionary`2.GetKeyForItem(`1)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <returns>The key for the specified element.</returns>
            <param name="item">The element from which to extract the key.</param>
        </member>
        <member name="M:ValidationFramework.AutoKeyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:ValidationFramework.AutoKeyDictionary`2"/> contains the specified key.
            </summary>
            <returns>true if the <see cref="T:ValidationFramework.AutoKeyDictionary`2"/> contains an element with the specified key; otherwise, false.</returns>
            <param name="key">The key to locate in the <see cref="T:ValidationFramework.AutoKeyDictionary`2"/>.</param>
            <exception cref="T:System.ArgumentNullException"> if <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:ValidationFramework.AutoKeyDictionary`2.RemoveKey(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:ValidationFramework.AutoKeyDictionary`2"/>. 
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:ValidationFramework.AutoKeyDictionary`2"/> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
            <seealso cref="P:ValidationFramework.AutoKeyDictionary`2.IsReadOnly"/> 
            <seealso cref="M:ValidationFramework.AutoKeyDictionary`2.SetToReadOnly"/>
        </member>
        <member name="M:ValidationFramework.AutoKeyDictionary`2.InternalRemove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:ValidationFramework.AutoKeyDictionary`2"/>. 
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:ValidationFramework.AutoKeyDictionary`2"/> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
            <seealso cref="P:ValidationFramework.AutoKeyDictionary`2.IsReadOnly"/> 
            <seealso cref="M:ValidationFramework.AutoKeyDictionary`2.SetToReadOnly"/>
        </member>
        <member name="M:ValidationFramework.AutoKeyDictionary`2.InternalRemove(`1)">
            <summary>
            Removes the element from the <see cref="T:ValidationFramework.AutoKeyDictionary`2"/>. 
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:ValidationFramework.AutoKeyDictionary`2"/> is read-only. </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
            <seealso cref="P:ValidationFramework.AutoKeyDictionary`2.IsReadOnly"/> 
            <seealso cref="M:ValidationFramework.AutoKeyDictionary`2.SetToReadOnly"/>
        </member>
        <member name="M:ValidationFramework.AutoKeyDictionary`2.SetToReadOnly">
            <summary>
            Set the <see cref="T:ValidationFramework.AutoKeyDictionary`2"/> to be read-only
            </summary>
            <seealso cref="P:ValidationFramework.AutoKeyDictionary`2.IsReadOnly"/>
        </member>
        <member name="M:ValidationFramework.AutoKeyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the item associated with the specified key. 
            </summary>
            <param name="key">The key of the item to get.</param>
            <param name="item">When this method returns, contains the item associated with the specified <paramref name="key"/>, if the key is found; otherwise, the default item for the type of the item parameter. This parameter is passed uninitialized.</param>
            <returns>true if the <see cref="T:ValidationFramework.AutoKeyDictionary`2"/> contains an element with the specified <paramref name="key"/>; otherwise, false. </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference </exception>
        </member>
        <member name="M:ValidationFramework.AutoKeyDictionary`2.OnDeserialization(System.Object)">
            <summary>
            Implements the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface and raises the deserialization event when the deserialization is complete.
            </summary>
            <param name="sender">The source of the deserialization event.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object associated with the current <see cref="T:ValidationFramework.AutoKeyDictionary`2"/> instance is invalid.</exception>
        </member>
        <member name="M:ValidationFramework.AutoKeyDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface and returns the data needed to serialize the <see cref="T:ValidationFramework.AutoKeyDictionary`2"/> instance.
            </summary>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> structure that contains the source and destination of the serialized stream associated with the <see cref="T:ValidationFramework.AutoKeyDictionary`2"/> instance.</param>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object that contains the information required to serialize the <see cref="T:ValidationFramework.AutoKeyDictionary`2"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">info is null.</exception>
        </member>
        <member name="P:ValidationFramework.AutoKeyDictionary`2.Comparer">
            <summary>Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that is used to determine equality of keys for the dictionary. </summary>
            <returns>The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> generic interface implementation that is used to determine equality of keys for the current <see cref="T:ValidationFramework.AutoKeyDictionary`2"/> and to provide hash values for the keys.</returns>
        </member>
        <member name="P:ValidationFramework.AutoKeyDictionary`2.Item(`0)">
            <summary>Gets the value associated with the specified key.</summary>
            <returns>The value associated with the specified key. If the specified <paramref name="key"/> is not found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>, and a set operation creates a new element with the specified key.</returns>
            <param name="key">The key of the value to get or set.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">An item with the <paramref name="key"/> does not exist in the collection.</exception>
        </member>
        <member name="P:ValidationFramework.AutoKeyDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:ValidationFramework.AutoKeyDictionary`2"/>. 
            </summary>
            <remarks>
            The order of the keys in the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> is unspecified, but it is the same order as the associated values in the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/> returned by the Values property.
            The returned <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> is not a static copy; instead, the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> refers back to the keys in the original <see cref="T:ValidationFramework.AutoKeyDictionary`2"/>. Therefore, changes to the <see cref="T:ValidationFramework.AutoKeyDictionary`2"/> continue to be reflected in the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/>.
            Getting the value of this property is an O(1) operation.
            </remarks>
        </member>
        <member name="P:ValidationFramework.AutoKeyDictionary`2.Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:ValidationFramework.AutoKeyDictionary`2"/>. 
            </summary>
            <remarks>
            The order of the values in the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/> is unspecified, but it is the same order as the associated keys in the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> returned by the Keys property.
            The returned <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/> is not a static copy; instead, the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/> refers back to the values in the original <see cref="T:ValidationFramework.AutoKeyDictionary`2"/>. Therefore, changes to the <see cref="T:ValidationFramework.AutoKeyDictionary`2"/> continue to be reflected in the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/>.
            Getting the value of this property is an O(1) operation.
            </remarks>
        </member>
        <member name="P:ValidationFramework.AutoKeyDictionary`2.Count">
            <summary>
            Gets the number of items contained in the <see cref="T:ValidationFramework.AutoKeyDictionary`2"/>.
            </summary>
            <returns>The number of items contained in the <see cref="T:ValidationFramework.AutoKeyDictionary`2"/>.</returns>
        </member>
        <member name="P:ValidationFramework.AutoKeyDictionary`2.IsReadOnly">
            <summary>
            Gets a <see langword="bool"/> indicating if the <see cref="T:ValidationFramework.AutoKeyDictionary`2"/> is read-only.
            </summary>
            <seealso cref="M:ValidationFramework.AutoKeyDictionary`2.SetToReadOnly"/>
        </member>
        <member name="M:ValidationFramework.Reflection.FieldCollection.#ctor(ValidationFramework.Reflection.TypeDescriptor)">
            <summary>
            Initialize a new instance of the <see cref="T:ValidationFramework.Reflection.FieldCollection"/> class.
            </summary>
            <param name="typeDescriptor">The <see cref="T:ValidationFramework.Reflection.TypeDescriptor"/> for this <see cref="T:ValidationFramework.Reflection.FieldCollection"/>.</param>
        </member>
        <member name="M:ValidationFramework.Reflection.FieldCollection.GetKeyForItem(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Extracts the key from the <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/> element.
            </summary>
            <returns>The key for the specified element.</returns>
            <param name="item">The element from which to extract the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="P:ValidationFramework.Reflection.FieldCollection.TypeDescriptor">
            <summary>
            Gets the <see cref="T:ValidationFramework.Reflection.TypeDescriptor"/> for this <see cref="T:ValidationFramework.Reflection.FieldCollection"/>.
            </summary>
        </member>
        <member name="T:ValidationFramework.Configuration.RequiredObjectRuleConfigReader">
            <summary>
            A <see cref="T:ValidationFramework.Configuration.IRuleConfigReader"/> that creates a <see cref="T:ValidationFramework.RequiredRule`1"/> from a <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
            <remarks>
              <see cref="T:ValidationFramework.Configuration.RuleData"/> for default attributes.
              <b>Extra Elements</b>
              <ul>
                <li>
                  Any element (optional): Only 1 allowed. Used to populate <see cref="P:ValidationFramework.RequiredRule`1.InitialValue"/>. It is converted to an object using a <see cref="T:System.Xml.Serialization.XmlSerializer"/>.   
                </li>
              </ul>
            </remarks>
            <example>
            <code lang="xml" title="This example shows an xml configuration for RequiredObjectRuleConfigReader">
            <rule errorMessage="hello" typeName="RequiredObjectRule">
            <person name="aaa"/>
            </rule>
            </code>
            </example>
            <seealso cref="T:ValidationFramework.RequiredRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.ConfigurationService"/>
        </member>
        <member name="T:ValidationFramework.Configuration.IRuleConfigReader">
            <summary>
            Defines properties and methods that must be implemented to allow a class to convert xml to a <see cref="T:ValidationFramework.Rule"/>.
            </summary>
            <example>
            <b>Extending the validation framework</b><br/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\RequiredCharacterRule.cs" title="Implementing a custom rule by inheriting from Rule" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\NewRule\RequiredCharacterRule.vb" title="Implementing a custom rule by inheriting from Rule" lang="vbnet"/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\RequiredCharacterRuleAttribute.cs" title="Creating a IRuleAttribute for that Rule" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\NewRule\RequiredCharacterRuleAttribute.vb" title="Creating a IRuleAttribute for that Rule" lang="vbnet"/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\RequiredCharacterRuleConfigReader.cs" title="Creating IRuleConfigReader for that Rule." lang="cs"/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\RequiredCharacterRuleConfigReaderUsage.cs" title="Using the custom ConfigReader." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\NewRule\RequiredCharacterRuleConfigReader.vb" title="Creating IRuleConfigReader for that Rule." lang="vbnet"/>
            <code source="Examples\ExampleLibraryVB\NewRule\RequiredCharacterRuleConfigReaderUsage.vb" title="Using the custom ConfigReader." lang="vbnet"/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\ClientRegularExpressionWebValidator.cs" title="A custom RegularExpressionValidator that only validates on the client side." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\NewRule\ClientRegularExpressionWebValidator.vb" title="A custom RegularExpressionValidator that only validates on the client side." lang="vbnet"/>
            </example>
            <seealso cref="T:ValidationFramework.Configuration.ConfigurationService"/>
        </member>
        <member name="M:ValidationFramework.Configuration.IRuleConfigReader.ReadConfig(ValidationFramework.Configuration.RuleData,System.RuntimeTypeHandle)">
            <summary>
            Create a <see cref="T:ValidationFramework.Rule"/> from a <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
            <param name="ruleData">The <see cref="T:ValidationFramework.Configuration.RuleData"/> that represent the xml to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <param name="runtimeTypeHandle">The <see cref="T:System.RuntimeTypeHandle"/> for the <see cref="T:System.Type"/> to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <returns>A <see cref="T:ValidationFramework.Rule"/> that <paramref name="ruleData"/> represented</returns>
        </member>
        <member name="M:ValidationFramework.Configuration.RequiredObjectRuleConfigReader.ReadConfig(ValidationFramework.Configuration.RuleData,System.RuntimeTypeHandle)">
            <summary>
            Create a <see cref="T:ValidationFramework.Rule"/> from a <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
            <param name="ruleData">The <see cref="T:ValidationFramework.Configuration.RuleData"/> that represent the xml to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <param name="runtimeTypeHandle">The <see cref="T:System.RuntimeTypeHandle"/> for the <see cref="T:System.Type"/> to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <returns>A <see cref="T:ValidationFramework.Rule"/> that <paramref name="ruleData"/> represented</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ruleData"/> is null.</exception>
        </member>
        <member name="T:ValidationFramework.RequiredIntRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.RequiredRule`1"/>, that will check the existance of a <see cref="T:System.Int32"/>, should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.RequiredRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.RequiredRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\RequiredValidators\RequiredIntRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\RequiredValidators\RequiredIntRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.RequiredIntRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RequiredIntRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RequiredIntRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.RequiredIntRuleAttribute.InitialValue">
            <summary>
            Gets or sets the initial and invalid value.
            </summary>
            <seealso cref="P:ValidationFramework.RequiredRule`1.InitialValue"/>
        </member>
        <member name="T:ValidationFramework.RequiredDecimalRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.RequiredRule`1"/>, that will check the existance of a <see cref="T:System.Decimal"/>, should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.RequiredRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.RequiredRuleConfigReader"/>
            <remarks>Since it is not possible to pass a <see cref="T:System.Decimal"/> to an <see cref="T:System.Attribute"/> a <see cref="T:System.Double"/> is used as the <see cref="P:ValidationFramework.RequiredDecimalRuleAttribute.InitialValue"/>. It is converted to a <see cref="T:System.Decimal"/> at runtime.</remarks>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\RequiredValidators\RequiredDecimalRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\RequiredValidators\RequiredDecimalRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.RequiredDecimalRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RequiredDecimalRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RequiredDecimalRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.RequiredDecimalRuleAttribute.InitialValue">
            <summary>
            Gets or sets the initial and invalid value.
            </summary>
            <seealso cref="P:ValidationFramework.RequiredRule`1.InitialValue"/>
        </member>
        <member name="T:ValidationFramework.RangeDoubleRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.RangeRule`1"/>, that will check the range of a <see cref="T:System.Double"/>, should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.RangeRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.RangeRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\RangeValidators\RangeDoubleRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\RangeValidators\RangeDoubleRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="T:ValidationFramework.RangeRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.RangeRule`1"/>, that will check the range of a <see cref="T:System.Byte"/>, should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.RangeRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.RangeRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\RangeValidators\RangeByteRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\RangeValidators\RangeByteRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.RangeRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RangeRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RangeRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.RangeRuleAttribute.EqualsMinimumIsValid">
            <summary>
            Get or sets a value indicating if the minimum value is valid.
            </summary>
        </member>
        <member name="P:ValidationFramework.RangeRuleAttribute.EqualsMaximumIsValid">
            <summary>
            Get or sets a value indicating if the maximum value is valid.
            </summary>
        </member>
        <member name="M:ValidationFramework.RangeDoubleRuleAttribute.#ctor(System.Double,System.Double)">
            <summary>
            Initialises a new instance of the <see cref="T:ValidationFramework.RangeDoubleRuleAttribute"/> class.
            </summary>
            <param name="minimum">The minimum value.</param>
            <param name="maximum">The maximum value.</param>
        </member>
        <member name="M:ValidationFramework.RangeDoubleRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RangeDoubleRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RangeDoubleRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.RangeDoubleRuleAttribute.Minimum">
            <summary>
            Gets the minimum value.
            </summary>
            <seealso cref="P:ValidationFramework.RangeRule`1.Minimum"/>
        </member>
        <member name="P:ValidationFramework.RangeDoubleRuleAttribute.Maximum">
            <summary>
            Gets the maximum value.
            </summary>
            <seealso cref="P:ValidationFramework.RangeRule`1.Maximum"/>
        </member>
        <member name="T:ValidationFramework.RangeDecimalRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.RangeRule`1"/>, that will check the range a <see cref="T:System.Decimal"/>, should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.RangeRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.RangeRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\RangeValidators\RangeDecimalRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\RangeValidators\RangeDecimalRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.RangeDecimalRuleAttribute.#ctor(System.Double,System.Double)">
            <summary>
            Initialises a new instance of the <see cref="T:ValidationFramework.RangeDecimalRuleAttribute"/> class.
            </summary>
            <param name="minimum">The minimum value.</param>
            <param name="maximum">The maximum value.</param>
        </member>
        <member name="M:ValidationFramework.RangeDecimalRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RangeDecimalRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RangeDecimalRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.RangeDecimalRuleAttribute.Minimum">
            <summary>
            Gets the minimum value.
            </summary>
            <seealso cref="P:ValidationFramework.RangeRule`1.Minimum"/>
        </member>
        <member name="P:ValidationFramework.RangeDecimalRuleAttribute.Maximum">
            <summary>
            Gets the maximum value.
            </summary>
            <seealso cref="P:ValidationFramework.RangeRule`1.Maximum"/>
        </member>
        <member name="T:ValidationFramework.Configuration.MappingDocumentsCollection">
            <summary>
            A custom <see cref="T:System.Configuration.ConfigurationElementCollection"/> to contain <see cref="T:ValidationFramework.Configuration.MappingDocumentElement"/>s.
            </summary>
        </member>
        <member name="M:ValidationFramework.Configuration.MappingDocumentsCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>A new <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="M:ValidationFramework.Configuration.MappingDocumentsCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>An System.Object that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="P:ValidationFramework.Configuration.MappingDocumentsCollection.Item(System.Int32)">
            <summary>
            Get the <see cref="T:ValidationFramework.Configuration.MappingDocumentElement"/> at the specified index location.
            </summary>
            <param name="index">The index location of the <see cref="T:ValidationFramework.Configuration.MappingDocumentElement"/> to return.</param>
            <returns>The <see cref="T:ValidationFramework.Configuration.MappingDocumentElement"/> at the specified index.</returns>
        </member>
        <member name="P:ValidationFramework.Configuration.MappingDocumentsCollection.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.Configuration.MappingDocumentsCollection.ElementName">
            <summary>
            Gets the name used to identify this collection of elements.
            </summary>
        </member>
        <member name="T:ValidationFramework.Configuration.ErrorMessageProviderElement">
            <summary>
            Represents a <see cref="T:System.Configuration.ConfigurationElement"/> used for deserializing a <see cref="T:ValidationFramework.Configuration.IErrorMessageProvider"/> from a config file.
            </summary>
            <remarks>
            The <see cref="P:ValidationFramework.Configuration.ErrorMessageProviderElement.TypeName"/> and the <see cref="P:ValidationFramework.Configuration.ErrorMessageProviderElement.InnerXml"/> will, in conjunction with a <see cref="T:System.Xml.Serialization.XmlSerializer"/>, to instantiate a <see cref="T:ValidationFramework.Configuration.IErrorMessageProvider"/>.
            </remarks>
        </member>
        <member name="M:ValidationFramework.Configuration.ErrorMessageProviderElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
            Gets a value indicating whether an unknown element is encountered during deserialization.
            </summary>
            <param name="elementName">The <see cref="T:System.Xml.XmlReader"/> object being used for deserialization.</param>
            <param name="reader">The name of the unknown sub-element.</param>
            <returns>true when an unknown element is encountered while deserializing.</returns>
        </member>
        <member name="P:ValidationFramework.Configuration.ErrorMessageProviderElement.TypeName">
            <summary>
            Gets or sets the name of the <see cref="T:System.Type"/> that this <see cref="T:ValidationFramework.Configuration.ErrorMessageProviderElement"/> will deserialize.
            </summary>
        </member>
        <member name="P:ValidationFramework.Configuration.ErrorMessageProviderElement.InnerXml">
            <summary>
            Gets or set the inner XML for this <see cref="T:ValidationFramework.Configuration.ErrorMessageProviderElement"/>.
            </summary>
        </member>
        <member name="T:ValidationFramework.RequiredRule`1">
            <summary>
            Base class for performing a required validation.
            </summary>
        </member>
        <member name="T:ValidationFramework.Rule">
            <summary>
            Base class for all Rules.
            </summary>
            <remarks>
            All <see cref="T:ValidationFramework.Rule"/>s must be immutable i.e. its state cannot be modified after it is created. This requirement is for performance reasons. 
            </remarks>
            <example>
            <b>Extending the validation framework</b><br/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\RequiredCharacterRule.cs" title="Implementing a custom rule by inheriting from Rule" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\NewRule\RequiredCharacterRule.vb" title="Implementing a custom rule by inheriting from Rule" lang="vbnet"/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\RequiredCharacterRuleAttribute.cs" title="Creating a IRuleAttribute for that Rule" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\NewRule\RequiredCharacterRuleAttribute.vb" title="Creating a IRuleAttribute for that Rule" lang="vbnet"/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\RequiredCharacterRuleConfigReader.cs" title="Creating IRuleConfigReader for that Rule." lang="cs"/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\RequiredCharacterRuleConfigReaderUsage.cs" title="Using the custom ConfigReader." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\NewRule\RequiredCharacterRuleConfigReader.vb" title="Creating IRuleConfigReader for that Rule." lang="vbnet"/>
            <code source="Examples\ExampleLibraryVB\NewRule\RequiredCharacterRuleConfigReaderUsage.vb" title="Using the custom ConfigReader." lang="vbnet"/>
            <code source="Examples\ExampleLibraryCSharp\NewRule\ClientRegularExpressionWebValidator.cs" title="A custom RegularExpressionValidator that only validates on the client side." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\NewRule\ClientRegularExpressionWebValidator.vb" title="A custom RegularExpressionValidator that only validates on the client side." lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.Rule.#ctor(System.Nullable{System.RuntimeTypeHandle},System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.Rule"/> class.
            </summary>
            <param name="runtimeTypeHandle">The <see cref="P:ValidationFramework.Rule.RuntimeTypeHandle"/> that this <see cref="T:ValidationFramework.Rule"/> can be applied to. Use <see langword="null"/> to indicate it can be applied to any member type.</param>
            <param name="errorMessage">The error message for this rule. Pass a null to use the the default value.</param>
            <param name="ruleSet">A <see cref="T:System.String"/> used to group <see cref="T:ValidationFramework.Rule"/>s. Use a null to indicate no grouping. Is converted to uppercase.</param>
            <param name="useErrorMessageProvider"><c>true</c> to use <see cref="P:ValidationFramework.Configuration.ConfigurationService.ErrorMessageProvider"/> when determining the error message for this <see cref="T:ValidationFramework.Rule"/>; otherwise <c>false</c>.</param>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorMessage"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.Rule.GetComputedErrorMessage(System.String,System.String)">
            <summary>
            Called after <see cref="P:ValidationFramework.Rule.InfoDescriptor"/> is set but only when <see cref="P:ValidationFramework.Rule.ErrorMessage"/> is null.
            </summary>
            <remarks>
            Used by inheritors to provide a customized default <see cref="P:ValidationFramework.Rule.ErrorMessage"/>.
            </remarks>
            <returns>The error message for the <see cref="T:ValidationFramework.Rule"/>.</returns>
            <param name="tokenizedMemberName">A user friendly representation of the member name.</param>
            <param name="descriptorType">
            If <see cref="P:ValidationFramework.Rule.InfoDescriptor"/> is a <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> then <paramref name="descriptorType"/> will be 'property'.
            If <see cref="P:ValidationFramework.Rule.InfoDescriptor"/> is a <see cref="T:ValidationFramework.Reflection.ParameterDescriptor"/> then <paramref name="descriptorType"/> will be 'parameter'.
            </param>
        </member>
        <member name="M:ValidationFramework.Rule.CreateValidationResult(System.Object,System.Object,System.Object)">
            <summary>
            A helper method for creating <see cref="T:ValidationFramework.ValidationResult"/>s.
            </summary>
            <remarks>
            If <see cref="P:ValidationFramework.Rule.UseErrorMessageProvider"/> is <c>true</c> then <see cref="P:ValidationFramework.Configuration.ConfigurationService.ErrorMessageProvider"/> will be called to get the error message. Otherwise the <see cref="P:ValidationFramework.Rule.ErrorMessage"/> will be used.
            </remarks>
            <param name="targetObjectValue">The value of the object containing the member to validate.</param>
            <param name="targetMemberValue">The value of the member to validate.</param>
            <param name="context">An <see cref="T:System.Object"/> that contains data for the <see cref="T:ValidationFramework.Rule"/> to validate.</param>
            <returns>A constructed <see cref="T:ValidationFramework.ValidationResult"/>.</returns>
        </member>
        <member name="M:ValidationFramework.Rule.CheckType(System.RuntimeTypeHandle)">
            <summary>
            Check that the <see cref="P:ValidationFramework.Rule.RuntimeTypeHandle"/> is valid.
            </summary>
            <exception cref="T:System.ArgumentException"><paramref name="targetMemberRuntimeTypeHandle"/> is not of a valid type.</exception>
            <remarks>
            Called after <see cref="P:ValidationFramework.Rule.InfoDescriptor"/> is set.
            </remarks>
            <param name="targetMemberRuntimeTypeHandle">The <see cref="P:ValidationFramework.Rule.RuntimeTypeHandle"/> that this <see cref="T:ValidationFramework.Rule"/> is applied to.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="targetMemberRuntimeTypeHandle"/> is of the wrong type.</exception>
        </member>
        <member name="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)">
            <summary>
            Validate the member this <see cref="T:ValidationFramework.Rule"/> is applied to.
            </summary>
            <returns><see langword="true"/> if the member is valid; otherwise <see langword="false"/>.</returns>
            <param name="targetObjectValue">The value of the object containing the member to validate.</param>
            <param name="targetMemberValue">The value of the member to validate.</param>
            <param name="context">An <see cref="T:System.Object"/> that contains data for the <see cref="T:ValidationFramework.Rule"/> to validate. The default is null.</param>
        </member>
        <member name="M:ValidationFramework.Rule.IsEquivalent(ValidationFramework.Rule)">
            <summary>
            Checks if the current <see cref="T:ValidationFramework.Rule"/> is equivalent to another <see cref="T:ValidationFramework.Rule"/>.
            </summary>
            <remarks>
            Called for each <see cref="T:ValidationFramework.Rule"/> in <see cref="T:ValidationFramework.Reflection.RuleCollection"/> when a new <see cref="T:ValidationFramework.Rule"/> is added. This method is only called when both the existing <see cref="T:ValidationFramework.Rule"/> and the <see cref="T:ValidationFramework.Rule"/> being are of the same <see cref="T:System.Type"/> and have the same <see cref="P:ValidationFramework.Rule.RuleSet"/>. So it is safe to directly cast <paramref name="rule"/> to the current type. All properties in <paramref name="rule"/> should be compared to the propeties of the current <see cref="T:ValidationFramework.Rule"/>.
            </remarks>
            <param name="rule">The <see cref="T:ValidationFramework.Rule"/> to check for equivalence.</param>
            <returns><see langword="true"/> if <paramref name="rule"/> is equivalent to the current <see cref="T:ValidationFramework.Rule"/>; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:ValidationFramework.Rule.RuleInterpretation">
            <summary>
            Gets a <see cref="T:System.String"/> that is a business interpretation of the <see cref="T:ValidationFramework.Rule"/>.
            </summary>
            <remarks>
            Used as a helper to document the API that <see cref="T:ValidationFramework.Rule"/>s are applied to.
            The code for this property must not use the <see cref="P:ValidationFramework.Rule.InfoDescriptor"/> property as it may not be set.
            </remarks>
        </member>
        <member name="P:ValidationFramework.Rule.ErrorMessage">
            <summary>
            Gets the error message for this <see cref="T:ValidationFramework.Rule"/>.
            </summary>
            <remarks>
            In the case of an application with a user interface this property would often be displayed to the user. So it should contain proper grammar and punctuation.
            </remarks>
        </member>
        <member name="P:ValidationFramework.Rule.RuntimeTypeHandle">
            <summary>
            Gets the <see cref="P:ValidationFramework.Rule.RuntimeTypeHandle"/> that this <see cref="T:ValidationFramework.Rule"/> can be applied to. A <see langword="null"/> is returned if it can be applied to any member type.
            </summary>
        </member>
        <member name="P:ValidationFramework.Rule.InfoDescriptor">
            <summary>
            Gets the <see cref="P:ValidationFramework.Rule.InfoDescriptor"/> that represents the member this <see cref="T:ValidationFramework.Rule"/> is applied to.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><see cref="P:ValidationFramework.Rule.RuntimeTypeHandle"/> has a value and <see cref="P:ValidationFramework.Reflection.InfoDescriptor.RuntimeTypeHandle"/> does not inherit from <see cref="P:ValidationFramework.Rule.RuntimeTypeHandle"/>.</exception>
        </member>
        <member name="P:ValidationFramework.Rule.RuleSet">
            <summary>
            Gets A <see cref="T:System.String"/> used to group <see cref="T:ValidationFramework.Rule"/>s. Use a null to indicate no grouping.
            </summary>
            <remarks>
            Will be a null to indicate no rule set.<br/>
            Case insensitive so this will always return a uppercase string no matter what is passed into the constructor.
            </remarks>
        </member>
        <member name="P:ValidationFramework.Rule.UseErrorMessageProvider">
            <summary>
            Get a <see cref="T:System.Boolean"/> indicating if <see cref="P:ValidationFramework.Configuration.ConfigurationService.ErrorMessageProvider"/> should be used when determining the error message for this <see cref="T:ValidationFramework.Rule"/>.
            </summary>
        </member>
        <member name="T:ValidationFramework.Web.ISupportWebClientValidation">
            <summary>
            Specifies that this <see cref="T:ValidationFramework.Rule"/> supports a client side (javascript) validation.
            </summary>
        </member>
        <member name="M:ValidationFramework.Web.ISupportWebClientValidation.CreateWebClientValidators">
            <summary>
            Get a list of <see cref="T:System.Web.UI.WebControls.BaseValidator"/>s to perform the client side validation.
            </summary>
            <remarks>The <see cref="T:System.Web.UI.WebControls.BaseValidator"/>s returned should only perform client validation.</remarks>
            <returns>The<see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Web.UI.WebControls.BaseValidator"/>s to perform the client side validation.</returns>
        </member>
        <member name="M:ValidationFramework.RequiredRule`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.RequiredRule`1"/> class.
            </summary>
            <remarks>
            The following are defaulted
            <list type="bullet">
            <item>
            <see cref="P:ValidationFramework.Rule.RuleSet"/> to null.
            </item>
            <item>
            <see cref="P:ValidationFramework.Rule.ErrorMessage"/> to the default error message.
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:ValidationFramework.RequiredRule`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.RequiredRule`1"/> class.
            </summary>
            <remarks>
            The following are defaulted
            <list type="bullet">
            <item>
            <see cref="P:ValidationFramework.Rule.RuleSet"/> to null.
            </item>
            </list>
            </remarks>
            <param name="errorMessage">The error message for this rule. Pass a null to use the the default value.</param>
            <exception cref="T:System.ArgumentException"><paramref name="errorMessage"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.RequiredRule`1.#ctor(System.String,System.String,System.Boolean,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.RequiredRule`1"/> class.
            </summary>
            <param name="errorMessage">The error message for this rule. Pass a null to use the the default value.</param>
            <param name="initialValue">The initial and invalid value.</param>
            <param name="ruleSet">A <see cref="T:System.String"/> used to group <see cref="T:ValidationFramework.Rule"/>s. Use a null to indicate no grouping.</param>
            <param name="useErrorMessageProvider"><c>true</c> to use <see cref="P:ValidationFramework.Configuration.ConfigurationService.ErrorMessageProvider"/> when determining the error message for this <see cref="T:ValidationFramework.Rule"/>; otherwise <c>false</c>.</param>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorMessage"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.RequiredRule`1.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.RequiredRule`1"/> class.
            </summary>
            <param name="errorMessage">The error message for this rule. Pass a null to use the the default value.</param>
            <param name="ruleSet">A <see cref="T:System.String"/> used to group <see cref="T:ValidationFramework.Rule"/>s. Use a null to indicate no grouping.</param>
            <param name="useErrorMessageProvider"><c>true</c> to use <see cref="P:ValidationFramework.Configuration.ConfigurationService.ErrorMessageProvider"/> when determining the error message for this <see cref="T:ValidationFramework.Rule"/>; otherwise <c>false</c>.</param>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorMessage"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.RequiredRule`1.CreateWebClientValidators">
            <summary>
            Get a list of <see cref="T:System.Web.UI.WebControls.BaseValidator"/>s to perform the client side validation.
            </summary>
            <remarks>The <see cref="T:System.Web.UI.WebControls.BaseValidator"/>s returned should only perform client validation.</remarks>
            <returns>The<see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Web.UI.WebControls.BaseValidator"/>s to perform the client side validation.</returns>
        </member>
        <member name="M:ValidationFramework.RequiredRule`1.CheckType(System.RuntimeTypeHandle)">
            <summary>
            Check that the <see cref="T:System.RuntimeTypeHandle"/> is valid.
            </summary>
            <remarks>
            Called after <see cref="P:ValidationFramework.Rule.InfoDescriptor"/> is set. Should throw <see cref="T:System.ArgumentException"/> if <paramref name="targetMemberRuntimeTypeHandle"/> is of the wrong type.
            </remarks>
            <param name="targetMemberRuntimeTypeHandle">The <see cref="T:System.RuntimeTypeHandle"/> that this <see cref="T:ValidationFramework.Rule"/> is applied to.</param>
        </member>
        <member name="M:ValidationFramework.RequiredRule`1.Validate(System.Object,System.Object,System.Object)">
            <summary>
            Validate the value of the member this <see cref="T:ValidationFramework.RequiredRule`1"/> is applied to.
            </summary>
            <returns><see langword="true"/> if the value is valid; otherwise <see langwordcref="false"/>.</returns>
            <param name="targetObjectValue">The value of the object containing the member to validate.</param>
            <param name="targetMemberValue">The value of the member to validate.</param>
            <param name="context">An <see cref="T:System.Object"/> that contains data for the <see cref="T:ValidationFramework.Rule"/> to validate. The default is null.</param>
        </member>
        <member name="M:ValidationFramework.RequiredRule`1.GetComputedErrorMessage(System.String,System.String)">
            <summary>
            Called after <see cref="P:ValidationFramework.Rule.InfoDescriptor"/> is set but only when <see cref="P:ValidationFramework.Rule.ErrorMessage"/> is null.
            </summary>
            <returns>The error message for the <see cref="T:ValidationFramework.Rule"/>.</returns>
            <param name="tokenizedMemberName">A user friendly representation of the member name.</param>
            <param name="descriptorType">
            If <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> is a <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> then <paramref name="descriptorType"/> will be 'property'.
            If <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> is a <see cref="T:ValidationFramework.Reflection.ParameterDescriptor"/> then <paramref name="descriptorType"/> will be 'parameter'.
            </param>
        </member>
        <member name="M:ValidationFramework.RequiredRule`1.IsEquivalent(ValidationFramework.Rule)">
            <summary>
            Checks if the current <see cref="T:ValidationFramework.Rule"/> is equivalent to another <see cref="T:ValidationFramework.Rule"/>.
            </summary>
            <remarks>
            Called for each <see cref="T:ValidationFramework.Rule"/> in <see cref="T:ValidationFramework.Reflection.RuleCollection"/> when a new <see cref="T:ValidationFramework.Rule"/> is added. This method is only called when both the existing <see cref="T:ValidationFramework.Rule"/> and the <see cref="T:ValidationFramework.Rule"/> being are of the same <see cref="T:System.Type"/> and have the same <see cref="P:ValidationFramework.Rule.RuleSet"/>. So it is safe to directly cast <paramref name="rule"/> to the current type. All properties in <paramref name="rule"/> should be compared to the propeties of the current <see cref="T:ValidationFramework.Rule"/>.
            </remarks>
            <param name="rule">The <see cref="T:ValidationFramework.Rule"/> to check for equivalence.</param>
            <returns><see langword="true"/> if <paramref name="rule"/> is equivalent to the current <see cref="T:ValidationFramework.Rule"/>; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:ValidationFramework.RequiredRule`1.HasInitialValue">
            <summary>
            Get a value indicating if the <see cref="P:ValidationFramework.RequiredRule`1.InitialValue"/> has been set
            </summary>
        </member>
        <member name="P:ValidationFramework.RequiredRule`1.InitialValue">
            <summary>
            Gets or sets the initial and invalid value.
            </summary>
        </member>
        <member name="P:ValidationFramework.RequiredRule`1.RuleInterpretation">
            <summary>
            Gets a <see cref="T:System.String"/> that is a business interpretation of the <see cref="T:ValidationFramework.Rule"/>.
            </summary>
            <remarks>
            Used as a helper to document the API that <see cref="T:ValidationFramework.Rule"/>s area applied to.
            </remarks>
        </member>
        <member name="T:ValidationFramework.RequiredBoolRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.RequiredBoolRule"/> should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.RequiredBoolRule"/>
            <seealso cref="T:ValidationFramework.Configuration.RequiredBoolRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\RequiredValidators\RequiredBoolRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\RequiredValidators\RequiredBoolRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.RequiredBoolRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RequiredBoolRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RequiredBoolRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="T:ValidationFramework.EnumerableDuplicateRule">
            <summary>
            Performs duplicate validation check on <see cref="T:System.Collections.IEnumerable"/>s.
            </summary>
            <remarks>If the value being validated is null the rule will evaluate to true.</remarks>
            <seealso cref="T:ValidationFramework.Configuration.EnumerableDuplicateRuleConfigReader"/>
            <seealso cref="T:ValidationFramework.EnumerableDuplicateRuleAttribute"/>
        </member>
        <member name="M:ValidationFramework.EnumerableDuplicateRule.#ctor">
            <summary>
            Initializes a new, empty instance of the <see cref="T:ValidationFramework.EnumerableDuplicateRule"/> class using the specified <see cref="T:System.Collections.IEqualityComparer"/> object. 
            </summary>
            <remarks>
            The following are defaulted
            <list type="bullet">
            <item>
            <see cref="P:ValidationFramework.Rule.RuleSet"/> to null.</item>
            <item>
            <see cref="P:ValidationFramework.Rule.ErrorMessage"/> to the default error message.
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:ValidationFramework.EnumerableDuplicateRule.#ctor(System.String)">
            <summary>
            Initializes a new, empty instance of the <see cref="T:ValidationFramework.EnumerableDuplicateRule"/> class using the specified <see cref="T:System.Collections.IEqualityComparer"/> object. 
            </summary>
            <remarks>
            The following are defaulted
            <list type="bullet">
            <item>
            <see cref="P:ValidationFramework.Rule.RuleSet"/> to null.
            </item>
            </list>
            </remarks>
            <param name="errorMessage">The error message for this rule. Pass a null to use the the default value.</param>
            <exception cref="T:System.ArgumentException"><paramref name="errorMessage"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.EnumerableDuplicateRule.#ctor(System.String,System.String,System.Boolean,System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new, empty instance of the <see cref="T:ValidationFramework.EnumerableDuplicateRule"/> class using the specified <see cref="T:System.Collections.IEqualityComparer"/> object. 
            </summary>
            <param name="errorMessage">The error message for this rule. Pass a null to use the the default value.</param>
            <param name="useErrorMessageProvider"><c>true</c> to use <see cref="P:ValidationFramework.Configuration.ConfigurationService.ErrorMessageProvider"/> when determining the error message for this <see cref="T:ValidationFramework.Rule"/>; otherwise <c>false</c>.</param>
            <param name="comparer">The <see cref="T:System.Collections.IEqualityComparer"/> object that defines how to compare objects for equality.
            -or- 
            a null reference to use the default hash code provider and the default comparer. The default comparer is each item's implementation of Object.Equals. 
            </param>
            <param name="ruleSet">A <see cref="T:System.String"/> used to group <see cref="T:ValidationFramework.Rule"/>s. Use a null to indicate no grouping.</param>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorMessage"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.EnumerableDuplicateRule.Validate(System.Object,System.Object,System.Object)">
            <summary>
            Validate the member this <see cref="T:ValidationFramework.Rule"/> is applied to.
            </summary>
            <param name="targetObjectValue">The value of the object containing the member to validate.</param>
            <param name="targetMemberValue">The value of the member to validate.</param>
            <param name="context">An <see cref="T:System.Object"/> that contains data for the <see cref="T:ValidationFramework.Rule"/> to validate. The default is null.</param>
        </member>
        <member name="M:ValidationFramework.EnumerableDuplicateRule.GetComputedErrorMessage(System.String,System.String)">
            <summary>
            Called after <see cref="P:ValidationFramework.Rule.InfoDescriptor"/> is set but only when <see cref="P:ValidationFramework.Rule.ErrorMessage"/> is null.
            </summary>
            <returns>The error message for the <see cref="T:ValidationFramework.Rule"/>.</returns>
            <param name="tokenizedMemberName">A user friendly representation of the member name.</param>
            <param name="descriptorType">
            If <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> is a <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> then <paramref name="descriptorType"/> will be 'property'.
            If <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> is a <see cref="T:ValidationFramework.Reflection.ParameterDescriptor"/> then <paramref name="descriptorType"/> will be 'parameter'.
            </param>
        </member>
        <member name="M:ValidationFramework.EnumerableDuplicateRule.IsEquivalent(ValidationFramework.Rule)">
            <summary>
            Checks if the current <see cref="T:ValidationFramework.Rule"/> is equivalent to another <see cref="T:ValidationFramework.Rule"/>.
            </summary>
            <remarks>
            Called for each <see cref="T:ValidationFramework.Rule"/> in <see cref="T:ValidationFramework.Reflection.RuleCollection"/> when a new <see cref="T:ValidationFramework.Rule"/> is added. This method is only called when both the existing <see cref="T:ValidationFramework.Rule"/> and the <see cref="T:ValidationFramework.Rule"/> being are of the same <see cref="T:System.Type"/> and have the same <see cref="P:ValidationFramework.Rule.RuleSet"/>. So it is safe to directly cast <paramref name="rule"/> to the current type. All properties in <paramref name="rule"/> should be compared to the propeties of the current <see cref="T:ValidationFramework.Rule"/>.
            </remarks>
            <param name="rule">The <see cref="T:ValidationFramework.Rule"/> to check for equivalence.</param>
            <returns><see langword="true"/> if <paramref name="rule"/> is equivalent to the current <see cref="T:ValidationFramework.Rule"/>; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:ValidationFramework.EnumerableDuplicateRule.RuleInterpretation">
            <summary>
            Gets a <see cref="T:System.String"/> that is a business interpretation of the <see cref="T:ValidationFramework.Rule"/>.
            </summary>
            <remarks>
            Used as a helper to document the API that <see cref="T:ValidationFramework.Rule"/>s area applied to.
            </remarks>
        </member>
        <member name="P:ValidationFramework.EnumerableDuplicateRule.Comparer">
            <summary>
            Gets the <see cref="T:System.Collections.IEqualityComparer"/> object that defines how to compare objects for equality.
            </summary>
        </member>
        <member name="T:ValidationFramework.ComparePropertyRule">
            <summary>
            For comparing two properties.
            </summary>
            <seealso cref="T:ValidationFramework.ComparePropertyRuleAttribute"/>
            <seealso cref="T:ValidationFramework.Configuration.ComparePropertyRuleConfigReader"/>
        </member>
        <member name="M:ValidationFramework.ComparePropertyRule.#ctor(System.String,ValidationFramework.CompareOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.ComparePropertyRule"/> class.
            </summary>
            <remarks>
            The following are defaulted
            <list type="bullet">
            <item>
            <see cref="P:ValidationFramework.Rule.RuleSet"/> to null.
            </item>
            <item>
            <see cref="P:ValidationFramework.Rule.ErrorMessage"/> to the default error message.
            </item>
            </list>
            </remarks>
            <param name="operator">The comparison operation to perform.</param>
            <param name="propertyToCompare">The name of the property to compare with.</param> 
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyToCompare"/> is null.</exception>
        </member>
        <member name="M:ValidationFramework.ComparePropertyRule.#ctor(System.String,System.String,ValidationFramework.CompareOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.ComparePropertyRule"/> class.
            </summary>
            <remarks>
            The following are defaulted
            <list type="bullet">
            <item>
            <see cref="P:ValidationFramework.Rule.RuleSet"/> to null.
            </item>
            </list>
            </remarks>
            <param name="operator">The comparison operation to perform.</param>
            <param name="errorMessage">The error message for this rule. Pass a null to use the the default value.</param>
            <param name="propertyToCompare">The name of the property to compare with.</param> 
            <exception cref="T:System.ArgumentException"><paramref name="errorMessage"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyToCompare"/> is null.</exception>
        </member>
        <member name="M:ValidationFramework.ComparePropertyRule.#ctor(System.String,System.String,System.Boolean,System.String,ValidationFramework.CompareOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.ComparePropertyRule"/> class.
            </summary>
            <param name="operator">The comparison operation to perform.</param>
            <param name="errorMessage">The error message for this rule. Pass a null to use the the default value.</param>
            <param name="propertyToCompare">The name of the property to compare with.</param> 
            <param name="ruleSet">A <see cref="T:System.String"/> used to group <see cref="T:ValidationFramework.Rule"/>s. Use a null to indicate no grouping.</param>
            <param name="useErrorMessageProvider"><c>true</c> to use <see cref="P:ValidationFramework.Configuration.ConfigurationService.ErrorMessageProvider"/> when determining the error message for this <see cref="T:ValidationFramework.Rule"/>; otherwise <c>false</c>.</param>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorMessage"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyToCompare"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyToCompare"/> is null.</exception>
        </member>
        <member name="M:ValidationFramework.ComparePropertyRule.GetComputedErrorMessage(System.String,System.String)">
            <summary>
            Called after <see cref="P:ValidationFramework.Rule.InfoDescriptor"/> is set but only when <see cref="P:ValidationFramework.Rule.ErrorMessage"/> is null.
            </summary>
            <returns>The error message for the <see cref="T:ValidationFramework.Rule"/>.</returns>
            <param name="tokenizedMemberName">A user friendly representation of the member name.</param>
            <param name="descriptorType">
            If <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> is a <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> then <paramref name="descriptorType"/> will be 'property'.
            If <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> is a <see cref="T:ValidationFramework.Reflection.ParameterDescriptor"/> then <paramref name="descriptorType"/> will be 'parameter'.
            </param>
        </member>
        <member name="M:ValidationFramework.ComparePropertyRule.Validate(System.Object,System.Object,System.Object)">
            <summary>
            Validate the member this <see cref="T:ValidationFramework.Rule"/> is applied to.
            </summary>
            <param name="targetObjectValue">The value of the object containing the member to validate.</param>
            <param name="targetMemberValue">The value of the member to validate.</param>
            <param name="context">An <see cref="T:System.Object"/> that contains data for the <see cref="T:ValidationFramework.Rule"/> to validate. The default is null.</param>
        </member>
        <member name="M:ValidationFramework.ComparePropertyRule.IsEquivalent(ValidationFramework.Rule)">
            <summary>
            Checks if the current <see cref="T:ValidationFramework.Rule"/> is equivalent to another <see cref="T:ValidationFramework.Rule"/>.
            </summary>
            <remarks>
            Called for each <see cref="T:ValidationFramework.Rule"/> in <see cref="T:ValidationFramework.Reflection.RuleCollection"/> when a new <see cref="T:ValidationFramework.Rule"/> is added. This method is only called when both the existing <see cref="T:ValidationFramework.Rule"/> and the <see cref="T:ValidationFramework.Rule"/> being are of the same <see cref="T:System.Type"/> and have the same <see cref="P:ValidationFramework.Rule.RuleSet"/>. So it is safe to directly cast <paramref name="rule"/> to the current type. All properties in <paramref name="rule"/> should be compared to the propeties of the current <see cref="T:ValidationFramework.Rule"/>.
            </remarks>
            <param name="rule">The <see cref="T:ValidationFramework.Rule"/> to check for equivalence.</param>
            <returns><see langword="true"/> if <paramref name="rule"/> is equivalent to the current <see cref="T:ValidationFramework.Rule"/>; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:ValidationFramework.ComparePropertyRule.CheckType(System.RuntimeTypeHandle)">
            <summary>
            Check that the <see cref="T:System.RuntimeTypeHandle"/> is valid.
            </summary>
            <exception cref="T:System.ArgumentException"><paramref name="targetMemberRuntimeTypeHandle"/> is not of a valid type.</exception>
            <remarks>
            Called after <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> is set. Should throw <see cref="T:System.ArgumentException"/> if <paramref name="targetMemberRuntimeTypeHandle"/> is of the wrong type.
            </remarks>
            <param name="targetMemberRuntimeTypeHandle">The <see cref="T:System.RuntimeTypeHandle"/> that this <see cref="T:ValidationFramework.Rule"/> is applied to.</param>
        </member>
        <member name="P:ValidationFramework.ComparePropertyRule.CompareOperator">
            <summary>
            Gets the comparison operation to perform. 
            </summary>
        </member>
        <member name="P:ValidationFramework.ComparePropertyRule.RuleInterpretation">
            <summary>
            Gets a <see cref="T:System.String"/> that is a business interpretation of the <see cref="T:ValidationFramework.Rule"/>.
            </summary>
            <remarks>
            Used as a helper to document the API that <see cref="T:ValidationFramework.Rule"/>s area applied to.
            </remarks>
        </member>
        <member name="P:ValidationFramework.ComparePropertyRule.PropertyToCompare">
            <summary>
            Gets the name of the property to compare with.
            </summary>
        </member>
        <member name="T:ValidationFramework.CompareLongRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.CompareRule`1"/>, that will compare a <see cref="T:System.Int64"/>, should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.CompareRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.CompareRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\CompareValidators\CompareLongRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\CompareValidators\CompareLongRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.CompareLongRuleAttribute.#ctor(System.Int64,ValidationFramework.CompareOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.CompareLongRuleAttribute"/> class.
            </summary>
            <param name="operator">The comparison operation to perform.</param>
            <param name="valueToCompare">The value to compare with.</param>
        </member>
        <member name="M:ValidationFramework.CompareLongRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.CompareLongRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.CompareLongRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.CompareLongRuleAttribute.ValueToCompare">
            <summary>
            Gets the value to compare.
            </summary>
            <seealso cref="P:ValidationFramework.CompareRule`1.ValueToCompare"/>
        </member>
        <member name="T:ValidationFramework.Configuration.ValidationMappingData">
            <summary>
            An object representation of the validation configuration for a group classes.
            </summary>
            <seealso cref="T:ValidationFramework.Configuration.ConfigurationService"/>
            <exclude/>
        </member>
        <member name="P:ValidationFramework.Configuration.ValidationMappingData.ClassDatas">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:ValidationFramework.Configuration.ClassData"/>s that represent the classes to be validate.
            </summary>
        </member>
        <member name="T:ValidationFramework.Configuration.RuleData">
            <summary>
            An object representation of the validation configuration.
            </summary>
            <remarks>Will be converted to a <see cref="T:ValidationFramework.Rule"/> by the <see cref="T:System.Type"/> refined by <see cref="P:ValidationFramework.Configuration.RuleData.TypeName"/>.</remarks>
            <seealso cref="T:ValidationFramework.Configuration.ConfigurationService"/>
        </member>
        <member name="M:ValidationFramework.Configuration.RuleData.ConvertExtraAttributesAsDictionary(System.Xml.XmlAttribute[])">
            <summary>
            Convert an array of <see cref="T:System.Xml.XmlAttribute"/>s to an <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="xmlAttributes">The array of <see cref="T:System.Xml.XmlAttribute"/>s to convert.</param>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> that contains all the key value pairs of the <see cref="T:System.Xml.XmlAttribute"/>s in <paramref name="xmlAttributes"/>.</returns>
        </member>
        <member name="P:ValidationFramework.Configuration.RuleData.TypeName">
            <summary>
            Gets or sets the name of the <see cref="T:System.Type"/> that this <see cref="T:ValidationFramework.Configuration.RuleData"/> represents.
            </summary>
            <remarks>This <see cref="T:System.Type"/> must implement <see cref="T:ValidationFramework.Configuration.IRuleConfigReader"/>.</remarks>
        </member>
        <member name="P:ValidationFramework.Configuration.RuleData.ErrorMessage">
            <summary>
            Gets or sets the error message for this <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.Configuration.RuleData.UseErrorMessageProvider">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> indicating is <see cref="P:ValidationFramework.Configuration.ConfigurationService.ErrorMessageProvider"/> should be used.
            </summary>
        </member>
        <member name="P:ValidationFramework.Configuration.RuleData.XmlAttributes">
            <summary>
            Gets or sets an array of leftover <see cref="T:System.Xml.XmlAttribute"/>s after xml has been deserialized from xml.
            </summary>
        </member>
        <member name="P:ValidationFramework.Configuration.RuleData.XmlElements">
            <summary>
            Gets or sets an array of leftover <see cref="T:System.Xml.XmlElement"/>s after xml has been deserialized from xml.
            </summary>
        </member>
        <member name="P:ValidationFramework.Configuration.RuleData.RuleSet">
            <summary>
            Gets or sets the rule set for this <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
        </member>
        <member name="T:ValidationFramework.Reflection.FastInvokeHandler">
            <summary>
            Delegate for calling a method that is not known at runtime.
            </summary>
            <remarks>It is a faster alternative to <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])"/>. An instance of <see cref="T:ValidationFramework.Reflection.FastInvokeHandler"/> can be obtained by using <see cref="T:ValidationFramework.Reflection.MethodInvokerCreator"/>.</remarks>
            <param name="target">The object on which to invoke the method. If a method is static, this argument is ignored. If a constructor is static, this argument must be a null reference.</param>
            <param name="parameters">An argument list for the invoked method. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, parameters should be a null reference.</param>
            <returns>The return value for the method or null if it doesn't return anything.</returns>
        </member>
        <member name="T:ValidationFramework.Reflection.MethodInvokerCreator">
            <summary>
            Generates <see langword="FastInvokeHandler"/>s for calling methods.
            </summary>
        </member>
        <member name="M:ValidationFramework.Reflection.MethodInvokerCreator.GetMethodInvoker(System.Reflection.MethodInfo)">
            <summary>
            Get a <see cref="T:ValidationFramework.Reflection.FastInvokeHandler"/> for <paramref name="methodInfo"/>.
            </summary>
            <param name="methodInfo">The <see cref="T:System.Reflection.MethodInfo"/> to create the <see cref="T:ValidationFramework.Reflection.FastInvokeHandler"/> for.</param>
            <returns>A <see cref="T:ValidationFramework.Reflection.FastInvokeHandler"/> that, when invoked, will call the method represented by <paramref name="methodInfo"/>.</returns>
        </member>
        <member name="T:ValidationFramework.Web.TargetObjectRequiredEventArgs">
            <summary>
            Provides data for the <see cref="!:ValidatorGenerator.TargetObjectRequired"/> event.
            </summary>
        </member>
        <member name="M:ValidationFramework.Web.TargetObjectRequiredEventArgs.#ctor(System.Collections.Generic.ICollection{System.Web.UI.Control})">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.Web.TargetObjectRequiredEventArgs"/> class. 
            </summary>
            <param name="controlsToValidate">The <see cref="T:System.Web.UI.Control"/>s to validate.</param>
        </member>
        <member name="P:ValidationFramework.Web.TargetObjectRequiredEventArgs.TargetObject">
            <summary>
            Gets or sets the target object.
            </summary>
        </member>
        <member name="P:ValidationFramework.Web.TargetObjectRequiredEventArgs.ControlsToValidate">
            <summary>
            Gets the controls that are being validated.
            </summary>
        </member>
        <member name="T:ValidationFramework.Web.PropertyValidatorGenerator">
            <summary>
            Adds <see cref="T:System.Web.UI.WebControls.BaseValidator"/>s to <see cref="T:System.Web.UI.Control"/>s based on the <see cref="T:ValidationFramework.Rule"/>s on a <see cref="T:System.Type"/>.
            </summary>
            <remarks>
            The following <see cref="T:ValidationFramework.Rule"/>s are supported for front end javascript validation.
            <list type="bullet">
             <item>
            	<see cref="T:ValidationFramework.CompareRule`1"/>
             </item>
             <item>
            	<see cref="T:ValidationFramework.CompareRule`1"/>. But only for the following types <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.DateTime"/><br/>
              Note: see <B>Note on <see cref="T:System.DateTime"/>s</B> 
             </item>
             <item>
            	<see cref="T:ValidationFramework.LengthStringRule"/>
             </item>
             <item>
            	<see cref="T:ValidationFramework.RangeStringRule"/>
             </item>
             <item>
            	<see cref="T:ValidationFramework.RangeRule`1"/>. But only for the following types <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.DateTime"/><br/>
              Note: see <B>Note on <see cref="T:System.DateTime"/>s</B> <br/>
              Note: is either <see cref="P:ValidationFramework.RangeRule`1.EqualsMaximumIsValid"/> or <see cref="P:ValidationFramework.RangeRule`1.EqualsMinimumIsValid"/> are set to false no <see cref="T:System.Web.UI.WebControls.BaseValidator"/>s will be generated. This is due to extensibility restrictions of the MS web validators and will be fixed in future versions.
             </item>
             <item>
            	<see cref="T:ValidationFramework.RegexRule"/>
             </item>
             <item>
            	<see cref="T:ValidationFramework.RequiredStringRule"/>
             </item>
             <item>
            	<see cref="T:ValidationFramework.RequiredRule`1"/>. Note: see <B>Note on <see cref="T:System.DateTime"/>s</B> 
             </item>
            </list>
            All <see cref="T:ValidationFramework.Rule"/>s, including those listed above, will be validated server side. <br/>
            
            <B>Note on <see cref="T:System.DateTime"/>s</B>: <see cref="T:System.DateTime"/>s will only work if the <see cref="P:ValidationFramework.RequiredRule`1.InitialValue"/>, <see cref="P:ValidationFramework.CompareRule`1.ValueToCompare"/>, <see cref="P:ValidationFramework.RangeRule`1.Minimum"/> and <see cref="P:ValidationFramework.RangeRule`1.Maximum"/> is a <see cref="T:System.DateTime"/> with no time component. This is due to the limitation of both the <see cref="T:System.Web.UI.WebControls.RequiredFieldValidator"/> and <see cref="T:System.Web.UI.WebControls.CompareValidator"/>, since they only support "yyyy-MM-dd". Note that if a <see cref="T:ValidationFramework.RequiredRule`1"/> is applied to a <see cref="T:System.DateTime"/> property that is <b>not</b> <see cref="T:System.Nullable`1"/> <see cref="F:System.DateTime.MinValue"/> will be used as the <see cref="P:ValidationFramework.RequiredRule`1.InitialValue"/>.
            </remarks>
        </member>
        <member name="M:ValidationFramework.Web.PropertyValidatorGenerator.OnTargetObjectRequired(ValidationFramework.Web.TargetObjectRequiredEventArgs)">
            <summary>
            Raises the <see cref="P:ValidationFramework.Web.PropertyValidatorGenerator.TargetObjectRequired"/> event. 
            </summary>
            <param name="objectRequiredEventArgs">A <see cref="T:ValidationFramework.Web.TargetObjectRequiredEventArgs"/> that contains the event data.</param>
            <returns>The target object to be validated.</returns>
        </member>
        <member name="M:ValidationFramework.Web.PropertyValidatorGenerator.GetInfoDescriptor(System.String)">
            <summary>
            Get the <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> for a specified member name.
            </summary>
            <param name="memberName">The member name to find get the <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> for.</param>
            <returns>The <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> for a specified member name.</returns>
        </member>
        <member name="P:ValidationFramework.Web.PropertyValidatorGenerator.TypeToValidate">
            <summary>
            Gets or sets the fully qualified name of the target <see cref="T:System.Type"/> to validate.
            </summary>
        </member>
        <member name="P:ValidationFramework.Web.PropertyValidatorGenerator.TargetObjectRequired">
            <summary>
            Occurs when the <see cref="T:ValidationFramework.Web.ParameterValidatorGenerator"/> requires a target object for validation. 
            </summary>
        </member>
        <member name="T:ValidationFramework.RequiredLongRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.RequiredRule`1"/>, that will check the existance of a <see cref="T:System.Int64"/>, should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.RequiredRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.RequiredRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\RequiredValidators\RequiredLongRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\RequiredValidators\RequiredLongRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.RequiredLongRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RequiredLongRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RequiredLongRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.RequiredLongRuleAttribute.InitialValue">
            <summary>
            Gets or sets the initial and invalid value.
            </summary>
            <seealso cref="P:ValidationFramework.RequiredRule`1.InitialValue"/>
        </member>
        <member name="T:ValidationFramework.RequiredDoubleRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.RequiredRule`1"/>, that will check the existance of a <see cref="T:System.Double"/>, should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.RequiredRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.RequiredRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\RequiredValidators\RequiredDoubleRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\RequiredValidators\RequiredDoubleRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.RequiredDoubleRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RequiredDoubleRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RequiredDoubleRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.RequiredDoubleRuleAttribute.InitialValue">
            <summary>
            Gets or sets the initial and invalid value.
            </summary>
            <seealso cref="P:ValidationFramework.RequiredRule`1.InitialValue"/>
        </member>
        <member name="T:ValidationFramework.RegexRule">
            <summary>
            Performs a Regular Expression validation.
            </summary>
            <remarks>If the value being validated is null the rule will evaluate to true.</remarks>
            <seealso cref="T:ValidationFramework.Configuration.RegexRuleConfigReader"/>
            <seealso cref="T:ValidationFramework.RegexRuleAttribute"/>
        </member>
        <member name="M:ValidationFramework.RegexRule.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.RegexRule"/> class.
            </summary>
            <remarks>
            The following are defaulted
            <list type="bullet">
            <item>
            <see cref="P:ValidationFramework.Rule.RuleSet"/> to null.
            </item>
            <item>
            <see cref="P:ValidationFramework.Rule.ErrorMessage"/> to the default error message.
            </item>
            <item>
            <see cref="P:ValidationFramework.RegexRule.RegexOptions"/> to the <see cref="F:System.Text.RegularExpressions.RegexOptions.None"/>.
            </item>
            </list>
            </remarks>
            <param name="validationExpression">The regular expression pattern to match.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="validationExpression"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="validationExpression"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.RegexRule.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.RegexRule"/> class.
            </summary>
            <remarks>
            The following are defaulted
            <list type="bullet">
            <item>
            <see cref="P:ValidationFramework.Rule.RuleSet"/> to null.
            </item>
            <item>
            Sets <see cref="P:ValidationFramework.RegexRule.RegexOptions"/> to the <see cref="F:System.Text.RegularExpressions.RegexOptions.None"/>.
            </item>
            </list>
            </remarks>
            <param name="validationExpression">The regular expression pattern to match.</param>
            <param name="errorMessage">The error message for this rule. Pass a null to use the the default value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="validationExpression"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="validationExpression"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorMessage"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.RegexRule.#ctor(System.String,System.String,System.Boolean,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.RegexRule"/> class.
            </summary>
            <param name="validationExpression">The regular expression pattern to match.</param>
            <param name="errorMessage">The error message for this rule. Pass a null to use the the default value.</param>
            <param name="regexOptions">A bitwise OR combination of <see cref="T:System.Text.RegularExpressions.RegexOptions"/> enumeration values.</param>
            <param name="ruleSet">A <see cref="T:System.String"/> used to group <see cref="T:ValidationFramework.Rule"/>s. Use a null to indicate no grouping.</param>
            <param name="useErrorMessageProvider"><c>true</c> to use <see cref="P:ValidationFramework.Configuration.ConfigurationService.ErrorMessageProvider"/> when determining the error message for this <see cref="T:ValidationFramework.Rule"/>; otherwise <c>false</c>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="validationExpression"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="validationExpression"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorMessage"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="regexOptions"/> is out of the accepted range.</exception>
        </member>
        <member name="M:ValidationFramework.RegexRule.CreateWebClientValidators">
            <summary>
            Get a <see cref="T:System.Web.UI.WebControls.BaseValidator"/> to perform the client side validation.
            </summary>
            <returns>The <see cref="T:System.Web.UI.WebControls.BaseValidator"/> to perform the client side validation.</returns>
        </member>
        <member name="M:ValidationFramework.RegexRule.Validate(System.Object,System.Object,System.Object)">
            <summary>
            Validate the member this <see cref="T:ValidationFramework.Rule"/> is applied to.
            </summary>
            <param name="targetObjectValue">The value of the object containing the member to validate.</param>
            <param name="targetMemberValue">The value of the member to validate.</param>
            <param name="context">An <see cref="T:System.Object"/> that contains data for the <see cref="T:ValidationFramework.Rule"/> to validate. The default is null.</param>
        </member>
        <member name="M:ValidationFramework.RegexRule.GetComputedErrorMessage(System.String,System.String)">
            <summary>
            Called after <see cref="P:ValidationFramework.Rule.InfoDescriptor"/> is set but only when <see cref="P:ValidationFramework.Rule.ErrorMessage"/> is null.
            </summary>
            <returns>The error message for the <see cref="T:ValidationFramework.Rule"/>.</returns>
            <param name="tokenizedMemberName">A user friendly representation of the member name.</param>
            <param name="descriptorType">
            If <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> is a <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> then <paramref name="descriptorType"/> will be 'property'.
            If <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> is a <see cref="T:ValidationFramework.Reflection.ParameterDescriptor"/> then <paramref name="descriptorType"/> will be 'parameter'.
            </param>
        </member>
        <member name="M:ValidationFramework.RegexRule.IsEquivalent(ValidationFramework.Rule)">
            <summary>
            Checks if the current <see cref="T:ValidationFramework.Rule"/> is equivalent to another <see cref="T:ValidationFramework.Rule"/>.
            </summary>
            <remarks>
            Called for each <see cref="T:ValidationFramework.Rule"/> in <see cref="T:ValidationFramework.Reflection.RuleCollection"/> when a new <see cref="T:ValidationFramework.Rule"/> is added. This method is only called when both the existing <see cref="T:ValidationFramework.Rule"/> and the <see cref="T:ValidationFramework.Rule"/> being are of the same <see cref="T:System.Type"/> and have the same <see cref="P:ValidationFramework.Rule.RuleSet"/>. So it is safe to directly cast <paramref name="rule"/> to the current type. All properties in <paramref name="rule"/> should be compared to the propeties of the current <see cref="T:ValidationFramework.Rule"/>.
            </remarks>
            <param name="rule">The <see cref="T:ValidationFramework.Rule"/> to check for equivalence.</param>
            <returns><see langword="true"/> if <paramref name="rule"/> is equivalent to the current <see cref="T:ValidationFramework.Rule"/>; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:ValidationFramework.RegexRule.ValidationExpression">
            <summary>
            Gets the regular expression pattern to match.  
            </summary>
        </member>
        <member name="P:ValidationFramework.RegexRule.RuleInterpretation">
            <summary>
            Gets a <see cref="T:System.String"/> that is a business interpretation of the <see cref="T:ValidationFramework.Rule"/>.
            </summary>
            <remarks>
            Used as a helper to document the API that <see cref="T:ValidationFramework.Rule"/>s area applied to.
            </remarks>
        </member>
        <member name="P:ValidationFramework.RegexRule.RegexOptions">
            <summary>
             Gets A bitwise OR combination of <see cref="T:System.Text.RegularExpressions.RegexOptions"/> enumeration values.
            </summary>
        </member>
        <member name="T:ValidationFramework.RangeLongRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.RangeRule`1"/>, that will check the range of a <see cref="T:System.Int64"/>, should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.RangeRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.RangeRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\RangeValidators\RangeLongRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\RangeValidators\RangeLongRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.RangeLongRuleAttribute.#ctor(System.Int64,System.Int64)">
            <summary>
            Initialises a new instance of the <see cref="T:ValidationFramework.RangeLongRuleAttribute"/> class.
            </summary>
            <param name="minimum">The minimum value.</param>
            <param name="maximum">The maximum value.</param>
        </member>
        <member name="M:ValidationFramework.RangeLongRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RangeLongRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RangeLongRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.RangeLongRuleAttribute.Minimum">
            <summary>
            Gets the minimum value.
            </summary>
            <seealso cref="P:ValidationFramework.RangeRule`1.Minimum"/>
        </member>
        <member name="P:ValidationFramework.RangeLongRuleAttribute.Maximum">
            <summary>
            Gets the maximum value.
            </summary>
            <seealso cref="P:ValidationFramework.RangeRule`1.Maximum"/>
        </member>
        <member name="T:ValidationFramework.CompareRule`1">
            <summary>
            Base class for all <see cref="T:ValidationFramework.Rule"/>s that performs comparison validation.
            </summary>
            <seealso cref="T:ValidationFramework.Configuration.CompareRuleConfigReader"/>
            <seealso cref="T:ValidationFramework.CompareByteRuleAttribute"/>
            <seealso cref="T:ValidationFramework.CompareDateTimeRuleAttribute"/>
            <seealso cref="T:ValidationFramework.CompareDecimalRuleAttribute"/>
            <seealso cref="T:ValidationFramework.CompareDoubleRuleAttribute"/>
            <seealso cref="T:ValidationFramework.CompareFloatRuleAttribute"/>
            <seealso cref="T:ValidationFramework.CompareIntRuleAttribute"/>
            <seealso cref="T:ValidationFramework.CompareLongRuleAttribute"/>
            <seealso cref="T:ValidationFramework.CompareShortRuleAttribute"/>
            <seealso cref="T:ValidationFramework.CompareStringRuleAttribute"/>
        </member>
        <member name="M:ValidationFramework.CompareRule`1.#ctor(`0,ValidationFramework.CompareOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.CompareRule`1"/> class.
            </summary>
            <remarks>
            The following are defaulted
            <list type="bullet">
            <item>
            <see cref="P:ValidationFramework.Rule.RuleSet"/> to null.
            </item>
            <item>
            <see cref="P:ValidationFramework.Rule.ErrorMessage"/> to the default error message.
            </item>
            </list>
            </remarks>
            <param name="operator">The comparison operation to perform.</param>
            <param name="valueToCompare">The value to compare with.</param> 
            <exception cref="T:System.ArgumentNullException"><paramref name="valueToCompare"/> is null.</exception>
        </member>
        <member name="M:ValidationFramework.CompareRule`1.#ctor(System.String,`0,ValidationFramework.CompareOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.CompareRule`1"/> class.
            </summary>
            <remarks>
            The following are defaulted
            <list type="bullet">
            <item>
            <see cref="P:ValidationFramework.Rule.RuleSet"/> to null.
            </item>
            </list>
            </remarks>
            <param name="operator">The comparison operation to perform.</param>
            <param name="errorMessage">The error message for this rule. Pass a null to use the the default value.</param>
            <param name="valueToCompare">The value to compare with.</param> 
            <exception cref="T:System.ArgumentException"><paramref name="errorMessage"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueToCompare"/> is null.</exception>
        </member>
        <member name="M:ValidationFramework.CompareRule`1.#ctor(System.String,System.String,System.Boolean,`0,ValidationFramework.CompareOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.CompareRule`1"/> class.
            </summary>
            <param name="compareOperator">The comparison operation to perform.</param>
            <param name="errorMessage">The error message for this rule. Pass a null to use the the default value.</param>
            <param name="valueToCompare">The value to compare with.</param> 
            <param name="ruleSet">A <see cref="T:System.String"/> used to group <see cref="T:ValidationFramework.Rule"/>s. Use a null to indicate no grouping.</param>
            <param name="useErrorMessageProvider"><c>true</c> to use <see cref="P:ValidationFramework.Configuration.ConfigurationService.ErrorMessageProvider"/> when determining the error message for this <see cref="T:ValidationFramework.Rule"/>; otherwise <c>false</c>.</param>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorMessage"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueToCompare"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="compareOperator"/> is out of the accepted range.</exception>
        </member>
        <member name="M:ValidationFramework.CompareRule`1.CreateWebClientValidators">
            <summary>
            Get a list of <see cref="T:System.Web.UI.WebControls.BaseValidator"/>s to perform the client side validation.
            </summary>
            <remarks>The <see cref="T:System.Web.UI.WebControls.BaseValidator"/>s returned should only perform client validation.</remarks>
            <returns>The<see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Web.UI.WebControls.BaseValidator"/>s to perform the client side validation.</returns>
        </member>
        <member name="M:ValidationFramework.CompareRule`1.GetComputedErrorMessage(System.String,System.String)">
            <summary>
            Called after <see cref="P:ValidationFramework.Rule.InfoDescriptor"/> is set but only when <see cref="P:ValidationFramework.Rule.ErrorMessage"/> is null.
            </summary>
            <returns>The error message for the <see cref="T:ValidationFramework.Rule"/>.</returns>
            <param name="tokenizedMemberName">A user friendly representation of the member name.</param>
            <param name="descriptorType">
            If <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> is a <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> then <paramref name="descriptorType"/> will be 'property'.
            If <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> is a <see cref="T:ValidationFramework.Reflection.ParameterDescriptor"/> then <paramref name="descriptorType"/> will be 'parameter'.
            </param>
        </member>
        <member name="M:ValidationFramework.CompareRule`1.Validate(System.Object,System.Object,System.Object)">
            <summary>
            Validate the member this <see cref="T:ValidationFramework.Rule"/> is applied to.
            </summary>
            <param name="targetObjectValue">The value of the object containing the member to validate.</param>
            <param name="targetMemberValue">The value of the member to validate.</param>
            <param name="context">An <see cref="T:System.Object"/> that contains data for the <see cref="T:ValidationFramework.Rule"/> to validate. The default is null.</param>
        </member>
        <member name="M:ValidationFramework.CompareRule`1.IsEquivalent(ValidationFramework.Rule)">
            <summary>
            Checks if the current <see cref="T:ValidationFramework.Rule"/> is equivalent to another <see cref="T:ValidationFramework.Rule"/>.
            </summary>
            <remarks>
            Called for each <see cref="T:ValidationFramework.Rule"/> in <see cref="T:ValidationFramework.Reflection.RuleCollection"/> when a new <see cref="T:ValidationFramework.Rule"/> is added. This method is only called when both the existing <see cref="T:ValidationFramework.Rule"/> and the <see cref="T:ValidationFramework.Rule"/> being are of the same <see cref="T:System.Type"/> and have the same <see cref="P:ValidationFramework.Rule.RuleSet"/>. So it is safe to directly cast <paramref name="rule"/> to the current type. All properties in <paramref name="rule"/> should be compared to the propeties of the current <see cref="T:ValidationFramework.Rule"/>.
            </remarks>
            <param name="rule">The <see cref="T:ValidationFramework.Rule"/> to check for equivalence.</param>
            <returns><see langword="true"/> if <paramref name="rule"/> is equivalent to the current <see cref="T:ValidationFramework.Rule"/>; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:ValidationFramework.CompareRule`1.CompareOperator">
            <summary>
            Gets the comparison operation to perform. 
            </summary>
        </member>
        <member name="P:ValidationFramework.CompareRule`1.RuleInterpretation">
            <summary>
            Gets a <see cref="T:System.String"/> that is a business interpretation of the <see cref="T:ValidationFramework.Rule"/>.
            </summary>
            <remarks>
            Used as a helper to document the API that <see cref="T:ValidationFramework.Rule"/>s area applied to.
            </remarks>
        </member>
        <member name="P:ValidationFramework.CompareRule`1.ValueToCompare">
            <summary>
            Gets the value to compare with.
            </summary>
        </member>
        <member name="T:ValidationFramework.RangeRule`1">
            <summary>
            Base class for performing a range validation.
            </summary>
            <seealso cref="T:ValidationFramework.Configuration.RangeRuleConfigReader"/>
            <seealso cref="T:ValidationFramework.RangeByteRuleAttribute"/>
            <seealso cref="T:ValidationFramework.RangeDateTimeRuleAttribute"/>
            <seealso cref="T:ValidationFramework.RangeDoubleRuleAttribute"/>
            <seealso cref="T:ValidationFramework.RangeFloatRuleAttribute"/>
            <seealso cref="T:ValidationFramework.RangeIntRuleAttribute"/>
            <seealso cref="T:ValidationFramework.RangeLongRuleAttribute"/>
            <seealso cref="T:ValidationFramework.RangeShortRuleAttribute"/>
        </member>
        <member name="M:ValidationFramework.RangeRule`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.RangeRule`1"/> class.
            </summary>
            <remarks>
            The following are defaulted
            <list type="bullet">
            <item>
            <see cref="P:ValidationFramework.Rule.RuleSet"/> to null.
            </item>
            <item>
            <see cref="P:ValidationFramework.Rule.ErrorMessage"/> to the default error message.
            </item>
            <item>
            <see cref="P:ValidationFramework.RangeRule`1.EqualsMaximumIsValid"/> to true.
            </item>
            <item> 
            <see cref="P:ValidationFramework.RangeRule`1.EqualsMinimumIsValid"/> to true.
            </item>
            </list>
            </remarks>
            <param name="minimum">The minimum valid value</param>
            <param name="maximum">The maximum valid value</param>
        </member>
        <member name="M:ValidationFramework.RangeRule`1.#ctor(System.String,`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.RangeRule`1"/> class.
            </summary>
            <remarks>
            The following are defaulted
            <list type="bullet">
            <item>
            <see cref="P:ValidationFramework.Rule.RuleSet"/> to null.
            </item>
            <item>
            <see cref="P:ValidationFramework.RangeRule`1.EqualsMaximumIsValid"/> to true.
            </item>
            <item>Sets 
            <see cref="P:ValidationFramework.RangeRule`1.EqualsMinimumIsValid"/> to true.
            </item>
            </list>
            </remarks>
            <param name="errorMessage">The error message for this rule. Pass a null to use the the default value.</param>
            <param name="minimum">The minimum valid value</param>
            <param name="maximum">The maximum valid value</param>
            <exception cref="T:System.ArgumentException"><paramref name="errorMessage"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.RangeRule`1.#ctor(System.String,System.String,System.Boolean,`0,`0,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.RangeRule`1"/> class.
            </summary>
            <param name="errorMessage">The error message for this rule. Pass a null to use the the default value.</param>
            <param name="minimum">The minimum valid value</param>
            <param name="maximum">The maximum valid value</param>
            <param name="equalsMinimumIsValid"><see langword="true"/> to indicate that the minimum value is valid; otherwise <see langworg="false"/>.</param>
            <param name="equalsMaximumIsValid"><see langword="true"/> to indicate that the maximum value is valid; otherwise <see langworg="false"/>.</param>
            <param name="useErrorMessageProvider"><c>true</c> to use <see cref="P:ValidationFramework.Configuration.ConfigurationService.ErrorMessageProvider"/> when determining the error message for this <see cref="T:ValidationFramework.Rule"/>; otherwise <c>false</c>.</param>
            <param name="ruleSet">A <see cref="T:System.String"/> used to group <see cref="T:ValidationFramework.Rule"/>s. Use a null to indicate no grouping.</param>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorMessage"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.RangeRule`1.CreateWebClientValidators">
            <summary>
            Get a list of <see cref="T:System.Web.UI.WebControls.BaseValidator"/>s to perform the client side validation.
            </summary>
            <remarks>The <see cref="T:System.Web.UI.WebControls.BaseValidator"/>s returned should only perform client validation.</remarks>
            <returns>The<see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Web.UI.WebControls.BaseValidator"/>s to perform the client side validation.</returns>
        </member>
        <member name="M:ValidationFramework.RangeRule`1.GetComputedErrorMessage(System.String,System.String)">
            <summary>
            Called after <see cref="P:ValidationFramework.Rule.InfoDescriptor"/> is set but only when <see cref="P:ValidationFramework.Rule.ErrorMessage"/> is null.
            </summary>
            <returns>The error message for the <see cref="T:ValidationFramework.Rule"/>.</returns>
            <param name="tokenizedMemberName">A user friendly representation of the member name.</param>
            <param name="descriptorType">
            If <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> is a <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> then <paramref name="descriptorType"/> will be 'property'.
            If <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> is a <see cref="T:ValidationFramework.Reflection.ParameterDescriptor"/> then <paramref name="descriptorType"/> will be 'parameter'.
            </param>
        </member>
        <member name="M:ValidationFramework.RangeRule`1.Validate(System.Object,System.Object,System.Object)">
            <summary>
            Validate the member this <see cref="T:ValidationFramework.Rule"/> is applied to.
            </summary>
            <param name="targetObjectValue">The value of the object containing the member to validate.</param>
            <param name="targetMemberValue">The value of the member to validate.</param>
            <param name="context">An <see cref="T:System.Object"/> that contains data for the <see cref="T:ValidationFramework.Rule"/> to validate. The default is null.</param>
        </member>
        <member name="M:ValidationFramework.RangeRule`1.IsEquivalent(ValidationFramework.Rule)">
            <summary>
            Checks if the current <see cref="T:ValidationFramework.Rule"/> is equivalent to another <see cref="T:ValidationFramework.Rule"/>.
            </summary>
            <remarks>
            Called for each <see cref="T:ValidationFramework.Rule"/> in <see cref="T:ValidationFramework.Reflection.RuleCollection"/> when a new <see cref="T:ValidationFramework.Rule"/> is added. This method is only called when both the existing <see cref="T:ValidationFramework.Rule"/> and the <see cref="T:ValidationFramework.Rule"/> being are of the same <see cref="T:System.Type"/> and have the same <see cref="P:ValidationFramework.Rule.RuleSet"/>. So it is safe to directly cast <paramref name="rule"/> to the current type. All properties in <paramref name="rule"/> should be compared to the propeties of the current <see cref="T:ValidationFramework.Rule"/>.
            </remarks>
            <param name="rule">The <see cref="T:ValidationFramework.Rule"/> to check for equivalence.</param>
            <returns><see langword="true"/> if <paramref name="rule"/> is equivalent to the current <see cref="T:ValidationFramework.Rule"/>; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:ValidationFramework.RangeRule`1.Minimum">
            <summary>
            Gets the minimum valid value
            </summary>
        </member>
        <member name="P:ValidationFramework.RangeRule`1.Maximum">
            <summary>
            Gets the maximum valid value
            </summary>
        </member>
        <member name="P:ValidationFramework.RangeRule`1.RuleInterpretation">
            <summary>
            Gets a <see cref="T:System.String"/> that is a business interpretation of the <see cref="T:ValidationFramework.Rule"/>.
            </summary>
            <remarks>
            Used as a helper to document the API that <see cref="T:ValidationFramework.Rule"/>s area applied to.
            </remarks>
        </member>
        <member name="P:ValidationFramework.RangeRule`1.EqualsMinimumIsValid">
            <summary>
            Get a value indicating if the minimum value is valid.
            </summary>
        </member>
        <member name="P:ValidationFramework.RangeRule`1.EqualsMaximumIsValid">
            <summary>
            Get a value indicating if the maximum value is valid.
            </summary>
        </member>
        <member name="T:ValidationFramework.Configuration.CustomRuleConfigReader">
            <summary>
            A <see cref="T:ValidationFramework.Configuration.IRuleConfigReader"/> that creates a <see cref="T:ValidationFramework.CustomRule"/> from a <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
            <remarks>
              <see cref="T:ValidationFramework.Configuration.RuleData"/> for default attributes.
              <b>Extra Attributes</b>
              <ul>
                <li>
                  <c>ruleInterpretation</c> (required): Used to populate <see cref="P:ValidationFramework.CustomRule.RuleInterpretation"/>.  
                </li>
                <li>
                  <c>validationMethod</c> (required): Used to populate <see cref="P:ValidationFramework.CustomRule.Handler"/>.   
                </li>
                <li>
                  <c>validationTypeName</c> (required): Used to populate <see cref="P:ValidationFramework.CustomRule.Handler"/>.   
                </li>
              </ul>
            </remarks>
            <example>
            <code lang="xml" title="This example shows an xml configuration for CustomRuleConfigReader">
            <rule ruleInterpretation="This is a custom rule" validationMethod="ValMethod" validationTypeName="MyNamespace.MyType,MyAssembly" errorMessage="hello" typeName="CustomRule"/>
            </code>
            </example>
            <example>
            The following example shows how to add a <see cref="T:ValidationFramework.CustomRule"/> using xml configuration. 
            <code source="Examples\ExampleLibraryCSharp\Configuration\CustomRuleConfigReaderSample.cs" lang="cs"/>
            </example>
            <seealso cref="T:ValidationFramework.CustomRule"/>
            <seealso cref="T:ValidationFramework.Configuration.ConfigurationService"/>
        </member>
        <member name="M:ValidationFramework.Configuration.CustomRuleConfigReader.ReadConfig(ValidationFramework.Configuration.RuleData,System.RuntimeTypeHandle)">
            <summary>
            Create a <see cref="T:ValidationFramework.Rule"/> from a <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
            <param name="ruleData">The <see cref="T:ValidationFramework.Configuration.RuleData"/> that represent the xml to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <param name="runtimeTypeHandle">The <see cref="T:System.RuntimeTypeHandle"/> for the <see cref="T:System.Type"/> to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <returns>A <see cref="T:ValidationFramework.Rule"/> that <paramref name="ruleData"/> represented</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ruleData"/> is null.</exception>
        </member>
        <member name="T:ValidationFramework.StringUtilities">
            <summary>
            String helper methods
            </summary>
        </member>
        <member name="M:ValidationFramework.StringUtilities.GetTokenizedValue(System.String)">
            <summary>
            Splits Pascal cased string name into a readable string.
            </summary>
            <param name="value">The string to split.</param>
            <returns>A modified <see cref="T:System.String"/> with spaces inserted in front of every, excluding the first, upper-cased character.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="T:ValidationFramework.Reflection.ParameterDescriptor">
            <summary>
            A light-weight wrapper for <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.Reflection.ParameterDescriptor.#ctor(System.RuntimeTypeHandle,System.String)">
            <summary>
            For testing purposes
            </summary>
            <exclude/>
        </member>
        <member name="M:ValidationFramework.Reflection.ParameterDescriptor.#ctor(ValidationFramework.Reflection.MethodDescriptor,System.Reflection.ParameterInfo)">
            <summary>
            Initialize a new instance of the <see cref="T:ValidationFramework.Reflection.ParameterDescriptor"/> class.
            </summary>
            <param name="methodDescriptor">The parent <see cref="T:ValidationFramework.Reflection.MethodDescriptor"/>.</param>
            <param name="parameterInfo">The <see cref="T:System.Reflection.ParameterInfo"/> to wrap.</param>
        </member>
        <member name="P:ValidationFramework.Reflection.ParameterDescriptor.Method">
            <summary>
            The parent <see cref="T:ValidationFramework.Reflection.MethodDescriptor"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.Reflection.ParameterDescriptor.Position">
            <summary>
            The position of the <see cref="T:ValidationFramework.Reflection.ParameterDescriptor"/> in the methods signature.
            </summary>
        </member>
        <member name="T:ValidationFramework.Reflection.ParameterCollection">
            <summary>
            A <see cref="T:ValidationFramework.AutoKeyDictionary`2"/> of <see cref="T:ValidationFramework.Reflection.ParameterDescriptor"/>s.
            </summary>
        </member>
        <member name="M:ValidationFramework.Reflection.ParameterCollection.#ctor(ValidationFramework.Reflection.MethodDescriptor)">
            <summary>
            Initialize a new instance of the <see cref="T:ValidationFramework.Reflection.ParameterCollection"/> class.
            </summary>
            <param name="methodDescriptor">The <see cref="T:ValidationFramework.Reflection.MethodDescriptor"/> for this <see cref="T:ValidationFramework.Reflection.ParameterCollection"/>.</param>
        </member>
        <member name="M:ValidationFramework.Reflection.ParameterCollection.GetKeyForItem(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Extracts the key from the <see cref="T:ValidationFramework.Reflection.ParameterDescriptor"/> element.
            </summary>
            <returns>The key for the specified element.</returns>
            <param name="item">The element from which to extract the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="P:ValidationFramework.Reflection.ParameterCollection.MethodDescriptor">
            <summary>
            Gets the <see cref="T:ValidationFramework.Reflection.MethodDescriptor"/> for this <see cref="T:ValidationFramework.Reflection.ParameterCollection"/>.
            </summary>
        </member>
        <member name="T:ValidationFramework.Configuration.MappingDocumentElement">
            <summary>
            A custom <see cref="T:System.Configuration.ConfigurationElement"/> to hold the urls of mapping documents.
            </summary>
        </member>
        <member name="P:ValidationFramework.Configuration.MappingDocumentElement.Url">
            <summary>
            Gets or sets the url for the <see cref="T:ValidationFramework.Configuration.MappingDocumentElement"/>.
            </summary>
        </member>
        <member name="T:ValidationFramework.Configuration.MessageGroup">
            <summary>
            An object representation of the how cultures map to an error message.
            </summary>
            <seealso cref="T:ValidationFramework.Configuration.KeyedCultureErrorMessageProvider"/>
            <exclude/>
        </member>
        <member name="P:ValidationFramework.Configuration.MessageGroup.Key">
            <summary>
            Gets or sets the key for this <see cref="T:ValidationFramework.Configuration.MessageGroup"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.Configuration.MessageGroup.CultureMessages">
            <summary>
            Gets or sets an array of <see cref="T:ValidationFramework.Configuration.CultureMessage"/>s for this <see cref="T:ValidationFramework.Configuration.MessageGroup"/>.
            </summary>
        </member>
        <member name="T:ValidationFramework.Configuration.CompareRuleConfigReader">
            <summary>
            A <see cref="T:ValidationFramework.Configuration.IRuleConfigReader"/> that creates a <see cref="T:ValidationFramework.CompareRule`1"/> from a <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
            <remarks>
              <see cref="T:ValidationFramework.Configuration.RuleData"/> for default attributes.
              <b>Extra Attributes</b>
              <ul>
                <li>
                  <c>valueToCompare</c> (required): Used to populate <see cref="P:ValidationFramework.CompareRule`1.ValueToCompare"/>.  Accepted formats for <see cref="T:System.DateTime"/> are "dd MMM yyyy HH:mm:ss.ff", "yyyy-MM-ddTHH:mm:ss", "dd MMM yyyy hh:mm tt", "dd MMM yyyy hh:mm:ss tt", "dd MMM yyyy HH:mm:ss", "dd MMM yyyy HH:mm" and "dd MMM yyyy" 
                </li>
                <li>
                  <c>compareOperator</c> (required): Used to populate <see cref="P:ValidationFramework.CompareRule`1.CompareOperator"/>.   
                </li>
              </ul>
            </remarks>
            <example>
            <code lang="xml" title="This example shows an xml configuration for CompareRuleConfigReader">
            <rule errorMessage="hello" typeName="CompareRule" valueToCompare="1" compareOperator="Equal"/>
            </code>
            </example>
            <seealso cref="T:ValidationFramework.CompareRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.ConfigurationService"/>
        </member>
        <member name="M:ValidationFramework.Configuration.CompareRuleConfigReader.ReadConfig(ValidationFramework.Configuration.RuleData,System.RuntimeTypeHandle)">
            <summary>
            Create a <see cref="T:ValidationFramework.Rule"/> from a <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
            <param name="ruleData">The <see cref="T:ValidationFramework.Configuration.RuleData"/> that represent the xml to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <param name="runtimeTypeHandle">The <see cref="T:System.RuntimeTypeHandle"/> for the <see cref="T:System.Type"/> to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <returns>A <see cref="T:ValidationFramework.Rule"/> that <paramref name="ruleData"/> represented</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ruleData"/> is null.</exception>
        </member>
        <member name="T:ValidationFramework.ValidatableBase">
            <summary>
            Base class that provides minimal validation logic.
            </summary>
            <example>
            <code source="Examples\ExampleLibraryCSharp\BusinessBaseClasses\ValidatableBaseSample.cs" title="The following code example shows how to inherit from ValidatableBase." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\BusinessBaseClasses\ValidatableBaseSample.vb" title="The following code example shows how to inherit from ValidatableBase." lang="vbnet"/>
            </example>
            <seealso cref="T:ValidationFramework.NotifyValidatableBase"/>
            <seealso cref="T:ValidationFramework.DataErrorInfoValidatableBase"/>
            <seealso cref="T:ValidationFramework.IValidatable"/>
        </member>
        <member name="T:ValidationFramework.IValidatable">
            <summary>
            Provides the means to check if the validity of the current state of an <see langword="object"/>.
            </summary>
            <seealso cref="T:ValidationFramework.NotifyValidatableBase"/>
            <seealso cref="T:ValidationFramework.DataErrorInfoValidatableBase"/>
            <seealso cref="T:ValidationFramework.ValidatableBase"/>
        </member>
        <member name="P:ValidationFramework.IValidatable.IsValid">
            <summary>
            Gets a <see lanword="bool"/> indicating if the current state is valid.
            </summary>
        </member>
        <member name="P:ValidationFramework.IValidatable.ErrorMessages">
            <summary>
            Gets a <see see="IList{T}"/> of <see langword="string"/>s that contain all the error messages.
            </summary>
        </member>
        <member name="M:ValidationFramework.ValidatableBase.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.ValidatableBase"/> class.
            </summary>
            <param name="validateOnConstruction">A <see langword="bool"/> indicating if the properties, of the instance being created, should be validated on construction.</param>
        </member>
        <member name="M:ValidationFramework.ValidatableBase.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.ValidatableBase"/> class.
            </summary>
            <param name="validateOnConstruction">A <see langword="bool"/> indicating if the properties, of the instance being created, should be validated on construction.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules.</param>
        </member>
        <member name="M:ValidationFramework.ValidatableBase.#ctor(System.Boolean,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.ValidatableBase"/> class.
            </summary>
            <param name="validateOnConstruction">A <see langword="bool"/> indicating if the properties, of the instance being created, should be validated on construction.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
        </member>
        <member name="M:ValidationFramework.ValidatableBase.#ctor(System.Boolean,System.String,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.ValidatableBase"/> class.
            </summary>
            <param name="validateOnConstruction">A <see langword="bool"/> indicating if the properties, of the instance being created, should be validated on construction.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <param name="ignoreNoRules">Set to <c>true</c> to ignore the fact that no <see cref="T:ValidationFramework.Rule"/>s exists on the current type.</param>
        </member>
        <member name="M:ValidationFramework.ValidatableBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.ValidatableBase"/> class.
            </summary>
            <remarks><see cref="P:ValidationFramework.ValidatableBase.ValidateOnConstruction"/> will default to <see langword="false"/>.</remarks>
        </member>
        <member name="P:ValidationFramework.ValidatableBase.Context">
            <summary>
            An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. The default is null.
            </summary>
        </member>
        <member name="P:ValidationFramework.ValidatableBase.RuleSet">
            <summary>
            Gets the the rule set to validate.
            </summary>
            <remarks>Will be a null to validate all <see cref="T:ValidationFramework.Rule"/>s.</remarks>
        </member>
        <member name="P:ValidationFramework.ValidatableBase.ValidatorResultsInError">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IList`1"/> containing all <see cref="T:ValidationFramework.ValidationResult"/> in error.
            </summary>
        </member>
        <member name="P:ValidationFramework.ValidatableBase.PropertyValidationManager">
            <summary>
            Gets the <see cref="T:ValidationFramework.PropertyValidationManager"/>.
            </summary>
            <remarks>
            This is exposed as 'public' for advanced usage scenarios. In general it should only be used by inherited classes.
            </remarks>
        </member>
        <member name="P:ValidationFramework.ValidatableBase.ValidateOnConstruction">
            <summary>
            Gets a <see langword="bool"/> indicating if the <see cref="T:ValidationFramework.ValidatableBase"/> has been validated on construction.
            </summary>
        </member>
        <member name="P:ValidationFramework.ValidatableBase.IgnoreNoRules">
            <summary>
            Gets a value indicating that, if no <see cref="T:ValidationFramework.Rule"/>s exists, it will be ignored.
            </summary>
        </member>
        <member name="P:ValidationFramework.ValidatableBase.IsValid">
            <summary>
            Gets a <see lanword="bool"/> indicating if the current state is valid.
            </summary>
            <remarks>
            Base behavior is to validate all properties and return boolean value.
            Sub-class can override this if, for example, they are validating on the fly.
            </remarks>
        </member>
        <member name="P:ValidationFramework.ValidatableBase.ErrorMessages">
            <summary>
            Gets a <see see="IList{T}"/> of <see langword="string"/>s that contain all the error messages.
            </summary>
        </member>
        <member name="T:ValidationFramework.CompareDecimalRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.CompareRule`1"/>, that will compare a <see cref="T:System.Decimal"/>, should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.CompareRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.CompareRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\CompareValidators\CompareDecimalRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\CompareValidators\CompareDecimalRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.CompareDecimalRuleAttribute.#ctor(System.Double,ValidationFramework.CompareOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.CompareDecimalRuleAttribute"/> class.
            </summary>
            <param name="operator">The comparison operation to perform.</param>
            <param name="valueToCompare">The value to compare with.</param>
        </member>
        <member name="M:ValidationFramework.CompareDecimalRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.CompareDecimalRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.CompareDecimalRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.CompareDecimalRuleAttribute.ValueToCompare">
            <summary>
            Gets the value to compare.
            </summary>
            <seealso cref="P:ValidationFramework.CompareRule`1.ValueToCompare"/>
        </member>
        <member name="T:ValidationFramework.Configuration.CultureMessage">
            <summary>
            An object representation of the error message for a culture.
            </summary>
            <seealso cref="T:ValidationFramework.Configuration.KeyedCultureErrorMessageProvider"/>
            <exclude/>
        </member>
        <member name="P:ValidationFramework.Configuration.CultureMessage.CultureId">
            <summary>
            Gets or sets the culture identifier for this <see cref="T:ValidationFramework.Configuration.CultureMessage"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.Configuration.CultureMessage.Text">
            <summary>
            Gets or sets the text for this <see cref="T:ValidationFramework.Configuration.CultureMessage"/>.
            </summary>
        </member>
        <member name="T:ValidationFramework.Configuration.ClassData">
            <summary>
            An object representation of the validation configuration for a class.
            </summary>
            <exclude/>
            <seealso cref="T:ValidationFramework.Configuration.ConfigurationService"/>
        </member>
        <member name="P:ValidationFramework.Configuration.ClassData.TypeName">
            <summary>
            Gets or sets the name of the <see cref="T:System.Type"/> that this <see cref="T:ValidationFramework.Configuration.ClassData"/> represents.
            </summary>
        </member>
        <member name="P:ValidationFramework.Configuration.ClassData.Properties">
            <summary>
            Gets or sets an array of <see cref="T:ValidationFramework.Configuration.PropertyData"/>s that represent the properties to be validate.
            </summary>
            <remarks>The <see cref="T:ValidationFramework.Configuration.PropertyData"/>s will be converted to <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/>s.</remarks>
        </member>
        <member name="P:ValidationFramework.Configuration.ClassData.Methods">
            <summary>
            Gets or sets an array of <see cref="T:ValidationFramework.Configuration.MethodData"/>s that represent the methods to be validate.
            </summary>
            <remarks>The <see cref="T:ValidationFramework.Configuration.MethodData"/>s will be converted to <see cref="T:ValidationFramework.Reflection.MethodDescriptor"/>s.</remarks>
        </member>
        <member name="T:ValidationFramework.RequiredDateTimeRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.RequiredRule`1"/>, that will check the existance of a <see cref="T:System.DateTime"/>, should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.RequiredRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.RequiredRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\RequiredValidators\RequiredDateTimeRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\RequiredValidators\RequiredDateTimeRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.RequiredDateTimeRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RequiredDateTimeRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RequiredDateTimeRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.RequiredDateTimeRuleAttribute.InitialValue">
            <summary>
            Gets or sets the initial and invalid value.
            </summary>
            <remarks>
            Accepted formats are "dd MMM yyyy HH:mm:ss.ff", "yyyy-MM-ddTHH:mm:ss", "dd MMM yyyy hh:mm tt", "dd MMM yyyy hh:mm:ss tt", "dd MMM yyyy HH:mm:ss", "dd MMM yyyy HH:mm" and "dd MMM yyyy"
            </remarks>
            <seealso cref="P:ValidationFramework.RequiredRule`1.InitialValue"/>
        </member>
        <member name="T:ValidationFramework.CustomValidationHandler">
            <summary>
            Represents the method that defines a custom validation. 
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:ValidationFramework.CustomValidationEventArgs"/> that contains the event data.</param>
            <seealso cref="T:ValidationFramework.CustomRule"/>
        </member>
        <member name="T:ValidationFramework.CustomRule">
            <summary>
            Performs a custom validation via an defined method.
            </summary>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\CustomRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\CustomRuleAttributeSample.vb" lang="vbnet"/>
            <code source="Examples\ExampleLibraryCSharp\Reflection\AddCustomRuleWithTypeCacheSample.cs" lang="cs" title="This example shows how to progromatically add a CustomRule to a property."/>
            <code source="Examples\ExampleLibraryVB\Reflection\AddCustomRuleWithTypeCacheSample.vb" lang="vbnet" title="This example shows how to progromatically add a CustomRule to a property."/>
            </example>
            <seealso cref="T:ValidationFramework.Configuration.CustomRuleConfigReader"/>
            <seealso cref="T:ValidationFramework.CustomRuleAttribute"/>
            <seealso cref="T:ValidationFramework.CustomValidationEventArgs"/>
        </member>
        <member name="M:ValidationFramework.CustomRule.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.CustomRule"/> class.
            </summary>
            <remarks>
            The following are defaulted
            <list type="bullet">
            <item>
            <see cref="P:ValidationFramework.Rule.RuleSet"/> to null.
            </item>
            <item>
            <see cref="P:ValidationFramework.Rule.ErrorMessage"/> to the default error message.
            </item>
            </list>
            </remarks>
            <param name="validationTypeName">The name of the type to get the validation method from.</param>
            <param name="validationMethod">The method on the current object to use for the validation.</param>
            <param name="ruleInterpretation">The business interpretation of the <see cref="T:ValidationFramework.CustomRuleAttribute"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="validationTypeName"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="validationTypeName"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="validationMethod"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="validationMethod"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="ruleInterpretation"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleInterpretation"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.CustomRule.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.CustomRule"/> class.
            </summary>
            <remarks>
            The following are defaulted
            <list type="bullet">
            <item>
            <see cref="P:ValidationFramework.Rule.RuleSet"/> to null.
            </item>
            </list>
            </remarks>
            <param name="errorMessage">The error message for this rule. Pass a null to use the the default value.</param>
            <param name="validationTypeName">The name of the type to get the validation method from.</param>
            <param name="validationMethod">The method on the current object to use for the validation.</param>
            <param name="ruleInterpretation">The business interpretation of the <see cref="T:ValidationFramework.CustomRuleAttribute"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="validationTypeName"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="validationTypeName"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="validationMethod"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="validationMethod"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="ruleInterpretation"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleInterpretation"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorMessage"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.CustomRule.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.CustomRule"/> class.
            </summary>
            <param name="errorMessage">The error message for this rule. Pass a null to use the the default value.</param>
            <param name="validationTypeName">The name of the type to get the validation method from.</param>
            <param name="useErrorMessageProvider"><c>true</c> to use <see cref="P:ValidationFramework.Configuration.ConfigurationService.ErrorMessageProvider"/> when determining the error message for this <see cref="T:ValidationFramework.Rule"/>; otherwise <c>false</c>.</param>
            <param name="validationMethod">The method on the current object to use for the validation.</param>
            <param name="ruleInterpretation">The business interpretation of the <see cref="T:ValidationFramework.CustomRuleAttribute"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="validationTypeName"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="validationMethod"/> could not be found on the <see cref="T:System.Type"/> <paramref name="validationTypeName"/>.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="T:System.Type"/> defined by <paramref name="validationTypeName"/> can not be loaded.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="validationTypeName"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="validationMethod"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="validationMethod"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="ruleInterpretation"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleInterpretation"/> is <see cref="F:System.String.Empty"/>.</exception>
            <param name="ruleSet">A <see cref="T:System.String"/> used to group <see cref="T:ValidationFramework.Rule"/>s. Use a null to indicate no grouping.</param>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorMessage"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.CustomRule.#ctor(System.String,System.String,System.Boolean,ValidationFramework.CustomValidationHandler,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.CustomRule"/> class.
            </summary>
            <param name="errorMessage">The error message for this rule. Pass a null to use the the default value.</param>
            <param name="eventHandler">The <see cref="T:ValidationFramework.CustomValidationHandler"/> that represents the method to validate this <see cref="T:ValidationFramework.CustomRule"/>.</param>
            <param name="ruleInterpretation">The business interpretation of the <see cref="T:ValidationFramework.CustomRuleAttribute"/>.</param>
            <param name="useErrorMessageProvider"><c>true</c> to use <see cref="P:ValidationFramework.Configuration.ConfigurationService.ErrorMessageProvider"/> when determining the error message for this <see cref="T:ValidationFramework.Rule"/>; otherwise <c>false</c>.</param>
            <param name="ruleSet">A <see cref="T:System.String"/> used to group <see cref="T:ValidationFramework.Rule"/>s. Use a null to indicate no grouping.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="ruleInterpretation"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleInterpretation"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorMessage"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.CustomRule.Validate(System.Object,System.Object,System.Object)">
            <summary>
            Validate the member this <see cref="T:ValidationFramework.Rule"/> is applied to.
            </summary>
            <param name="targetObjectValue">The value of the object containing the member to validate.</param>
            <param name="targetMemberValue">The value of the member to validate.</param>
            <param name="context">An <see cref="T:System.Object"/> that contains data for the <see cref="T:ValidationFramework.Rule"/> to validate. The default is null.</param>
        </member>
        <member name="M:ValidationFramework.CustomRule.GetComputedErrorMessage(System.String,System.String)">
            <summary>
            Called after <see cref="P:ValidationFramework.Rule.InfoDescriptor"/> is set but only when <see cref="P:ValidationFramework.Rule.ErrorMessage"/> is null.
            </summary>
            <returns>The error message for the <see cref="T:ValidationFramework.Rule"/>.</returns>
            <param name="tokenizedMemberName">A user friendly representation of the member name.</param>
            <param name="descriptorType">
            If <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> is a <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> then <paramref name="descriptorType"/> will be 'property'.
            If <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> is a <see cref="T:ValidationFramework.Reflection.ParameterDescriptor"/> then <paramref name="descriptorType"/> will be 'parameter'.
            </param>
        </member>
        <member name="M:ValidationFramework.CustomRule.IsEquivalent(ValidationFramework.Rule)">
            <summary>
            Checks if the current <see cref="T:ValidationFramework.Rule"/> is equivalent to another <see cref="T:ValidationFramework.Rule"/>.
            </summary>
            <remarks>
            Called for each <see cref="T:ValidationFramework.Rule"/> in <see cref="T:ValidationFramework.Reflection.RuleCollection"/> when a new <see cref="T:ValidationFramework.Rule"/> is added. This method is only called when both the existing <see cref="T:ValidationFramework.Rule"/> and the <see cref="T:ValidationFramework.Rule"/> being are of the same <see cref="T:System.Type"/> and have the same <see cref="P:ValidationFramework.Rule.RuleSet"/>. So it is safe to directly cast <paramref name="rule"/> to the current type. All properties in <paramref name="rule"/> should be compared to the propeties of the current <see cref="T:ValidationFramework.Rule"/>.
            </remarks>
            <param name="rule">The <see cref="T:ValidationFramework.Rule"/> to check for equivalence.</param>
            <returns><see langword="true"/> if <paramref name="rule"/> is equivalent to the current <see cref="T:ValidationFramework.Rule"/>; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:ValidationFramework.CustomRule.RuleInterpretation">
            <summary>
            Gets a <see cref="T:System.String"/> that is a business interpretation of the <see cref="T:ValidationFramework.Rule"/>.
            </summary>
            <remarks>
            Used as a helper to document the API that <see cref="T:ValidationFramework.Rule"/>s area applied to.
            </remarks>
        </member>
        <member name="P:ValidationFramework.CustomRule.Handler">
            <summary>
            Gets the <see cref="T:ValidationFramework.CustomValidationHandler"/> that represents the method to validate this <see cref="T:ValidationFramework.CustomRule"/>.
            </summary>
        </member>
        <member name="T:ValidationFramework.PropertyValidationManager">
            <summary>
            This is the primary class that will be utilized by the consumer when validating properties. This class responsible for exposing a simple public API to the consumer while handling the internals of invoking all <see cref="T:ValidationFramework.Rule"/>s properly.
            </summary>
            <seealso cref="T:ValidationFramework.NotifyValidatableBase"/>
            <seealso cref="T:ValidationFramework.DataErrorInfoValidatableBase"/>
            <seealso cref="T:ValidationFramework.ValidatableBase"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\PropertyValidationManager\CustomClassSample.cs" title="This example shows how to create your own custom class without using any of the base classes (e.g. ValidatableBase)." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\PropertyValidationManager\CustomClassSample.vb" title="This example shows how to create your own custom class without using any of the base classes (e.g. ValidatableBase)." lang="vbnet"/>
            <code source="Examples\ExampleLibraryCSharp\PropertyValidationManager\ExternalSample.cs" title="This example shows how to validate a class from external code." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\PropertyValidationManager\ExternalSample.vb" title="This example shows how to validate a class from external code." lang="vbnet"/>
            <code source="Examples\ExampleLibraryCSharp\PropertyValidationManager\ExternalExplicitSample.cs" title="This example shows how to validate a class that implements an interface explicitly." lang="cs"/>
            </example>
        </member>
        <member name="M:ValidationFramework.MemberValidationManager.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.MemberValidationManager"/> class.
            </summary>
            <remarks>Use this constructor if an instance of an object is being validated. If there is no instance, i.e. it is a static class or only static properties are being validated, use <see cref="M:ValidationFramework.PropertyValidationManager.#ctor(System.RuntimeTypeHandle)"/>.</remarks>
            <param name="target">An instance of the object to be validated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null.</exception>
        </member>
        <member name="M:ValidationFramework.MemberValidationManager.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.MemberValidationManager"/> class.
            </summary>
            <remarks>Use this constructor if an instance of an object is being validated. If there is no instance, i.e. it is a static class or only static properties are being validated, use <see cref="M:ValidationFramework.PropertyValidationManager.#ctor(System.RuntimeTypeHandle)"/>.</remarks>
            <param name="target">An instance of the object to be validated.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.MemberValidationManager.#ctor(System.Object,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.MemberValidationManager"/> class.
            </summary>
            <remarks>Use this constructor if an instance of an object is being validated. If there is no instance, i.e. it is a static class or only static properties are being validated, use <see cref="M:ValidationFramework.PropertyValidationManager.#ctor(System.RuntimeTypeHandle)"/>.</remarks>
            <param name="target">An instance of the object to be validated.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.MemberValidationManager.#ctor(System.RuntimeTypeHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.MemberValidationManager"/> class.
            </summary>
            <param name="targetHandle">A <see cref="T:System.RuntimeTypeHandle"/> representing the static <see cref="T:System.Type"/> to validate.</param>
            <remarks>Use this constructor if there is no instance, i.e. it is a static class or only static properties are being validated. If an instance of an object needs to be validated use <see cref="M:ValidationFramework.PropertyValidationManager.#ctor(System.Object)"/>.</remarks>
        </member>
        <member name="M:ValidationFramework.MemberValidationManager.#ctor(System.RuntimeTypeHandle,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.MemberValidationManager"/> class.
            </summary>
            <param name="targetHandle">A <see cref="T:System.RuntimeTypeHandle"/> representing the static <see cref="T:System.Type"/> to validate.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <remarks>Use this constructor if there is no instance, i.e. it is a static class or only static properties are being validated. If an instance of an object needs to be validated use <see cref="M:ValidationFramework.PropertyValidationManager.#ctor(System.Object)"/>.</remarks>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.MemberValidationManager.#ctor(System.RuntimeTypeHandle,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.MemberValidationManager"/> class.
            </summary>
            <param name="targetHandle">A <see cref="T:System.RuntimeTypeHandle"/> representing the static <see cref="T:System.Type"/> to validate.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <remarks>Use this constructor if there is no instance, i.e. it is a static class or only static properties are being validated. If an instance of an object needs to be validated use <see cref="M:ValidationFramework.PropertyValidationManager.#ctor(System.Object)"/>.</remarks>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="P:ValidationFramework.MemberValidationManager.IsValid">
            <summary>
            Gets a value indicating if all properties are valid.
            </summary>
            <remarks>Calling this property does not perform a validation it only checks the current state. To perform a full validation call <see cref="!:ValidateAllProperties()"/> or, to validate an individual property, call <see cref="!:ValidateProperty(string)"/>.</remarks>
        </member>
        <member name="P:ValidationFramework.MemberValidationManager.TypeDescriptor">
            <summary>
            Gets the <see cref="T:ValidationFramework.Reflection.TypeDescriptor"/> for the <see cref="T:System.Type"/> that this <see cref="T:ValidationFramework.PropertyValidationManager"/> is validating.
            </summary>
        </member>
        <member name="P:ValidationFramework.MemberValidationManager.Target">
            <summary>
            Gets the instance of the object that this <see cref="T:ValidationFramework.PropertyValidationManager"/> is handling.
            </summary>
            <remarks>Will return a null if validating a static type.</remarks>
        </member>
        <member name="P:ValidationFramework.MemberValidationManager.ValidatorResultsInError">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IList`1"/> containing all <see cref="T:ValidationFramework.ValidationResult"/> in error.
            </summary>
            <remarks>This is a copy of the actual list of <see cref="T:ValidationFramework.ValidationResult"/>s.</remarks>
        </member>
        <member name="P:ValidationFramework.MemberValidationManager.IsValidatingStatic">
            <summary>
            Gets a value indicating if the <see cref="T:ValidationFramework.PropertyValidationManager"/> is being used to validate a static type.
            </summary>
        </member>
        <member name="P:ValidationFramework.MemberValidationManager.TargetHandle">
            <summary>
            Gets the <see cref="T:System.RuntimeTypeHandle"/> for the <see cref="T:System.Type"/> being validated.
            </summary>
        </member>
        <member name="P:ValidationFramework.MemberValidationManager.RuleSet">
            <summary>
            Gets the the rule set to validate.
            </summary>
            <remarks>
            Will be a null to validate all <see cref="T:ValidationFramework.Rule"/>s.<br/>
            Case insensitive so this will always return a upper case string no matter what is passed into the constructor.
            </remarks>
        </member>
        <member name="P:ValidationFramework.MemberValidationManager.Context">
            <summary>
            An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. The default is null.
            </summary>
        </member>
        <member name="M:ValidationFramework.PropertyValidationManager.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.PropertyValidationManager"/> class.
            </summary>
            <remarks>Use this constructor if an instance of an object is being validated. If there is no instance, i.e. it is a static class or only static properties are being validated, use <see cref="M:ValidationFramework.PropertyValidationManager.#ctor(System.RuntimeTypeHandle)"/>.</remarks>
            <param name="target">An instance of the object to be validated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null.</exception>
        </member>
        <member name="M:ValidationFramework.PropertyValidationManager.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.PropertyValidationManager"/> class.
            </summary>
            <remarks>Use this constructor if an instance of an object is being validated. If there is no instance, i.e. it is a static class or only static properties are being validated, use <see cref="M:ValidationFramework.PropertyValidationManager.#ctor(System.RuntimeTypeHandle)"/>.</remarks>
            <param name="target">An instance of the object to be validated.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.PropertyValidationManager.#ctor(System.Object,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.PropertyValidationManager"/> class.
            </summary>
            <remarks>Use this constructor if an instance of an object is being validated. If there is no instance, i.e. it is a static class or only static properties are being validated, use <see cref="M:ValidationFramework.PropertyValidationManager.#ctor(System.RuntimeTypeHandle)"/>.</remarks>
            <param name="target">An instance of the object to be validated.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.PropertyValidationManager.#ctor(System.RuntimeTypeHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.PropertyValidationManager"/> class.
            </summary>
            <param name="targetHandle">A <see cref="T:System.RuntimeTypeHandle"/> representing the static <see cref="T:System.Type"/> to validate.</param>
            <remarks>Use this constructor if there is no instance, i.e. it is a static class or only static properties are being validated. If an instance of an object needs to be validated use <see cref="M:ValidationFramework.PropertyValidationManager.#ctor(System.Object)"/>.</remarks>
        </member>
        <member name="M:ValidationFramework.PropertyValidationManager.#ctor(System.RuntimeTypeHandle,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.PropertyValidationManager"/> class.
            </summary>
            <param name="targetHandle">A <see cref="T:System.RuntimeTypeHandle"/> representing the static <see cref="T:System.Type"/> to validate.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <remarks>Use this constructor if there is no instance, i.e. it is a static class or only static properties are being validated. If an instance of an object needs to be validated use <see cref="M:ValidationFramework.PropertyValidationManager.#ctor(System.Object)"/>.</remarks>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.PropertyValidationManager.#ctor(System.RuntimeTypeHandle,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.PropertyValidationManager"/> class.
            </summary>
            <param name="targetHandle">A <see cref="T:System.RuntimeTypeHandle"/> representing the static <see cref="T:System.Type"/> to validate.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <remarks>Use this constructor if there is no instance, i.e. it is a static class or only static properties are being validated. If an instance of an object needs to be validated use <see cref="M:ValidationFramework.PropertyValidationManager.#ctor(System.Object)"/>.</remarks>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.PropertyValidationManager.ValidateAllProperties">
            <summary>
            Validates all properties.
            </summary>
            <exception cref="T:System.InvalidOperationException">No <see cref="T:ValidationFramework.Rule"/>s can be found.</exception>
        </member>
        <member name="M:ValidationFramework.PropertyValidationManager.ValidateProperty(System.String)">
            <summary>
            Validates the specified property.
            </summary>
            <param name="propertyName">Property to validate. Case sensitive.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">No <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> could be found named <paramref name="propertyName"/>.</exception>
            <exception cref="T:System.ArgumentException">No <see cref="T:ValidationFramework.Rule"/>s could be found on the <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/>,for <paramref name="propertyName"/>, that have the <see cref="P:ValidationFramework.Rule.RuleSet"/> equal to <see cref="P:ValidationFramework.MemberValidationManager.RuleSet"/>.</exception>
        </member>
        <member name="M:ValidationFramework.PropertyValidationManager.TryValidateAllProperties">
            <summary>
            Validates all properties.
            </summary>
        </member>
        <member name="M:ValidationFramework.PropertyValidationManager.TryValidateProperty(System.String)">
            <summary>
            Validates only the specified property. 
            </summary>
            <remarks>No exception is thrown if the property is not found.</remarks>
            <param name="propertyName">Property to validate. Case sensitive.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.PropertyValidationManager.GetResultsInErrorForProperties(System.String[])">
            <summary>
            Get a <see cref="T:System.Collections.Generic.IList`1"/> of all <see cref="T:ValidationFramework.ValidationResult"/>s for a list of properties.
            </summary>
            <remarks>Use <see cref="T:ValidationFramework.ResultFormatter"/> for some basic formatting conversions of <see cref="T:ValidationFramework.ValidationResult"/>s.</remarks>
            <param name="propertyNames">The names of the properties to retrieve error messages for. Case sensitive.</param>
            <returns>All <see cref="T:ValidationFramework.ValidationResult"/>s for the list of properties.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyNames"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Length of <paramref name="propertyNames"/> is 0.</exception>
            <exception cref="T:System.ArgumentException">No <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> could be found any single property <paramref name="propertyNames"/>.</exception>
        </member>
        <member name="M:ValidationFramework.PropertyValidationManager.GetResultsInErrorForProperty(System.String)">
            <summary>
            Get a <see cref="T:System.Collections.Generic.IList`1"/> of all <see cref="T:ValidationFramework.ValidationResult"/>s for a given property.
            </summary>
            <remarks>Use <see cref="T:ValidationFramework.ResultFormatter"/> for some basic formatting conversions of <see cref="T:ValidationFramework.ValidationResult"/>s.</remarks>
            <param name="propertyName">Property to retrieve error message for. Case sensitive.</param>
            <returns>All <see cref="T:ValidationFramework.ValidationResult"/>s for a given property.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">No <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> could be found named <paramref name="propertyName"/>.</exception>
        </member>
        <member name="M:ValidationFramework.PropertyValidationManager.TryGetResultsInErrorForProperty(System.String,System.Collections.Generic.IList{ValidationFramework.ValidationResult}@)">
            <summary>
            Get a <see cref="T:System.Collections.Generic.IList`1"/> of all <see cref="T:ValidationFramework.ValidationResult"/>s for a given property. No exception is thrown if the property is not found.
            </summary>
            <remarks>Use <see cref="T:ValidationFramework.ResultFormatter"/> for some basic formatting conversions of <see cref="T:ValidationFramework.ValidationResult"/>s.</remarks>
            <param name="propertyName">Property to retrieve error message for. Case sensitive.</param>
            <param name="validationResults">When this method returns, if the property exists and contains <see cref="T:ValidationFramework.Rule"/>s, contains a <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:ValidationFramework.ValidationResult"/> for the property being validated; otherwise null.</param>
            <return><see langword="true"/> if the property exists and has <see cref="T:ValidationFramework.Rule"/>s; otherwise <see langword="false"/>.</return>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.PropertyValidationManager.TryThrowPropertyException(System.Object,System.Object,System.String,System.String,System.Object)">
            <summary>
            Performs validation when a property is being set.
            </summary>
            <remarks>
            <para>Should be called before the field (representing this property) is set.</para>
            <para>This should be used if you are not certain if the property will have <see cref="T:ValidationFramework.Rule"/>s applied to it. 
            This is usually the case if you are using code to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using attributes it may be more appropriate to call <see cref="M:ValidationFramework.PropertyValidationManager.ThrowPropertyException(System.Object,System.Object,System.String,System.String,System.Object)"/></para> 
            </remarks>
            <param name="target">An instance of the object to be validated.</param>
            <param name="propertyName">Property to validate. Case sensitive.</param>
            <param name="propertyValue">The value of the property being validated.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.PropertyValidationManager.ThrowPropertyException(System.Object,System.Object,System.String,System.String,System.Object)">
            <summary>
            Performs validation when a property is being set.
            </summary>
            <remarks>
            <para>Should be called before the field (representing this property) is set.</para> 
            <para>This should be used if you expect the property to have <see cref="T:ValidationFramework.Rule"/>s applied to it. 
            This is usually the case if you are using attributes to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using code it may be more appropriate to call <see cref="M:ValidationFramework.PropertyValidationManager.TryThrowPropertyException(System.Object,System.Object,System.String,System.String,System.Object)"/></para> 
            </remarks>
            <param name="target">An instance of the object to be validated.</param>
            <param name="propertyName">Property to validate. Case sensitive.</param>
            <param name="propertyValue">The value of the property being validated.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">No <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> could be found named <paramref name="propertyName"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.PropertyValidationManager.TryThrowPropertyException(System.RuntimeTypeHandle,System.Object,System.String,System.String,System.Object)">
            <summary>
            Performs validation when a property is being set.
            </summary>
            <remarks>
            <para>Should be called before the field (representing this property) is set.</para>
            <para>This should be used if you are not certain if property will have <see cref="T:ValidationFramework.Rule"/>s applied to it. 
            This is usually the case if you are using code to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using attributes it may be more appropriate to call <see cref="M:ValidationFramework.PropertyValidationManager.ThrowPropertyException(System.RuntimeTypeHandle,System.Object,System.String,System.String,System.Object)"/></para> 
            </remarks>
            <param name="targetHandle">A <see cref="T:System.RuntimeTypeHandle"/> representing the static <see cref="T:System.Type"/> to validate.</param>
            <param name="propertyName">Property to validate. Case sensitive.</param>
            <param name="propertyValue">The value of the property being validated.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">No <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> could be found named <paramref name="propertyName"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.PropertyValidationManager.ThrowPropertyException(System.RuntimeTypeHandle,System.Object,System.String,System.String,System.Object)">
            <summary>
            Performs validation when a property is being set.
            </summary>
            <remarks>
            <para>Should be called before the field (representing this property) is set.</para>
            <para>This should be used if you expect the property to have <see cref="T:ValidationFramework.Rule"/>s applied to it. 
             This is usually the case if you are using attributes to apply <see cref="T:ValidationFramework.Rule"/>s.
             If <see cref="T:ValidationFramework.Rule"/>s are being assigned using code it may be more appropriate to call <see cref="M:ValidationFramework.PropertyValidationManager.TryThrowPropertyException(System.RuntimeTypeHandle,System.Object,System.String,System.String,System.Object)"/></para> 
            </remarks>
            <param name="targetHandle">A <see cref="T:System.RuntimeTypeHandle"/> representing the static <see cref="T:System.Type"/> to validate.</param>
            <param name="propertyName">Property to validate. Case sensitive.</param>
            <param name="propertyValue">The value of the property being validated.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">No <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> could be found named <paramref name="propertyName"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.PropertyValidationManager.TryValidateProperty(System.Object,System.String,System.String,System.Object)">
            <summary>
            Performs validation for a specific property.
            </summary>
            <remarks>
            <para>This should be used if you can not be certain of the property will have <see cref="T:ValidationFramework.Rule"/>s applied to it. 
             This is usually the case if you are using code to apply <see cref="T:ValidationFramework.Rule"/>s.
             If <see cref="T:ValidationFramework.Rule"/>s are being assigned using attributes it may be more appropriate to call <see cref="M:ValidationFramework.PropertyValidationManager.ValidateProperty(System.Object,System.String,System.String,System.Object)"/></para> 
            </remarks>
            <param name="target">An instance of the object to be validated.</param>
            <param name="propertyName">Property to validate. Case sensitive.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">No <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> could be found named <paramref name="propertyName"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <returns>All <see cref="T:ValidationFramework.ValidationResult"/>s for a given property.</returns>
        </member>
        <member name="M:ValidationFramework.PropertyValidationManager.TryValidateProperty(System.RuntimeTypeHandle,System.String,System.String,System.Object)">
            <summary>
            Performs validation for a specific property.
            </summary>
            <remarks>
            <para>This should be used if you are not certain if property will have <see cref="T:ValidationFramework.Rule"/>s applied to it. 
            This is usually the case if you are using code to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using attributes it may be more appropriate to call <see cref="M:ValidationFramework.PropertyValidationManager.ValidateProperty(System.RuntimeTypeHandle,System.String,System.String,System.Object)"/></para> 
            </remarks>
            <param name="targetHandle">A <see cref="T:System.RuntimeTypeHandle"/> representing the static <see cref="T:System.Type"/> to validate.</param>
            <param name="propertyName">Property to validate. Case sensitive.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">No <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> could be found named <paramref name="propertyName"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <returns>All <see cref="T:ValidationFramework.ValidationResult"/>s for a given property.</returns>
        </member>
        <member name="M:ValidationFramework.PropertyValidationManager.TryValidateAllProperties(System.Object,System.String,System.Object)">
            <summary>
            Performs validation for a specific property.
            </summary>
            <remarks>
            <para>This should be used if you are not certain if property will have <see cref="T:ValidationFramework.Rule"/>s applied to it. 
            This is usually the case if you are using code to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using attributes it may be more appropriate to call <see cref="M:ValidationFramework.PropertyValidationManager.ValidateAllProperties(System.Object,System.String,System.Object)"/></para> 
            </remarks>
            <param name="target">An instance of the object to be validated.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">No <see cref="T:ValidationFramework.Rule"/>s could be found on the <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/>, that have the <see cref="P:ValidationFramework.Rule.RuleSet"/> equal to <paramref name="ruleSet"/>.</exception>
            <returns>All <see cref="T:ValidationFramework.ValidationResult"/>s for a given property.</returns>
        </member>
        <member name="M:ValidationFramework.PropertyValidationManager.TryValidateAllProperties(System.RuntimeTypeHandle,System.String,System.Object)">
            <summary>
            Performs validation for a specific property.
            </summary>
            <remarks>
            <para>This should be used if you are not certain if property will have <see cref="T:ValidationFramework.Rule"/>s applied to it. 
            This is usually the case if you are using code to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using attributes it may be more appropriate to call <see cref="M:ValidationFramework.PropertyValidationManager.ValidateAllProperties(System.RuntimeTypeHandle,System.String,System.Object)"/></para> 
            </remarks>
            <param name="targetHandle">A <see cref="T:System.RuntimeTypeHandle"/> representing the static <see cref="T:System.Type"/> to validate.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <returns>All <see cref="T:ValidationFramework.ValidationResult"/>s for a given property.</returns>
        </member>
        <member name="M:ValidationFramework.PropertyValidationManager.ValidateAllProperties(System.Object,System.String,System.Object)">
            <summary>
            Performs validation for an object.
            </summary>
            <remarks>
            <para>This should be used if you are certain all properties will have <see cref="T:ValidationFramework.Rule"/>s applied. 
            This is usually the case if you are using attributes to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using code it may be more appropriate to call <see cref="M:ValidationFramework.PropertyValidationManager.TryValidateAllProperties(System.Object,System.String,System.Object)"/></para> 
            </remarks>
            <param name="target">An instance of the object to be validated.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <returns>All <see cref="T:ValidationFramework.ValidationResult"/>s for a given property.</returns>
        </member>
        <member name="M:ValidationFramework.PropertyValidationManager.ValidateProperty(System.RuntimeTypeHandle,System.String,System.String,System.Object)">
            <summary>
            Performs validation for a specific property.
            </summary>
            <remarks>
            <para>This should be used if you are certain all properties will have <see cref="T:ValidationFramework.Rule"/>s applied.
             This is usually the case if you are using attributes to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using code it may be more appropriate to call <see cref="M:ValidationFramework.PropertyValidationManager.TryValidateAllProperties(System.RuntimeTypeHandle,System.String,System.Object)"/></para> 
            </remarks>
            <param name="targetHandle">A <see cref="T:System.RuntimeTypeHandle"/> representing the static <see cref="T:System.Type"/> to validate.</param>
            <param name="propertyName">Property to validate. Case sensitive.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">No <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> could be found named <paramref name="propertyName"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">No <see cref="T:ValidationFramework.Rule"/>s could be found on the <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/>,for <paramref name="propertyName"/>, that have the <see cref="P:ValidationFramework.Rule.RuleSet"/> equal to <see cref="P:ValidationFramework.MemberValidationManager.RuleSet"/>.</exception>
            <returns>All <see cref="T:ValidationFramework.ValidationResult"/>s for a given property.</returns>
        </member>
        <member name="M:ValidationFramework.PropertyValidationManager.ValidateAllProperties(System.RuntimeTypeHandle,System.String,System.Object)">
            <summary>
            Performs validation for a specific property.
            </summary>
            <remarks>
            <para>This should be used if you are not certain if properties will have <see cref="T:ValidationFramework.Rule"/>s applied.
            This is usually the case if you are using attributes to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using code it may be more appropriate to call <see cref="M:ValidationFramework.PropertyValidationManager.TryValidateAllProperties(System.RuntimeTypeHandle,System.String,System.Object)"/></para> 
            </remarks>
            <param name="targetHandle">A <see cref="T:System.RuntimeTypeHandle"/> representing the static <see cref="T:System.Type"/> to validate.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">No <see cref="T:ValidationFramework.Rule"/>s could be found on the <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/>, that have the <see cref="P:ValidationFramework.Rule.RuleSet"/> equal to <paramref name="ruleSet"/>.</exception>
            <returns>All <see cref="T:ValidationFramework.ValidationResult"/>s for a given property.</returns>
        </member>
        <member name="M:ValidationFramework.PropertyValidationManager.ValidateProperty(System.Object,System.String,System.String,System.Object)">
            <summary>
            Performs validation for a specific property.
            </summary>
            <remarks>
            <para>This should be used if you are not certain the property will have <see cref="T:ValidationFramework.Rule"/>s applied. 
            This is usually the case if you are using attributes to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using code it may be more appropriate to call <see cref="M:ValidationFramework.PropertyValidationManager.TryValidateProperty(System.Object,System.String,System.String,System.Object)"/></para> 
            </remarks>
            <param name="target">An instance of the object to be validated.</param>
            <param name="propertyName">Property to validate. Case sensitive.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">No <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> could be found named <paramref name="propertyName"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">No <see cref="T:ValidationFramework.Rule"/>s could be found on the <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/>,for <paramref name="propertyName"/>, that have the <see cref="P:ValidationFramework.Rule.RuleSet"/> equal to <see cref="P:ValidationFramework.MemberValidationManager.RuleSet"/>.</exception>
            <returns>All <see cref="T:ValidationFramework.ValidationResult"/>s for a given property.</returns>
        </member>
        <member name="T:ValidationFramework.FieldValidationManager">
            <summary>
            This is the primary class that will be utilized by the consumer when validating properties. This class responsible for exposing a simple public API to the consumer while handling the internals of invoking all <see cref="T:ValidationFramework.Rule"/>s properly.
            </summary>
            <seealso cref="T:ValidationFramework.NotifyValidatableBase"/>
            <seealso cref="T:ValidationFramework.DataErrorInfoValidatableBase"/>
            <seealso cref="T:ValidationFramework.ValidatableBase"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\FieldValidationManager\CustomClassSample.cs" title="This example shows how to create your own custom class without using any of the base classes (e.g. ValidatableBase)." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\FieldValidationManager\CustomClassSample.vb" title="This example shows how to create your own custom class without using any of the base classes (e.g. ValidatableBase)." lang="vbnet"/>
            <code source="Examples\ExampleLibraryCSharp\FieldValidationManager\ExternalSample.cs" title="This example shows how to validate a class from external code." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\FieldValidationManager\ExternalSample.vb" title="This example shows how to validate a class from external code." lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.FieldValidationManager.TryThrowFieldException(System.Object,System.Object,System.String,System.String,System.Object)">
            <summary>
            Performs validation when a field is being set.
            </summary>
            <remarks>
            <para>Should be called before the field (representing this field) is set.</para>
            <para>This should be used if you are not certain if the field will have <see cref="T:ValidationFramework.Rule"/>s applied to it. 
            This is usually the case if you are using code to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using attributes it may be more appropriate to call <see cref="M:ValidationFramework.FieldValidationManager.ThrowFieldException(System.Object,System.Object,System.String,System.String,System.Object)"/></para> 
            </remarks>
            <param name="target">An instance of the object to be validated.</param>
            <param name="fieldName">Field to validate. Case sensitive.</param>
            <param name="fieldValue">The value of the field being validated.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.FieldValidationManager.ThrowFieldException(System.Object,System.Object,System.String,System.String,System.Object)">
            <summary>
            Performs validation when a field is being set.
            </summary>
            <remarks>
            <para>Should be called before the field (representing this field) is set.</para> 
            <para>This should be used if you expect the field to have <see cref="T:ValidationFramework.Rule"/>s applied to it. 
            This is usually the case if you are using attributes to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using code it may be more appropriate to call <see cref="M:ValidationFramework.FieldValidationManager.TryThrowFieldException(System.Object,System.Object,System.String,System.String,System.Object)"/></para> 
            </remarks>
            <param name="target">An instance of the object to be validated.</param>
            <param name="fieldName">Field to validate. Case sensitive.</param>
            <param name="fieldValue">The value of the field being validated.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">No <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/> could be found named <paramref name="fieldName"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.FieldValidationManager.TryThrowFieldException(System.RuntimeTypeHandle,System.Object,System.String,System.String,System.Object)">
            <summary>
            Performs validation when a field is being set.
            </summary>
            <remarks>
            <para>Should be called before the field (representing this field) is set.</para>
            <para>This should be used if you are not certain if field will have <see cref="T:ValidationFramework.Rule"/>s applied to it. 
            This is usually the case if you are using code to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using attributes it may be more appropriate to call <see cref="M:ValidationFramework.FieldValidationManager.ThrowFieldException(System.RuntimeTypeHandle,System.Object,System.String,System.String,System.Object)"/></para> 
            </remarks>
            <param name="targetHandle">A <see cref="T:System.RuntimeTypeHandle"/> representing the static <see cref="T:System.Type"/> to validate.</param>
            <param name="fieldName">Field to validate. Case sensitive.</param>
            <param name="fieldValue">The value of the field being validated.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">No <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/> could be found named <paramref name="fieldName"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.FieldValidationManager.ThrowFieldException(System.RuntimeTypeHandle,System.Object,System.String,System.String,System.Object)">
            <summary>
            Performs validation when a field is being set.
            </summary>
            <remarks>
            <para>Should be called before the field (representing this field) is set.</para>
            <para>This should be used if you expect the field to have <see cref="T:ValidationFramework.Rule"/>s applied to it. 
             This is usually the case if you are using attributes to apply <see cref="T:ValidationFramework.Rule"/>s.
             If <see cref="T:ValidationFramework.Rule"/>s are being assigned using code it may be more appropriate to call <see cref="M:ValidationFramework.FieldValidationManager.TryThrowFieldException(System.RuntimeTypeHandle,System.Object,System.String,System.String,System.Object)"/></para> 
            </remarks>
            <param name="targetHandle">A <see cref="T:System.RuntimeTypeHandle"/> representing the static <see cref="T:System.Type"/> to validate.</param>
            <param name="fieldName">Field to validate. Case sensitive.</param>
            <param name="fieldValue">The value of the field being validated.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">No <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/> could be found named <paramref name="fieldName"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.FieldValidationManager.TryValidateField(System.Object,System.String,System.String,System.Object)">
            <summary>
            Performs validation for a specific field.
            </summary>
            <remarks>
            <para>This should be used if you can not be certain of the field will have <see cref="T:ValidationFramework.Rule"/>s applied to it. 
             This is usually the case if you are using code to apply <see cref="T:ValidationFramework.Rule"/>s.
             If <see cref="T:ValidationFramework.Rule"/>s are being assigned using attributes it may be more appropriate to call <see cref="M:ValidationFramework.FieldValidationManager.ValidateField(System.Object,System.String,System.String,System.Object)"/></para> 
            </remarks>
            <param name="target">An instance of the object to be validated.</param>
            <param name="fieldName">Field to validate. Case sensitive.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">No <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/> could be found named <paramref name="fieldName"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <returns>All <see cref="T:ValidationFramework.ValidationResult"/>s for a given field.</returns>
        </member>
        <member name="M:ValidationFramework.FieldValidationManager.TryValidateField(System.RuntimeTypeHandle,System.String,System.String,System.Object)">
            <summary>
            Performs validation for a specific field.
            </summary>
            <remarks>
            <para>This should be used if you are not certain if field will have <see cref="T:ValidationFramework.Rule"/>s applied to it. 
            This is usually the case if you are using code to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using attributes it may be more appropriate to call <see cref="M:ValidationFramework.FieldValidationManager.ValidateField(System.RuntimeTypeHandle,System.String,System.String,System.Object)"/></para> 
            </remarks>
            <param name="targetHandle">A <see cref="T:System.RuntimeTypeHandle"/> representing the static <see cref="T:System.Type"/> to validate.</param>
            <param name="fieldName">Field to validate. Case sensitive.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">No <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/> could be found named <paramref name="fieldName"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <returns>All <see cref="T:ValidationFramework.ValidationResult"/>s for a given field.</returns>
        </member>
        <member name="M:ValidationFramework.FieldValidationManager.TryValidateAllFields(System.Object,System.String,System.Object)">
            <summary>
            Performs validation for a specific field.
            </summary>
            <remarks>
            <para>This should be used if you are not certain if field will have <see cref="T:ValidationFramework.Rule"/>s applied to it. 
            This is usually the case if you are using code to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using attributes it may be more appropriate to call <see cref="M:ValidationFramework.FieldValidationManager.ValidateAllFields(System.Object,System.String,System.Object)"/></para> 
            </remarks>
            <param name="target">An instance of the object to be validated.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">No <see cref="T:ValidationFramework.Rule"/>s could be found on the <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/>, that have the <see cref="P:ValidationFramework.Rule.RuleSet"/> equal to <paramref name="ruleSet"/>.</exception>
            <returns>All <see cref="T:ValidationFramework.ValidationResult"/>s for a given field.</returns>
        </member>
        <member name="M:ValidationFramework.FieldValidationManager.TryValidateAllFields(System.RuntimeTypeHandle,System.String,System.Object)">
            <summary>
            Performs validation for a specific field.
            </summary>
            <remarks>
            <para>This should be used if you are not certain if field will have <see cref="T:ValidationFramework.Rule"/>s applied to it. 
            This is usually the case if you are using code to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using attributes it may be more appropriate to call <see cref="M:ValidationFramework.FieldValidationManager.ValidateAllFields(System.RuntimeTypeHandle,System.String,System.Object)"/></para> 
            </remarks>
            <param name="targetHandle">A <see cref="T:System.RuntimeTypeHandle"/> representing the static <see cref="T:System.Type"/> to validate.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <returns>All <see cref="T:ValidationFramework.ValidationResult"/>s for a given field.</returns>
        </member>
        <member name="M:ValidationFramework.FieldValidationManager.ValidateAllFields(System.Object,System.String,System.Object)">
            <summary>
            Performs validation for an object.
            </summary>
            <remarks>
            <para>This should be used if you are certain all fields will have <see cref="T:ValidationFramework.Rule"/>s applied. 
            This is usually the case if you are using attributes to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using code it may be more appropriate to call <see cref="M:ValidationFramework.FieldValidationManager.TryValidateAllFields(System.Object,System.String,System.Object)"/></para> 
            </remarks>
            <param name="target">An instance of the object to be validated.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <returns>All <see cref="T:ValidationFramework.ValidationResult"/>s for a given field.</returns>
        </member>
        <member name="M:ValidationFramework.FieldValidationManager.ValidateField(System.RuntimeTypeHandle,System.String,System.String,System.Object)">
            <summary>
            Performs validation for a specific field.
            </summary>
            <remarks>
            <para>This should be used if you are certain all fields will have <see cref="T:ValidationFramework.Rule"/>s applied.
             This is usually the case if you are using attributes to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using code it may be more appropriate to call <see cref="M:ValidationFramework.FieldValidationManager.TryValidateAllFields(System.RuntimeTypeHandle,System.String,System.Object)"/></para> 
            </remarks>
            <param name="targetHandle">A <see cref="T:System.RuntimeTypeHandle"/> representing the static <see cref="T:System.Type"/> to validate.</param>
            <param name="fieldName">Field to validate. Case sensitive.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">No <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/> could be found named <paramref name="fieldName"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">No <see cref="T:ValidationFramework.Rule"/>s could be found on the <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/>,for <paramref name="fieldName"/>, that have the <see cref="P:ValidationFramework.Rule.RuleSet"/> equal to <see cref="P:ValidationFramework.MemberValidationManager.RuleSet"/>.</exception>
            <returns>All <see cref="T:ValidationFramework.ValidationResult"/>s for a given field.</returns>
        </member>
        <member name="M:ValidationFramework.FieldValidationManager.ValidateAllFields(System.RuntimeTypeHandle,System.String,System.Object)">
            <summary>
            Performs validation for a specific field.
            </summary>
            <remarks>
            <para>This should be used if you are not certain if fields will have <see cref="T:ValidationFramework.Rule"/>s applied.
            This is usually the case if you are using attributes to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using code it may be more appropriate to call <see cref="M:ValidationFramework.FieldValidationManager.TryValidateAllFields(System.RuntimeTypeHandle,System.String,System.Object)"/></para> 
            </remarks>
            <param name="targetHandle">A <see cref="T:System.RuntimeTypeHandle"/> representing the static <see cref="T:System.Type"/> to validate.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">No <see cref="T:ValidationFramework.Rule"/>s could be found on the <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/>, that have the <see cref="P:ValidationFramework.Rule.RuleSet"/> equal to <paramref name="ruleSet"/>.</exception>
            <returns>All <see cref="T:ValidationFramework.ValidationResult"/>s for a given field.</returns>
        </member>
        <member name="M:ValidationFramework.FieldValidationManager.ValidateField(System.Object,System.String,System.String,System.Object)">
            <summary>
            Performs validation for a specific field.
            </summary>
            <remarks>
            <para>This should be used if you are not certain the field will have <see cref="T:ValidationFramework.Rule"/>s applied. 
            This is usually the case if you are using attributes to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using code it may be more appropriate to call <see cref="M:ValidationFramework.FieldValidationManager.TryValidateField(System.Object,System.String,System.String,System.Object)"/></para> 
            </remarks>
            <param name="target">An instance of the object to be validated.</param>
            <param name="fieldName">Field to validate. Case sensitive.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">No <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/> could be found named <paramref name="fieldName"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">No <see cref="T:ValidationFramework.Rule"/>s could be found on the <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/>,for <paramref name="fieldName"/>, that have the <see cref="P:ValidationFramework.Rule.RuleSet"/> equal to <see cref="P:ValidationFramework.MemberValidationManager.RuleSet"/>.</exception>
            <returns>All <see cref="T:ValidationFramework.ValidationResult"/>s for a given field.</returns>
        </member>
        <member name="M:ValidationFramework.FieldValidationManager.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.FieldValidationManager"/> class.
            </summary>
            <remarks>Use this constructor if an instance of an object is being validated. If there is no instance, i.e. it is a static class or only static properties are being validated, use <see cref="M:ValidationFramework.FieldValidationManager.#ctor(System.RuntimeTypeHandle)"/>.</remarks>
            <param name="target">An instance of the object to be validated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null.</exception>
        </member>
        <member name="M:ValidationFramework.FieldValidationManager.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.FieldValidationManager"/> class.
            </summary>
            <remarks>Use this constructor if an instance of an object is being validated. If there is no instance, i.e. it is a static class or only static properties are being validated, use <see cref="M:ValidationFramework.FieldValidationManager.#ctor(System.RuntimeTypeHandle)"/>.</remarks>
            <param name="target">An instance of the object to be validated.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.FieldValidationManager.#ctor(System.Object,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.FieldValidationManager"/> class.
            </summary>
            <remarks>Use this constructor if an instance of an object is being validated. If there is no instance, i.e. it is a static class or only static properties are being validated, use <see cref="M:ValidationFramework.FieldValidationManager.#ctor(System.RuntimeTypeHandle)"/>.</remarks>
            <param name="target">An instance of the object to be validated.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.FieldValidationManager.#ctor(System.RuntimeTypeHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.FieldValidationManager"/> class.
            </summary>
            <param name="targetHandle">A <see cref="T:System.RuntimeTypeHandle"/> representing the static <see cref="T:System.Type"/> to validate.</param>
            <remarks>Use this constructor if there is no instance, i.e. it is a static class or only static properties are being validated. If an instance of an object needs to be validated use <see cref="M:ValidationFramework.FieldValidationManager.#ctor(System.Object)"/>.</remarks>
        </member>
        <member name="M:ValidationFramework.FieldValidationManager.#ctor(System.RuntimeTypeHandle,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.FieldValidationManager"/> class.
            </summary>
            <param name="targetHandle">A <see cref="T:System.RuntimeTypeHandle"/> representing the static <see cref="T:System.Type"/> to validate.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <remarks>Use this constructor if there is no instance, i.e. it is a static class or only static properties are being validated. If an instance of an object needs to be validated use <see cref="M:ValidationFramework.FieldValidationManager.#ctor(System.Object)"/>.</remarks>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.FieldValidationManager.#ctor(System.RuntimeTypeHandle,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.FieldValidationManager"/> class.
            </summary>
            <param name="targetHandle">A <see cref="T:System.RuntimeTypeHandle"/> representing the static <see cref="T:System.Type"/> to validate.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <remarks>Use this constructor if there is no instance, i.e. it is a static class or only static properties are being validated. If an instance of an object needs to be validated use <see cref="M:ValidationFramework.FieldValidationManager.#ctor(System.Object)"/>.</remarks>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.FieldValidationManager.ValidateAllFields">
            <summary>
            Validates all properties.
            </summary>
            <exception cref="T:System.InvalidOperationException">No <see cref="T:ValidationFramework.Rule"/>s can be found.</exception>
        </member>
        <member name="M:ValidationFramework.FieldValidationManager.ValidateField(System.String)">
            <summary>
            Validates the specified field.
            </summary>
            <param name="fieldName">Field to validate. Case sensitive.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldName"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">No <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/> could be found named <paramref name="fieldName"/>.</exception>
            <exception cref="T:System.ArgumentException">No <see cref="T:ValidationFramework.Rule"/>s could be found on the <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/>,for <paramref name="fieldName"/>, that have the <see cref="P:ValidationFramework.Rule.RuleSet"/> equal to <see cref="P:ValidationFramework.MemberValidationManager.RuleSet"/>.</exception>
        </member>
        <member name="M:ValidationFramework.FieldValidationManager.TryValidateAllFields">
            <summary>
            Validates all properties.
            </summary>
        </member>
        <member name="M:ValidationFramework.FieldValidationManager.TryValidateField(System.String)">
            <summary>
            Validates only the specified field. 
            </summary>
            <remarks>No exception is thrown if the field is not found.</remarks>
            <param name="fieldName">Field to validate. Case sensitive.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldName"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.FieldValidationManager.GetResultsInErrorForFields(System.String[])">
            <summary>
            Get a <see cref="T:System.Collections.Generic.IList`1"/> of all <see cref="T:ValidationFramework.ValidationResult"/>s for a list of properties.
            </summary>
            <remarks>Use <see cref="T:ValidationFramework.ResultFormatter"/> for some basic formatting conversions of <see cref="T:ValidationFramework.ValidationResult"/>s.</remarks>
            <param name="fieldNames">The names of the properties to retrieve error messages for. Case sensitive.</param>
            <returns>All <see cref="T:ValidationFramework.ValidationResult"/>s for the list of properties.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldNames"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Length of <paramref name="fieldNames"/> is 0.</exception>
            <exception cref="T:System.ArgumentException">No <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/> could be found any single field <paramref name="fieldNames"/>.</exception>
        </member>
        <member name="M:ValidationFramework.FieldValidationManager.GetResultsInErrorForField(System.String)">
            <summary>
            Get a <see cref="T:System.Collections.Generic.IList`1"/> of all <see cref="T:ValidationFramework.ValidationResult"/>s for a given field.
            </summary>
            <remarks>Use <see cref="T:ValidationFramework.ResultFormatter"/> for some basic formatting conversions of <see cref="T:ValidationFramework.ValidationResult"/>s.</remarks>
            <param name="fieldName">Field to retrieve error message for. Case sensitive.</param>
            <returns>All <see cref="T:ValidationFramework.ValidationResult"/>s for a given field.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">No <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/> could be found named <paramref name="fieldName"/>.</exception>
        </member>
        <member name="M:ValidationFramework.FieldValidationManager.TryGetResultsInErrorForField(System.String,System.Collections.Generic.IList{ValidationFramework.ValidationResult}@)">
            <summary>
            Get a <see cref="T:System.Collections.Generic.IList`1"/> of all <see cref="T:ValidationFramework.ValidationResult"/>s for a given field. No exception is thrown if the field is not found.
            </summary>
            <remarks>Use <see cref="T:ValidationFramework.ResultFormatter"/> for some basic formatting conversions of <see cref="T:ValidationFramework.ValidationResult"/>s.</remarks>
            <param name="fieldName">Field to retrieve error message for. Case sensitive.</param>
            <param name="validationResults">When this method returns, if the field exists and contains <see cref="T:ValidationFramework.Rule"/>s, contains a <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:ValidationFramework.ValidationResult"/> for the field being validated; otherwise null.</param>
            <return><see langword="true"/> if the field exists and has <see cref="T:ValidationFramework.Rule"/>s; otherwise <see langword="false"/>.</return>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="T:ValidationFramework.Configuration.RangeRuleConfigReader">
            <summary>
            A <see cref="T:ValidationFramework.Configuration.IRuleConfigReader"/> that creates a <see cref="T:ValidationFramework.RangeRule`1"/> from a <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
            <remarks>
              <see cref="T:ValidationFramework.Configuration.RuleData"/> for default attributes.
              <b>Extra Attributes</b>
              <ul>
                <li>
                  <c>minimum</c> (required): Used to populate <see cref="P:ValidationFramework.RangeRule`1.Maximum"/>.   Accepted formats for <see cref="T:System.DateTime"/> are "dd MMM yyyy HH:mm:ss.ff", "yyyy-MM-ddTHH:mm:ss", "dd MMM yyyy hh:mm tt", "dd MMM yyyy hh:mm:ss tt", "dd MMM yyyy HH:mm:ss", "dd MMM yyyy HH:mm" and "dd MMM yyyy" 
                </li>
                <li>
                  <c>maximum</c> (required): Used to populate <see cref="P:ValidationFramework.RangeRule`1.Minimum"/>.   Accepted formats for <see cref="T:System.DateTime"/> are "dd MMM yyyy HH:mm:ss.ff", "yyyy-MM-ddTHH:mm:ss", "dd MMM yyyy hh:mm tt", "dd MMM yyyy hh:mm:ss tt", "dd MMM yyyy HH:mm:ss", "dd MMM yyyy HH:mm" and "dd MMM yyyy" 
                </li>
                <li>
                  <c>equalsMinimumIsValid</c> (optional): Used to populate <see cref="P:ValidationFramework.RangeRule`1.EqualsMinimumIsValid"/>.   
                </li>
                <li>
                  <c>equalsMaximumIsValid</c> (optional): Used to populate <see cref="P:ValidationFramework.RangeRule`1.EqualsMaximumIsValid"/>.   
                </li>
               </ul>
            </remarks>
            <example>
            <code lang="xml" title="This example shows an xml configuration for RangeRuleConfigReader">
            <rule errorMessage="hello" typeName="RangeRule" minimum="1" maximum="5" equalsMinimumIsValid="true" equalsMaximumIsValid="true"/>
            </code>
            </example>
            <seealso cref="T:ValidationFramework.RangeRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.ConfigurationService"/>
        </member>
        <member name="M:ValidationFramework.Configuration.RangeRuleConfigReader.ReadConfig(ValidationFramework.Configuration.RuleData,System.RuntimeTypeHandle)">
            <summary>
            Create a <see cref="T:ValidationFramework.Rule"/> from a <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
            <param name="ruleData">The <see cref="T:ValidationFramework.Configuration.RuleData"/> that represent the xml to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <param name="runtimeTypeHandle">The <see cref="T:System.RuntimeTypeHandle"/> for the <see cref="T:System.Type"/> to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <returns>A <see cref="T:ValidationFramework.Rule"/> that <paramref name="ruleData"/> represented</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ruleData"/> is null.</exception>
        </member>
        <member name="T:ValidationFramework.Web.ValidationAssociation">
            <summary>
            Defines an association between a <see cref="T:System.Web.UI.Control"/>, the property to validate and (optionally) the location <see cref="T:System.Web.UI.Control"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.Web.ValidationAssociation.#ctor(System.Web.UI.Control,System.String,System.Web.UI.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.Web.ValidationAssociation"/> class.
            </summary>
            <param name="controlToValidate">The <see cref="T:System.Web.UI.Control"/> to validate.</param>
            <param name="propertyName">The name of the property to validate.</param>
            <param name="containerControl">A <see cref="T:System.Web.UI.Control"/> to use to locate where the <see cref="T:System.Web.UI.WebControls.BaseValidator"/> will be rendered. Null is accepted.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="controlToValidate"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.Web.ValidationAssociation.#ctor(System.Web.UI.Control,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.Web.ValidationAssociation"/> class.
            </summary>
            <param name="controlToValidate">The <see cref="T:System.Web.UI.Control"/> to validate.</param>
            <param name="propertyName">The name of the property to validate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="controlToValidate"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="P:ValidationFramework.Web.ValidationAssociation.ControlToValidate">
            <summary>
            Gets or sets the <see cref="T:System.Web.UI.Control"/> to validate.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference.</exception>
        </member>
        <member name="P:ValidationFramework.Web.ValidationAssociation.MemberName">
            <summary>
            Gets or sets the name of the property to validate.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="P:ValidationFramework.Web.ValidationAssociation.ContainerControl">
            <summary>
            Gets or sets the <see cref="T:System.Web.UI.Control"/> to use to locate where the <see cref="T:System.Web.UI.WebControls.BaseValidator"/> will be rendered.
            </summary>
        </member>
        <member name="T:ValidationFramework.RequiredStringRule">
            <summary>
            Performs a required field validation on a <see cref="T:System.String"/>.
            </summary>
            <seealso cref="T:ValidationFramework.Configuration.RequiredStringRuleConfigReader"/>
            <seealso cref="T:ValidationFramework.RequiredStringRuleAttribute"/>
        </member>
        <member name="M:ValidationFramework.RequiredStringRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.RequiredStringRule"/> class.
            </summary>
            <remarks>
            The following are defaulted
            <list type="bullet">
            <item>
            <see cref="P:ValidationFramework.Rule.RuleSet"/> to null.
            </item>
            <item>
            <see cref="P:ValidationFramework.RequiredStringRule.TrimWhiteSpace"/> to true.
            </item>
            <item>
            <see cref="P:ValidationFramework.Rule.ErrorMessage"/> to the default error message.
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:ValidationFramework.RequiredStringRule.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.RequiredStringRule"/> class.
            </summary>
            <remarks>
            The following are defaulted
            <list type="bullet">
            <item>
            <see cref="P:ValidationFramework.Rule.RuleSet"/> to null.
            </item>
            <item>
            <see cref="P:ValidationFramework.RequiredStringRule.TrimWhiteSpace"/> to true.
            </item>
            <item>
            <see cref="P:ValidationFramework.Rule.ErrorMessage"/> to the default error message.
            </item>
            </list>
            </remarks>
            <param name="errorMessage">The error message for this rule. Pass a null to use the the default value.</param>
        </member>
        <member name="M:ValidationFramework.RequiredStringRule.#ctor(System.String,System.String,System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.RequiredStringRule"/> class.
            </summary>
            <param name="errorMessage">The error message for this rule. Pass a null to use the the default value.</param>
            <param name="initialValue">The initial and invalid value.</param>
            <param name="trimWhiteSpace">A <see cref="T:System.Boolean"/> to indicate if whitespace should be trimmed from <paramref name="initialValue"/> and the value being validated.</param>
            <param name="ignoreCase">A <see cref="T:System.Boolean"/> to indicate if case should be ignored.</param>
            <param name="useErrorMessageProvider"><c>true</c> to use <see cref="P:ValidationFramework.Configuration.ConfigurationService.ErrorMessageProvider"/> when determining the error message for this <see cref="T:ValidationFramework.Rule"/>; otherwise <c>false</c>.</param>
            <param name="ruleSet">A <see cref="T:System.String"/> used to group <see cref="T:ValidationFramework.Rule"/>s. Use a null to indicate no grouping.</param>
            <exception cref="T:System.NullReferenceException"><paramref name="initialValue"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorMessage"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.RequiredStringRule.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.RequiredStringRule"/> class.
            </summary>
            <param name="errorMessage">The error message for this rule. Pass a null to use the the default value.</param>
            <param name="trimWhiteSpace">A <see cref="T:System.Boolean"/> to indicate if whitespace should be trimmed from the value being validated.</param>
            <param name="useErrorMessageProvider"><c>true</c> to use <see cref="P:ValidationFramework.Configuration.ConfigurationService.ErrorMessageProvider"/> when determining the error message for this <see cref="T:ValidationFramework.Rule"/>; otherwise <c>false</c>.</param>
            <param name="ruleSet">A <see cref="T:System.String"/> used to group <see cref="T:ValidationFramework.Rule"/>s. Use a null to indicate no grouping.</param>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.RequiredStringRule.CreateWebClientValidators">
            <summary>
            Get a list of <see cref="T:System.Web.UI.WebControls.BaseValidator"/>s to perform the client side validation.
            </summary>
            <remarks>The <see cref="T:System.Web.UI.WebControls.BaseValidator"/>s returned should only perform client validation.</remarks>
            <returns>The<see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Web.UI.WebControls.BaseValidator"/>s to perform the client side validation.</returns>
        </member>
        <member name="M:ValidationFramework.RequiredStringRule.Validate(System.Object,System.Object,System.Object)">
            <summary>
            Validate the member this <see cref="T:ValidationFramework.Rule"/> is applied to.
            </summary>
            <returns><see langword="true"/> if the member is valid; otherwise <see langword="false"/>.</returns>
            <param name="targetObjectValue">The value of the object containing the member to validate.</param>
            <param name="targetMemberValue">The value of the member to validate.</param>
            <param name="context">An <see cref="T:System.Object"/> that contains data for the <see cref="T:ValidationFramework.Rule"/> to validate. The default is null.</param>
        </member>
        <member name="M:ValidationFramework.RequiredStringRule.IsEquivalent(ValidationFramework.Rule)">
            <summary>
            Checks if the current <see cref="T:ValidationFramework.Rule"/> is equivalent to another <see cref="T:ValidationFramework.Rule"/>.
            </summary>
            <remarks>
            Called for each <see cref="T:ValidationFramework.Rule"/> in <see cref="T:ValidationFramework.Reflection.RuleCollection"/> when a new <see cref="T:ValidationFramework.Rule"/> is added. This method is only called when both the existing <see cref="T:ValidationFramework.Rule"/> and the <see cref="T:ValidationFramework.Rule"/> being are of the same <see cref="T:System.Type"/> and have the same <see cref="P:ValidationFramework.Rule.RuleSet"/>. So it is safe to directly cast <paramref name="rule"/> to the current type. All properties in <paramref name="rule"/> should be compared to the propeties of the current <see cref="T:ValidationFramework.Rule"/>.
            </remarks>
            <param name="rule">The <see cref="T:ValidationFramework.Rule"/> to check for equivalence.</param>
            <returns><see langword="true"/> if <paramref name="rule"/> is equivalent to the current <see cref="T:ValidationFramework.Rule"/>; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:ValidationFramework.RequiredStringRule.RuleInterpretation">
            <summary>
            Gets a <see cref="T:System.String"/> that is a business interpretation of the <see cref="T:ValidationFramework.Rule"/>.
            </summary>
            <remarks>
            Used as a helper to document the API that <see cref="T:ValidationFramework.Rule"/>s area applied to.
            </remarks>
        </member>
        <member name="P:ValidationFramework.RequiredStringRule.TrimWhiteSpace">
            <summary>
            Gets a <see cref="T:System.Boolean"/> to indicate if whitespace should be trimmed from the value being validated.
            </summary>
        </member>
        <member name="P:ValidationFramework.RequiredStringRule.IgnoreCase">
            <summary>
            Gets a <see cref="T:System.Boolean"/> to indicate if case should be ignored.
            </summary>
        </member>
        <member name="T:ValidationFramework.RequiredObjectRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.RequiredRule`1"/> should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.RequiredRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.RequiredObjectRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\RequiredValidators\RequiredObjectRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\RequiredValidators\RequiredObjectRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.RequiredObjectRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RequiredObjectRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RequiredObjectRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.RequiredObjectRuleAttribute.InitialValue">
            <summary>
            Gets or sets the initial and invalid value.
            </summary>
            <seealso cref="P:ValidationFramework.RequiredRule`1.InitialValue"/>
        </member>
        <member name="T:ValidationFramework.ValidationResult">
            <summary>
            The results of any <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/> operation.
            </summary>
            <remarks>An instance is only created if the <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/> operation fails.</remarks>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Reflection\GetReflectionInfoFromValidationResult.cs" title="This example shows how to get a Type or a MethodBase from a ValidationResult." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Reflection\GetReflectionInfoFromValidationResult.vb" title="This example shows how to get a Type or a MethodBase from a ValidationResult." lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.ValidationResult.#ctor(ValidationFramework.Rule,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.ValidationResult"/> class.
            </summary>
            <remarks>
            null is an invalid value for both <paramref name="rule"/> and <paramref name="errorMessage"/>. 
            Due to performance concerns <see cref="T:System.ArgumentNullException"/> will no be thrown.
            So just don't pass in null or an empty string.
            </remarks>
            <param name="rule">The <see cref="P:ValidationFramework.ValidationResult.Rule"/> that this <see cref="T:ValidationFramework.ValidationResult"/> has been generated from.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="P:ValidationFramework.ValidationResult.ErrorMessage">
            <summary>
            Gets the error message for the <see cref="T:ValidationFramework.ValidationResult"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.ValidationResult.Rule">
            <summary>
            Gets the <see cref="P:ValidationFramework.ValidationResult.Rule"/> that this <see cref="T:ValidationFramework.ValidationResult"/> has been generated from.
            </summary>
            <seealso cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>
        </member>
        <member name="T:ValidationFramework.Reflection.RuleCollection">
            <summary>
            A <see cref="T:ValidationFramework.AutoKeyDictionary`2"/>  of <see cref="T:ValidationFramework.Rule"/>s.
            </summary>
        </member>
        <member name="M:ValidationFramework.Reflection.RuleCollection.#ctor(ValidationFramework.Reflection.InfoDescriptor)">
            <summary>
            Initialize a new instance of the <see cref="T:ValidationFramework.Reflection.RuleCollection"/> class.
            </summary>
            <param name="infoDescriptor">The <see cref="P:ValidationFramework.Reflection.RuleCollection.InfoDescriptor"/> this <see cref="T:ValidationFramework.Reflection.RuleCollection"/> belongs to.</param>
        </member>
        <member name="M:ValidationFramework.Reflection.RuleCollection.SetItem(System.Int32,ValidationFramework.Rule)">
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception> 
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:ValidationFramework.AutoKeyDictionary`2"/>.</exception>
        </member>
        <member name="M:ValidationFramework.Reflection.RuleCollection.InsertItem(System.Int32,ValidationFramework.Rule)">
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception> 
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:ValidationFramework.AutoKeyDictionary`2"/>.</exception>
        </member>
        <member name="P:ValidationFramework.Reflection.RuleCollection.InfoDescriptor">
            <summary>
            Gets the <see cref="P:ValidationFramework.Reflection.RuleCollection.InfoDescriptor"/> this <see cref="T:ValidationFramework.Reflection.RuleCollection"/> belongs to.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ValidationFramework.Configuration.ValidatableRuleConfigReader" -->
        <member name="M:ValidationFramework.Configuration.ValidatableRuleConfigReader.ReadConfig(ValidationFramework.Configuration.RuleData,System.RuntimeTypeHandle)">
            <summary>
            Create a <see cref="T:ValidationFramework.Rule"/> from a <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
            <param name="ruleData">The <see cref="T:ValidationFramework.Configuration.RuleData"/> that represent the xml to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <param name="runtimeTypeHandle">The <see cref="T:System.RuntimeTypeHandle"/> for the <see cref="T:System.Type"/> to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <returns>A <see cref="T:ValidationFramework.Rule"/> that <paramref name="ruleData"/> represented</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ruleData"/> is null.</exception>
        </member>
        <member name="T:ValidationFramework.CompareFloatRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.CompareRule`1"/>, that will compare a <see cref="T:System.Single"/>, should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.CompareRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.CompareRuleConfigReader"/>
            <example>
              <code source="Examples\ExampleLibraryCSharp\Validators\CompareValidators\CompareFloatRuleAttributeSample.cs" lang="cs"/>
              <code source="Examples\ExampleLibraryVB\Validators\CompareValidators\CompareFloatRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.CompareFloatRuleAttribute.#ctor(System.Single,ValidationFramework.CompareOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.CompareFloatRuleAttribute"/> class.
            </summary>
            <param name="operator">The comparison operation to perform.</param>
            <param name="valueToCompare">The value to compare with.</param>
        </member>
        <member name="M:ValidationFramework.CompareFloatRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.CompareFloatRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.CompareFloatRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.CompareFloatRuleAttribute.ValueToCompare">
            <summary>
            Gets the value to compare.
            </summary>
            <seealso cref="P:ValidationFramework.CompareRule`1.ValueToCompare"/>
        </member>
        <member name="T:ValidationFramework.ReflectionUtilities">
            <summary>
            Methods to help with reflection.
            </summary>
        </member>
        <member name="M:ValidationFramework.ReflectionUtilities.IsSubclassOf(System.Type,System.Type)">
            <summary>
            Determines whether the <see cref="T:System.Type"/> represented by the <paramref name="typeToCheck"/> derives from the <see cref="T:System.Type"/> represented by the <paramref name="baseType"/>. 
            </summary>
            <param name="typeToCheck">The child <see cref="T:System.Type"/> to check for.</param>
            <param name="baseType">The base <see cref="T:System.Type"/> to check for.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="typeToCheck"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="baseType"/> is null.</exception>
            <returns>true if the <paramref name="typeToCheck"/> derives from <paramref name="baseType"/> or if they are the same type; otherwise, false.</returns>
        </member>
        <member name="M:ValidationFramework.ReflectionUtilities.IsPropertyMethod(System.Reflection.MethodBase)">
            <summary>
            Determine if a <see cref="T:System.Reflection.MethodBase"/> represents a 'get' or 'set' method.
            </summary>
            <param name="methodBase">The <see cref="T:System.Reflection.MethodBase"/> to check.</param>
            <returns><c>true</c> if <see cref="T:System.Reflection.MethodBase"/> represents a 'get' or 'set' method; otherwise <c>false</c></returns>
        </member>
        <member name="T:ValidationFramework.Reflection.PropertyCollection">
            <summary>
            A <see cref="T:ValidationFramework.AutoKeyDictionary`2"/>  of <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/>s.
            </summary>
        </member>
        <member name="M:ValidationFramework.Reflection.PropertyCollection.#ctor(ValidationFramework.Reflection.TypeDescriptor)">
            <summary>
            Initialize a new instance of the <see cref="T:ValidationFramework.Reflection.PropertyCollection"/> class.
            </summary>
            <param name="typeDescriptor">The <see cref="T:ValidationFramework.Reflection.TypeDescriptor"/> for this <see cref="T:ValidationFramework.Reflection.PropertyCollection"/>.</param>
        </member>
        <member name="M:ValidationFramework.Reflection.PropertyCollection.GetKeyForItem(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Extracts the key from the <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> element.
            </summary>
            <returns>The key for the specified element.</returns>
            <param name="item">The element from which to extract the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="P:ValidationFramework.Reflection.PropertyCollection.TypeDescriptor">
            <summary>
            Gets the <see cref="T:ValidationFramework.Reflection.TypeDescriptor"/> for this <see cref="T:ValidationFramework.Reflection.PropertyCollection"/>.
            </summary>
        </member>
        <member name="T:ValidationFramework.Configuration.ParameterData">
            <summary>
            An object representation of the validation configuration for a parameter.
            </summary>
            <seealso cref="T:ValidationFramework.Configuration.ConfigurationService"/>
            <exclude/>
        </member>
        <member name="P:ValidationFramework.Configuration.ParameterData.Name">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
        </member>
        <member name="P:ValidationFramework.Configuration.ParameterData.RuleDatas">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:ValidationFramework.Configuration.RuleData"/> that represents the <see cref="T:ValidationFramework.Rule"/>s for this <see cref="T:ValidationFramework.Configuration.ParameterData"/>.
            </summary>
        </member>
        <member name="T:ValidationFramework.Configuration.ComparePropertyRuleConfigReader">
            <summary>
            A <see cref="T:ValidationFramework.Configuration.IRuleConfigReader"/> that creates a <see cref="T:ValidationFramework.ComparePropertyRule"/> from a <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
            <remarks>
            <b>Note:</b> this <see cref="T:ValidationFramework.Configuration.IRuleConfigReader"/> can only be applied to properties. If it is applied to a member an <see cref="T:System.InvalidOperationException"/> will be thrown.
              <see cref="T:ValidationFramework.Configuration.RuleData"/> for default attributes.
              <b>Extra Attributes</b>
              <ul>
                <li>
                  <c>propertyToCompare</c> (required): Used to populate <see cref="P:ValidationFramework.ComparePropertyRule.PropertyToCompare"/>.  
                </li>
                <li>
                  <c>compareOperator</c> (required): Used to populate <see cref="P:ValidationFramework.ComparePropertyRule.CompareOperator"/>.   
                </li>
              </ul>
            </remarks>
            <example>
            <code lang="xml" title="This example shows an xml configuration for ComparePropertyRuleConfigReader">
            <rule errorMessage="hello" typeName="ComparePropertyRule" propertyToCompare="MyProperty" compareOperator="Equal"/>
            </code>
            </example>
            <seealso cref="T:ValidationFramework.ComparePropertyRule"/>
            <seealso cref="T:ValidationFramework.ComparePropertyRuleAttribute"/>
            <seealso cref="T:ValidationFramework.Configuration.ConfigurationService"/>
        </member>
        <member name="M:ValidationFramework.Configuration.ComparePropertyRuleConfigReader.ReadConfig(ValidationFramework.Configuration.RuleData,System.RuntimeTypeHandle)">
            <summary>
            Create a <see cref="T:ValidationFramework.Rule"/> from a <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
            <param name="ruleData">The <see cref="T:ValidationFramework.Configuration.RuleData"/> that represent the xml to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <param name="runtimeTypeHandle">The <see cref="T:System.RuntimeTypeHandle"/> for the <see cref="T:System.Type"/> to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <returns>A <see cref="T:ValidationFramework.Rule"/> that <paramref name="ruleData"/> represented</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ruleData"/> is null.</exception>
        </member>
        <member name="T:ValidationFramework.Guard">
            <summary>
            Performs common argument validation.
            </summary>
        </member>
        <member name="M:ValidationFramework.Guard.ArgumentNotNullOrEmptyString(System.String,System.String)">
            <summary>
            Checks a string argument to ensure it isn't null or empty.
            </summary>
            <param name="argumentValue">The argument value to check.</param>
            <param name="argumentName">The name of the argument.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="argumentValue"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="argumentValue"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.Guard.ArgumentNotEmptyString(System.String,System.String)">
            <summary>
            Checks a string argument to ensure it isn't empty.
            </summary>
            <param name="argumentValue">The argument value to check.</param>
            <param name="argumentName">The name of the argument.</param>
            <exception cref="T:System.ArgumentException"><paramref name="argumentValue"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.Guard.ArgumentNotNull(System.Object,System.String)">
            <summary>
            Checks an argument to ensure it isn't null.
            </summary>
            <param name="argumentValue">The argument value to check.</param>
            <param name="argumentName">The name of the argument.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="argumentValue"/> is a null reference.</exception>
        </member>
        <member name="T:ValidationFramework.RangeValidationHelper">
            <summary>
            Static class for RangeValidation methods.
            </summary>
        </member>
        <member name="T:ValidationFramework.RangeStringRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.RangeStringRule"/> should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.RangeStringRule"/>
            <seealso cref="T:ValidationFramework.Configuration.RangeRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\RangeValidators\RangeStringRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\RangeValidators\RangeStringRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.RangeStringRuleAttribute.#ctor(System.String,System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:ValidationFramework.RangeStringRuleAttribute"/> class.
            </summary>
            <param name="minimum">The minimum value.</param>
            <param name="maximum">The maximum value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="minimum"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="minimum"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="maximum"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="maximum"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.RangeStringRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RangeStringRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RangeStringRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.RangeStringRuleAttribute.Minimum">
            <summary>
            Gets the minimum value.
            </summary>
            <seealso cref="P:ValidationFramework.RangeRule`1.Minimum"/>
        </member>
        <member name="P:ValidationFramework.RangeStringRuleAttribute.Maximum">
            <summary>
            Gets the maximum value.
            </summary>
            <seealso cref="P:ValidationFramework.RangeRule`1.Maximum"/>
        </member>
        <member name="T:ValidationFramework.RangeFloatRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.RangeRule`1"/>, that will check the range of a <see cref="T:System.Single"/>, should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.RangeRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.RangeRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\RangeValidators\RangeFloatRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\RangeValidators\RangeFloatRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.RangeFloatRuleAttribute.#ctor(System.Single,System.Single)">
            <summary>
            Initialises a new instance of the <see cref="T:ValidationFramework.RangeDoubleRuleAttribute"/> class.
            </summary>
            <param name="minimum">The minimum value.</param>
            <param name="maximum">The maximum value.</param>
        </member>
        <member name="M:ValidationFramework.RangeFloatRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RangeFloatRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RangeFloatRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.RangeFloatRuleAttribute.Minimum">
            <summary>
            Gets the minimum value.
            </summary>
            <seealso cref="P:ValidationFramework.RangeRule`1.Minimum"/>
        </member>
        <member name="P:ValidationFramework.RangeFloatRuleAttribute.Maximum">
            <summary>
            Gets the maximum value.
            </summary>
            <seealso cref="P:ValidationFramework.RangeRule`1.Maximum"/>
        </member>
        <member name="T:ValidationFramework.RangeDateTimeRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.RangeRule`1"/>, that will check the range of a <see cref="T:System.DateTime"/>, should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.RangeRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.RangeRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\RangeValidators\RangeDateTimeRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\RangeValidators\RangeDateTimeRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.RangeDateTimeRuleAttribute.#ctor(System.String,System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:ValidationFramework.RangeDateTimeRuleAttribute"/> class.
            </summary>
            <param name="minimum">The minimum value.</param>
            <param name="maximum">The maximum value.</param>
        </member>
        <member name="M:ValidationFramework.RangeDateTimeRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RangeDateTimeRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RangeDateTimeRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.RangeDateTimeRuleAttribute.Minimum">
            <summary>
            Gets the minimum value.
            </summary>
            <remarks>
            Accepted formats are "dd MMM yyyy HH:mm:ss.ff", "yyyy-MM-ddTHH:mm:ss", "dd MMM yyyy hh:mm tt", "dd MMM yyyy hh:mm:ss tt", "dd MMM yyyy HH:mm:ss", "dd MMM yyyy HH:mm" and "dd MMM yyyy"
            </remarks>
            <seealso cref="P:ValidationFramework.RangeRule`1.Minimum"/>
        </member>
        <member name="P:ValidationFramework.RangeDateTimeRuleAttribute.Maximum">
            <summary>
            Gets the maximum value.
            </summary>
            <remarks>
            Accepted formats are "dd MMM yyyy HH:mm:ss.ff", "yyyy-MM-ddTHH:mm:ss", "dd MMM yyyy hh:mm tt", "dd MMM yyyy hh:mm:ss tt", "dd MMM yyyy HH:mm:ss", "dd MMM yyyy HH:mm" and "dd MMM yyyy"
            </remarks>
            <seealso cref="P:ValidationFramework.RangeRule`1.Maximum"/>
        </member>
        <member name="T:ValidationFramework.Configuration.LengthStringRuleConfigReader">
            <summary>
            A <see cref="T:ValidationFramework.Configuration.IRuleConfigReader"/> that creates a <see cref="T:ValidationFramework.LengthStringRule"/> from a <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
            <remarks>
              <see cref="T:ValidationFramework.Configuration.RuleData"/> for default attributes.
              <b>Extra Attributes</b>
              <ul>
                <li>
                  <c>minimum</c> (optional): Used to populate <see cref="P:ValidationFramework.LengthRule.Maximum"/>.   
                </li>
                <li>
                  <c>maximum</c> (required): Used to populate <see cref="P:ValidationFramework.LengthRule.Minimum"/>.   
                </li>
              </ul>
            </remarks>
            <example>
            <code lang="xml" title="This example shows an xml configuration for LengthStringRuleConfigReader">
            <rule errorMessage="hello" typeName="LengthStringRule" minimum="1" maximum="5"/>";
            </code>
            </example>
            <seealso cref="T:ValidationFramework.LengthStringRule"/>
            <seealso cref="T:ValidationFramework.LengthStringRuleAttribute"/>
            <seealso cref="T:ValidationFramework.Configuration.ConfigurationService"/>
        </member>
        <member name="M:ValidationFramework.Configuration.LengthStringRuleConfigReader.ReadConfig(ValidationFramework.Configuration.RuleData,System.RuntimeTypeHandle)">
            <summary>
            Create a <see cref="T:ValidationFramework.Rule"/> from a <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
            <param name="ruleData">The <see cref="T:ValidationFramework.Configuration.RuleData"/> that represent the xml to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <param name="runtimeTypeHandle">The <see cref="T:System.RuntimeTypeHandle"/> for the <see cref="T:System.Type"/> to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <returns>A <see cref="T:ValidationFramework.Rule"/> that <paramref name="ruleData"/> represented</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ruleData"/> is null.</exception>
        </member>
        <member name="T:ValidationFramework.CompareDoubleRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.CompareRule`1"/>, that will compare a <see cref="T:System.Double"/>, should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.CompareRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.CompareRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\CompareValidators\CompareDoubleRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\CompareValidators\CompareDoubleRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.CompareDoubleRuleAttribute.#ctor(System.Double,ValidationFramework.CompareOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.CompareDoubleRuleAttribute"/> class.
            </summary>
            <param name="operator">The comparison operation to perform.</param>
            <param name="valueToCompare">The value to compare with.</param>
        </member>
        <member name="M:ValidationFramework.CompareDoubleRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.CompareDoubleRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.CompareDoubleRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.CompareDoubleRuleAttribute.ValueToCompare">
            <summary>
            Gets the value to compare.
            </summary>
            <seealso cref="P:ValidationFramework.CompareRule`1.ValueToCompare"/>
        </member>
        <member name="T:ValidationFramework.Reflection.PropertyDescriptor">
            <summary>
            A light-weight wrapper for <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.Reflection.PropertyDescriptor.#ctor(System.RuntimeTypeHandle,System.String)">
            <summary>
            For testing purposes
            </summary>
            <exclude/>
        </member>
        <member name="M:ValidationFramework.Reflection.PropertyDescriptor.#ctor(ValidationFramework.Reflection.TypeDescriptor,System.Reflection.PropertyInfo)">
            <summary>
            Initialize a new instance of <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/>.
            </summary>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> to wrap.</param>
            <param name="typeDescriptor">The <see cref="T:ValidationFramework.Reflection.TypeDescriptor"/> this <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> belongs to.</param>
            <exception cref="T:System.NullReferenceException"><paramref name="propertyInfo"/> is null.</exception>
        </member>
        <member name="M:ValidationFramework.Reflection.PropertyDescriptor.GetValue(System.Object)">
            <summary>
            Get the value for this <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/>.
            </summary>
            <param name="target">The object on which to extract the property value. If a <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> is static, this argument is ignored.</param>
            <returns>The value for the property.</returns>
        </member>
        <member name="P:ValidationFramework.Reflection.PropertyDescriptor.IsStatic">
            <summary>
            Gets a value indicating whether the <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> is static. 
            </summary>
        </member>
        <member name="P:ValidationFramework.Reflection.PropertyDescriptor.TypeDescriptor">
            <summary>
            Gets the <see cref="T:ValidationFramework.Reflection.TypeDescriptor"/> for this <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/>.
            </summary>
        </member>
        <member name="T:ValidationFramework.Web.ValidationAssociationCollection">
            <summary>
            A <see cref="T:ValidationFramework.AutoKeyDictionary`2"/> of <see cref="T:ValidationFramework.Web.ValidationAssociation"/>s.
            </summary>
        </member>
        <member name="M:ValidationFramework.Web.ValidationAssociationCollection.GetKeyForItem(ValidationFramework.Web.ValidationAssociation)">
            <summary>
            Extracts the key from the <see cref="T:ValidationFramework.Web.ValidationAssociation"/> element.
            </summary>
            <returns>The key for the specified element.</returns>
            <param name="item">The element from which to extract the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="T:ValidationFramework.Web.ParametersRequiredEventArgs">
            <summary>
            Provides data for the <see cref="P:ValidationFramework.Web.ParameterValidatorGenerator.ParametersRequired"/> event.
            </summary>
        </member>
        <member name="M:ValidationFramework.Web.ParametersRequiredEventArgs.#ctor(System.Collections.Generic.ICollection{System.Web.UI.Control})">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.Web.ParametersRequiredEventArgs"/>.
            </summary>
            <param name="controlsToValidate">The <see cref="T:System.Web.UI.Control"/>s to validate.</param>
        </member>
        <member name="P:ValidationFramework.Web.ParametersRequiredEventArgs.Parameters">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> for storing parameters.
            </summary>
        </member>
        <member name="T:ValidationFramework.Web.Mode">
            <summary>
            Specifies the type of validators that will be created.
            </summary>
        </member>
        <member name="F:ValidationFramework.Web.Mode.Client">
            <summary>
            Create only client side validators.
            </summary>
        </member>
        <member name="F:ValidationFramework.Web.Mode.Server">
            <summary>
            Create only server side validators.
            </summary>
        </member>
        <member name="F:ValidationFramework.Web.Mode.ClientServer">
            <summary>
            Create both client and server side validators.
            </summary>
        </member>
        <member name="T:ValidationFramework.RangeStringRule">
            <summary>
            Performs a range validation on a <see cref="T:System.String"/>.
            </summary>
            <remarks>If the value being validated is null the rule will evaluate to true.</remarks>
            <seealso cref="T:ValidationFramework.Configuration.RangeStringRuleConfigReader"/>
            <seealso cref="T:ValidationFramework.RangeStringRuleAttribute"/>
        </member>
        <member name="M:ValidationFramework.RangeStringRule.#ctor(System.String,System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:ValidationFramework.RangeStringRule"/> class.
            </summary>
            <remarks>
            The following are defaulted
            <list type="bullet">
            <item>
            <see cref="P:ValidationFramework.Rule.RuleSet"/> to null.
            </item>
            <item>
            <see cref="P:ValidationFramework.Rule.ErrorMessage"/> to the default error message.
            </item>
            <item>
            <see cref="P:ValidationFramework.RangeRule`1.EqualsMaximumIsValid"/> to true.
            </item>
            <item>
            <see cref="P:ValidationFramework.RangeRule`1.EqualsMinimumIsValid"/> to true.
            </item>
            </list>
            </remarks>
            <param name="minimum">The minimum value.</param>
            <param name="maximum">The maximum value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="minimum"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="minimum"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="maximum"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="maximum"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.RangeStringRule.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:ValidationFramework.RangeStringRule"/> class.
            </summary>
            <remarks>
            The following are defaulted
            <list type="bullet">
            <item>
            <see cref="P:ValidationFramework.Rule.RuleSet"/> to null.
            </item>
            <item>
            <see cref="P:ValidationFramework.RangeRule`1.EqualsMaximumIsValid"/> to true.
            </item>
            <item>
            <see cref="P:ValidationFramework.RangeRule`1.EqualsMinimumIsValid"/> to true.
            </item>
            </list>
            </remarks>
            <param name="minimum">The minimum value.</param>
            <param name="maximum">The maximum value.</param>
            <param name="errorMessage">The error message for this rule.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="minimum"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="minimum"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="maximum"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="maximum"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorMessage"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.RangeStringRule.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initialises a new instance of the <see cref="T:ValidationFramework.RangeStringRule"/> class.
            </summary>
            <param name="minimum">The minimum value.</param>
            <param name="maximum">The maximum value.</param>
            <param name="errorMessage">The error message for this rule. Pass a null to use the the default value.</param>
            <param name="equalsMinimumIsValid"><see langword="true"/> to indicate that the minimum value is valid; otherwise <see langworg="false"/>.</param>
            <param name="equalsMaximumIsValid"><see langword="true"/> to indicate that the maximum value is valid; otherwise <see langworg="false"/>.</param>
            <param name="useErrorMessageProvider"><c>true</c> to use <see cref="P:ValidationFramework.Configuration.ConfigurationService.ErrorMessageProvider"/> when determining the error message for this <see cref="T:ValidationFramework.Rule"/>; otherwise <c>false</c>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="minimum"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="minimum"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="maximum"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="maximum"/> is <see cref="F:System.String.Empty"/>.</exception>
            <param name="ruleSet">A <see cref="T:System.String"/> used to group <see cref="T:ValidationFramework.Rule"/>s. Use a null to indicate no grouping.</param>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorMessage"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.RangeStringRule.Validate(System.Object,System.Object,System.Object)">
            <summary>
            Validate the member this <see cref="T:ValidationFramework.Rule"/> is applied to.
            </summary>
            <param name="targetObjectValue">The value of the object containing the member to validate.</param>
            <param name="targetMemberValue">The value of the member to validate.</param>
            <param name="context">An <see cref="T:System.Object"/> that contains data for the <see cref="T:ValidationFramework.Rule"/> to validate. The default is null.</param>
        </member>
        <member name="T:ValidationFramework.EnumerableDuplicateRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.EnumerableDuplicateRule"/> should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.EnumerableDuplicateRule"/>  
            <seealso cref="T:ValidationFramework.Configuration.EnumerableDuplicateRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\EnumerableDuplicateRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\EnumerableDuplicateRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.EnumerableDuplicateRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.EnumerableDuplicateRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.EnumerableDuplicateRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.EnumerableDuplicateRuleAttribute.EqualityComparerTypeName">
            <summary>
            Gets or sets the type name for the type to get <see cref="T:System.Collections.IEqualityComparer"/> from.
            </summary>
            <seealso cref="P:ValidationFramework.EnumerableDuplicateRule.Comparer"/>
        </member>
        <member name="P:ValidationFramework.EnumerableDuplicateRuleAttribute.EqualityComparerPropertyName">
            <summary>
            Gets or sets the name of the static property to get <see cref="T:System.Collections.IEqualityComparer"/> from. 
            </summary>
            <seealso cref="P:ValidationFramework.EnumerableDuplicateRule.Comparer"/>
        </member>
        <member name="T:ValidationFramework.CustomRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.CustomRule"/> should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.CustomRule"/>
            <seealso cref="T:ValidationFramework.Configuration.CustomRuleConfigReader"/>
            <seealso cref="T:ValidationFramework.CustomValidationEventArgs"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\CustomRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\CustomRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.CustomRuleAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.CustomRuleAttribute"/> class.
            </summary>
            <param name="validationTypeName">The name of the <see cref="T:System.Type"/> that the <see cref="P:ValidationFramework.CustomRuleAttribute.ValidationMethod"/> exists on.</param>
            <param name="validationMethod">The name of the method to use when running <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>.</param>
            <param name="ruleInterpretation">The business interpretation of the <see cref="T:ValidationFramework.CustomRuleAttribute"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="ruleInterpretation"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleInterpretation"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="validationTypeName"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="validationTypeName"/> is <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="validationMethod"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="validationMethod"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.CustomRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.CustomRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.CustomRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.CustomRuleAttribute.ValidationMethod">
            <summary>
            Gets the name of the method to use when running <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.CustomRuleAttribute.RuleInterpretation">
            <summary>
            Gets a <see cref="T:System.String"/> that is a business interpretation of the <see cref="T:ValidationFramework.Rule"/>.
            </summary>
            <remarks>
            Used as a helper to document the API that <see cref="T:ValidationFramework.Rule"/>s area applied to.
            </remarks>
        </member>
        <member name="P:ValidationFramework.CustomRuleAttribute.ValidationTypeName">
            <summary>
            Gets the name of the <see cref="T:System.Type"/> that the <see cref="P:ValidationFramework.CustomRuleAttribute.ValidationMethod"/> exists on.
            </summary>
        </member>
        <member name="T:ValidationFramework.CompareShortRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.CompareRule`1"/>, that will compare a <see cref="T:System.Int16"/>, should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.CompareRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.CompareRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\CompareValidators\CompareShortRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\CompareValidators\CompareShortRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.CompareShortRuleAttribute.#ctor(System.Int16,ValidationFramework.CompareOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.CompareShortRuleAttribute"/> class.
            </summary>
            <param name="operator">The comparison operation to perform.</param>
            <param name="valueToCompare">The value to compare with.</param>
        </member>
        <member name="M:ValidationFramework.CompareShortRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.CompareShortRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.CompareShortRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.CompareShortRuleAttribute.ValueToCompare">
            <summary>
            Gets the value to compare.
            </summary>
            <seealso cref="P:ValidationFramework.CompareRule`1.ValueToCompare"/>
        </member>
        <member name="T:ValidationFramework.Web.PropertyValidatorGeneratorControl">
            <summary>
            Wraps <see cref="T:ValidationFramework.Web.PropertyValidatorGenerator"/> functionality in a <see cref="T:System.Web.UI.Control"/> to make it easier to use on the design surface.
            </summary>
            <seealso cref="M:ValidationFramework.Web.PropertyValidatorGeneratorControl.AddAssociation(System.Web.UI.Control,System.String)"/>
            <seealso cref="M:ValidationFramework.Web.PropertyValidatorGeneratorControl.AddAssociation(System.Web.UI.Control,System.String,System.Web.UI.Control)"/>
            <seealso cref="M:ValidationFramework.Web.PropertyValidatorGeneratorControl.GenerateValidators"/>
        </member>
        <member name="M:ValidationFramework.Web.PropertyValidatorGeneratorControl.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:ValidationFramework.Web.PropertyValidatorGeneratorControl"/> class.
            </summary>
        </member>
        <member name="M:ValidationFramework.Web.PropertyValidatorGeneratorControl.AddAssociation(System.Web.UI.Control,System.String,System.Web.UI.Control)">
            <summary>
            A shortcut method to add a new <see cref="T:ValidationFramework.Web.ValidationAssociation"/> to <see cref="P:ValidationFramework.Web.PropertyValidatorGeneratorControl.ValidationAssociations"/>.
            </summary>
            <param name="controlToValidate">The <see cref="T:System.Web.UI.Control"/> to validate.</param>
            <param name="propertyName">The name of the property to validate.</param>
            <param name="containerControl">A <see cref="T:System.Web.UI.Control"/> to use to locate where the <see cref="T:System.Web.UI.WebControls.BaseValidator"/> will be rendered. Null is accepted.</param>
            <returns>The <see cref="T:ValidationFramework.Web.ValidationAssociation"/> that has been added to <see cref="P:ValidationFramework.Web.PropertyValidatorGeneratorControl.ValidationAssociations"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="controlToValidate"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.Web.PropertyValidatorGeneratorControl.AddAssociation(System.Web.UI.Control,System.String)">
            <summary>
            A shortcut method to add a new <see cref="T:ValidationFramework.Web.ValidationAssociation"/> to <see cref="P:ValidationFramework.Web.PropertyValidatorGeneratorControl.ValidationAssociations"/>.
            </summary>
            <param name="controlToValidate">The <see cref="T:System.Web.UI.Control"/> to validate.</param>
            <param name="propertyName">The name of the property to validate.</param>
            <returns>The <see cref="T:ValidationFramework.Web.ValidationAssociation"/> that has been added to <see cref="P:ValidationFramework.Web.PropertyValidatorGeneratorControl.ValidationAssociations"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="controlToValidate"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.Web.PropertyValidatorGeneratorControl.GenerateValidators">
            <summary>
            Go through all the <see cref="P:ValidationFramework.Web.PropertyValidatorGeneratorControl.ValidationAssociations"/> and add <see cref="T:System.Web.UI.WebControls.BaseValidator"/>s to each.
            </summary>
        </member>
        <member name="M:ValidationFramework.Web.PropertyValidatorGeneratorControl.GetValidatorGenerator">
            <summary>
            Get a <see cref="T:ValidationFramework.Web.PropertyValidatorGenerator"/>. for this <see cref="T:ValidationFramework.Web.PropertyValidatorGeneratorControl"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.Web.PropertyValidatorGeneratorControl.ValidationAssociations">
            <summary>
            Gets or sets a <see cref="T:ValidationFramework.Web.ValidationAssociationCollection"/> containing all the <see cref="T:ValidationFramework.Web.ValidationAssociation"/>s for this <see cref="T:ValidationFramework.Web.PropertyValidatorGeneratorControl"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.Web.PropertyValidatorGeneratorControl.Mode">
            <summary>
            Gets or sets a the type of validators that will be generated. Client Server or both.
            </summary>
            <remarks>If <see cref="P:ValidationFramework.Web.PropertyValidatorGeneratorControl.Mode"/> is set to <see cref="F:ValidationFramework.Web.Mode.Client"/> it is not necessary to attach to the <see cref="E:ValidationFramework.Web.PropertyValidatorGeneratorControl.TargetObjectRequired"/> event. Not all <see cref="T:ValidationFramework.Rule"/>s can be validated on the client side so your business layer will be responsible for doing a validation of the object on the server side and displaying the message to the user.</remarks>
        </member>
        <member name="P:ValidationFramework.Web.PropertyValidatorGeneratorControl.TypeToValidate">
            <summary>
            Gets or sets the fully qualified name of the target <see cref="T:System.Type"/> to validate.
            </summary>
        </member>
        <member name="P:ValidationFramework.Web.PropertyValidatorGeneratorControl.ValidationGroup">
            <summary>
            Gets or sets the name of the validation group to which all the <see cref="P:System.Web.UI.WebControls.BaseValidator.ValidationGroup"/>s will default to. 
            </summary>
        </member>
        <member name="P:ValidationFramework.Web.PropertyValidatorGeneratorControl.Display">
            <summary>
            Gets or sets the display behavior of the error message to which all the <see cref="P:System.Web.UI.WebControls.BaseValidator.Display"/>s will default to. The default value is <see cref="F:System.Web.UI.WebControls.ValidatorDisplay.Dynamic"/>. 
            </summary>
        </member>
        <member name="E:ValidationFramework.Web.PropertyValidatorGeneratorControl.TargetObjectRequired">
            <summary>
            Occurs when the <see cref="T:ValidationFramework.Web.PropertyValidatorGeneratorControl"/> requires a target object for validation. 
            </summary>
        </member>
        <member name="T:ValidationFramework.ValidatableRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.ValidatableRule"/> should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.Configuration.ValidatableRuleConfigReader"/>
            <seealso cref="T:ValidationFramework.ValidatableRule"/>
        </member>
        <member name="M:ValidationFramework.ValidatableRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="P:ValidationFramework.ValidatableRuleAttribute.UseMemberErrorMessages"/> is true and <see cref="P:ValidationFramework.RuleAttribute.ErrorMessage"/> is not null.</exception>
        </member>
        <member name="M:ValidationFramework.ValidatableRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="P:ValidationFramework.ValidatableRuleAttribute.UseMemberErrorMessages"/> is true and <see cref="P:ValidationFramework.RuleAttribute.ErrorMessage"/> is not null.</exception>
        </member>
        <member name="M:ValidationFramework.ValidatableRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="P:ValidationFramework.ValidatableRuleAttribute.UseMemberErrorMessages"/> is true and <see cref="P:ValidationFramework.RuleAttribute.ErrorMessage"/> is not null.</exception>
        </member>
        <member name="P:ValidationFramework.ValidatableRuleAttribute.UseMemberErrorMessages">
            <summary>
            Gets or sets a value indicating if <see cref="P:ValidationFramework.IValidatable.ErrorMessages"/> should be use as the <see cref="P:ValidationFramework.Rule.ErrorMessage"/>.  
            </summary>
        </member>
        <member name="T:ValidationFramework.RequiredStringRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.RequiredStringRule"/> should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.RequiredStringRule"/>
            <seealso cref="T:ValidationFramework.Configuration.RequiredRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\RequiredValidators\RequiredStringRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\RequiredValidators\RequiredStringRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.RequiredStringRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RequiredStringRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RequiredStringRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.RequiredStringRuleAttribute.InitialValue">
            <summary>
            Gets or sets the initial and invalid value.
            </summary>
            <seealso cref="P:ValidationFramework.RequiredRule`1.InitialValue"/>
        </member>
        <member name="P:ValidationFramework.RequiredStringRuleAttribute.TrimWhiteSpace">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> to indicate if whitespace should be trimmed from the value being validated.
            </summary>
            <seealso cref="P:ValidationFramework.RequiredStringRule.TrimWhiteSpace"/>
        </member>
        <member name="P:ValidationFramework.RequiredStringRuleAttribute.IgnoreCase">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> to indicate if case should be ignored.
            </summary>
            <seealso cref="P:ValidationFramework.RequiredStringRule.IgnoreCase"/>
        </member>
        <member name="T:ValidationFramework.RangeShortRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.RangeRule`1"/>, that will check the range of a <see cref="T:System.Int16"/>, should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.RangeRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.RangeRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\RangeValidators\RangeShortRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\RangeValidators\RangeShortRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.RangeShortRuleAttribute.#ctor(System.Int16,System.Int16)">
            <summary>
            Initialises a new instance of the <see cref="T:ValidationFramework.RangeShortRuleAttribute"/> class.
            </summary>
            <param name="minimum">The minimum value.</param>
            <param name="maximum">The maximum value.</param>
        </member>
        <member name="M:ValidationFramework.RangeShortRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RangeShortRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RangeShortRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.RangeShortRuleAttribute.Minimum">
            <summary>
            Gets the minimum value.
            </summary>
            <seealso cref="P:ValidationFramework.RangeRule`1.Minimum"/>
        </member>
        <member name="P:ValidationFramework.RangeShortRuleAttribute.Maximum">
            <summary>
            Gets the maximum value.
            </summary>
            <seealso cref="P:ValidationFramework.RangeRule`1.Maximum"/>
        </member>
        <member name="T:ValidationFramework.RangeIntRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.RangeRule`1"/>, that will check the range of a <see cref="T:System.Int32"/>, should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.RangeRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.RangeRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\RangeValidators\RangeIntRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\RangeValidators\RangeIntRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.RangeIntRuleAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialises a new instance of the <see cref="T:ValidationFramework.RangeIntRuleAttribute"/> class.
            </summary>
            <param name="minimum">The minimum value.</param>
            <param name="maximum">The maximum value.</param>
        </member>
        <member name="M:ValidationFramework.RangeIntRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RangeIntRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RangeIntRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.RangeIntRuleAttribute.Minimum">
            <summary>
            Gets the minimum value.
            </summary>
            <seealso cref="P:ValidationFramework.RangeRule`1.Minimum"/>
        </member>
        <member name="P:ValidationFramework.RangeIntRuleAttribute.Maximum">
            <summary>
            Gets the maximum value.
            </summary>
            <seealso cref="P:ValidationFramework.RangeRule`1.Maximum"/>
        </member>
        <member name="T:ValidationFramework.LengthStringRule">
            <summary>
            Performs a string length validation.
            </summary>
            <seealso cref="T:ValidationFramework.Configuration.LengthStringRuleConfigReader"/>
            <seealso cref="T:ValidationFramework.LengthStringRuleAttribute"/>
        </member>
        <member name="T:ValidationFramework.LengthRule">
            <summary>
            Performs a length validation.
            </summary>
            <seealso cref="T:ValidationFramework.LengthCollectionRule"/>
            <seealso cref="T:ValidationFramework.LengthStringRule"/>
        </member>
        <member name="M:ValidationFramework.LengthRule.#ctor(System.Nullable{System.RuntimeTypeHandle},System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.LengthRule"/> class.
            </summary>
            <param name="errorMessage">The error message for this rule. Pass a null to use the the default value.</param>
            <param name="propertyTypeHandle">The <see cref="T:System.RuntimeTypeHandle"/> that this <see cref="T:ValidationFramework.LengthRule"/> can be applied to. Use <see langword="null"/> to indicate it can be applied to any property type.</param>
            <param name="maximum">The maximum length allowed.</param>
            <param name="minimum">The minimum length allowed.</param>
            <param name="useErrorMessageProvider"><c>true</c> to use <see cref="P:ValidationFramework.Configuration.ConfigurationService.ErrorMessageProvider"/> when determining the error message for this <see cref="T:ValidationFramework.Rule"/>; otherwise <c>false</c>.</param>
            <param name="ruleSet">A <see cref="T:System.String"/> used to group <see cref="T:ValidationFramework.Rule"/>s. Use a null to indicate no grouping.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="minimum"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="maximum"/> is not greater than or equal to <paramref name="minimum"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorMessage"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.LengthRule.IsEquivalent(ValidationFramework.Rule)">
            <summary>
            Checks if the current <see cref="T:ValidationFramework.Rule"/> is equivalent to another <see cref="T:ValidationFramework.Rule"/>.
            </summary>
            <remarks>
            Called for each <see cref="T:ValidationFramework.Rule"/> in <see cref="T:ValidationFramework.Reflection.RuleCollection"/> when a new <see cref="T:ValidationFramework.Rule"/> is added. This method is only called when both the existing <see cref="T:ValidationFramework.Rule"/> and the <see cref="T:ValidationFramework.Rule"/> being are of the same <see cref="T:System.Type"/> and have the same <see cref="P:ValidationFramework.Rule.RuleSet"/>. So it is safe to directly cast <paramref name="rule"/> to the current type. All properties in <paramref name="rule"/> should be compared to the propeties of the current <see cref="T:ValidationFramework.Rule"/>.
            </remarks>
            <param name="rule">The <see cref="T:ValidationFramework.Rule"/> to check for equivalence.</param>
            <returns><see langword="true"/> if <paramref name="rule"/> is equivalent to the current <see cref="T:ValidationFramework.Rule"/>; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:ValidationFramework.LengthRule.Maximum">
            <summary>
            Gets the maximum length.
            </summary>
        </member>
        <member name="P:ValidationFramework.LengthRule.Minimum">
            <summary>
            Gets or sets the minimum length.
            </summary>
        </member>
        <member name="M:ValidationFramework.LengthStringRule.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.LengthStringRule"/> class.
            </summary>
            <remarks>
            The following are defaulted
            <list type="bullet">
            <item>
            <see cref="P:ValidationFramework.Rule.RuleSet"/> to null.
            </item>
            <item>
            <see cref="P:ValidationFramework.Rule.ErrorMessage"/> to the default error message.
            </item>
            <item>
            <see cref="P:ValidationFramework.LengthStringRule.TrimWhiteSpace"/> to true.
            </item>
            </list>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="maximum"/> is not greater than or equal to <paramref name="minimum"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="minimum"/> is less than 0.</exception>
            <param name="maximum">The maximum length allowed.</param>
            <param name="minimum">The minimum length allowed.</param>
        </member>
        <member name="M:ValidationFramework.LengthStringRule.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.LengthStringRule"/> class.
            </summary>
            <remarks>
            The following are defaulted
            <list type="bullet">
            <item>
            <see cref="P:ValidationFramework.Rule.RuleSet"/> to null.
            </item>
            <item>
            <see cref="P:ValidationFramework.LengthStringRule.TrimWhiteSpace"/> to true.
            </item>
            </list>
            </remarks>
            <param name="errorMessage">The error message for this rule. Pass a null to use the the default value.</param>
            <param name="maximum">The maximum length allowed.</param>
            <param name="minimum">The minimum length allowed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="minimum"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorMessage"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.LengthStringRule.#ctor(System.String,System.String,System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.LengthStringRule"/> class.
            </summary>
            <param name="errorMessage">The error message for this rule. Pass a null to use the the default value.</param>
            <param name="maximum">The maximum length allowed.</param>
            <param name="minimum">The minimum length allowed.</param>
            <param name="useErrorMessageProvider"><c>true</c> to use <see cref="P:ValidationFramework.Configuration.ConfigurationService.ErrorMessageProvider"/> when determining the error message for this <see cref="T:ValidationFramework.Rule"/>; otherwise <c>false</c>.</param>
            <param name="ruleSet">A <see cref="T:System.String"/> used to group <see cref="T:ValidationFramework.Rule"/>s. Use a null to indicate no grouping.</param>
            <param name="trimWhiteSpace">A <see cref="T:System.Boolean"/> to indicate if whitespace should be trimmed from the value being validated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="minimum"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="maximum"/> is not greater than or equal to <paramref name="minimum"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorMessage"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.LengthStringRule.Validate(System.Object,System.Object,System.Object)">
            <summary>
            Validate the member this <see cref="T:ValidationFramework.Rule"/> is applied to.
            </summary>
            <param name="targetObjectValue">The value of the object containing the member to validate.</param>
            <param name="targetMemberValue">The value of the member to validate.</param>
            <param name="context">An <see cref="T:System.Object"/> that contains data for the <see cref="T:ValidationFramework.Rule"/> to validate. The default is null.</param>
        </member>
        <member name="M:ValidationFramework.LengthStringRule.IsEquivalent(ValidationFramework.Rule)">
            <summary>
            Checks if the current <see cref="T:ValidationFramework.Rule"/> is equivalent to another <see cref="T:ValidationFramework.Rule"/>.
            </summary>
            <remarks>
            Called for each <see cref="T:ValidationFramework.Rule"/> in <see cref="T:ValidationFramework.Reflection.RuleCollection"/> when a new <see cref="T:ValidationFramework.Rule"/> is added. This method is only called when both the existing <see cref="T:ValidationFramework.Rule"/> and the <see cref="T:ValidationFramework.Rule"/> being are of the same <see cref="T:System.Type"/> and have the same <see cref="P:ValidationFramework.Rule.RuleSet"/>. So it is safe to directly cast <paramref name="rule"/> to the current type. All properties in <paramref name="rule"/> should be compared to the propeties of the current <see cref="T:ValidationFramework.Rule"/>.
            </remarks>
            <param name="rule">The <see cref="T:ValidationFramework.Rule"/> to check for equivalence.</param>
            <returns><see langword="true"/> if <paramref name="rule"/> is equivalent to the current <see cref="T:ValidationFramework.Rule"/>; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:ValidationFramework.LengthStringRule.CreateWebClientValidators">
            <summary>
            Get a list of <see cref="T:System.Web.UI.WebControls.BaseValidator"/>s to perform the client side validation.
            </summary>
            <remarks>The <see cref="T:System.Web.UI.WebControls.BaseValidator"/>s returned should only perform client validation.</remarks>
            <returns>The<see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Web.UI.WebControls.BaseValidator"/>s to perform the client side validation.</returns>
        </member>
        <member name="M:ValidationFramework.LengthStringRule.GetComputedErrorMessage(System.String,System.String)">
            <summary>
            Called after <see cref="P:ValidationFramework.Rule.InfoDescriptor"/> is set but only when <see cref="P:ValidationFramework.Rule.ErrorMessage"/> is null.
            </summary>
            <returns>The error message for the <see cref="T:ValidationFramework.Rule"/>.</returns>
            <param name="tokenizedMemberName">A user friendly representation of the member name.</param>
            <param name="descriptorType">
            If <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> is a <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> then <paramref name="descriptorType"/> will be 'property'.
            If <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> is a <see cref="T:ValidationFramework.Reflection.ParameterDescriptor"/> then <paramref name="descriptorType"/> will be 'parameter'.
            </param>
        </member>
        <member name="P:ValidationFramework.LengthStringRule.TrimWhiteSpace">
            <summary>
            Gets a <see cref="T:System.Boolean"/> to indicate if whitespace should be trimmed from the value being validated.
            </summary>
        </member>
        <member name="P:ValidationFramework.LengthStringRule.RuleInterpretation">
            <summary>
            Gets a <see cref="T:System.String"/> that is a business interpretation of the <see cref="T:ValidationFramework.Rule"/>.
            </summary>
            <remarks>
            Used as a helper to document the API that <see cref="T:ValidationFramework.Rule"/>s area applied to.
            </remarks>
        </member>
        <member name="T:ValidationFramework.LengthCollectionRule">
            <summary>
            Performs a length validation in <see cref="T:System.Collections.ICollection"/>s.
            </summary>
            <remarks>If the value being validated is null the rule will evaluate to true.</remarks>
            <remarks>If <see cref="P:ValidationFramework.LengthCollectionRule.ExcludeDuplicatesFromCount"/> is true then <see cref="M:System.Object.GetHashCode"/> is used to discard duplicates from the count. If the collection is null <see langword="true"/> will be returned. To validate for nulls use a <see cref="T:ValidationFramework.RequiredObjectRuleAttribute"/>.</remarks>
            <seealso cref="T:ValidationFramework.Configuration.LengthCollectionRuleConfigReader"/>
            <seealso cref="T:ValidationFramework.LengthCollectionRuleAttribute"/>
        </member>
        <member name="M:ValidationFramework.LengthCollectionRule.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new, empty instance of the <see cref="T:ValidationFramework.EnumerableDuplicateRule"/> class using the specified <see cref="T:System.Collections.IEqualityComparer"/> object. 
            </summary>
            <remarks>
            The following are defaulted
            <list type="bullet">
            <item>
            <see cref="P:ValidationFramework.Rule.RuleSet"/> to null.
            </item>
            <item>
            <see cref="P:ValidationFramework.Rule.ErrorMessage"/> to the default error message.
            </item>
            <item>
            <see cref="P:ValidationFramework.LengthCollectionRule.Comparer"/> to null.
            </item>
            <item>
            <see cref="P:ValidationFramework.LengthCollectionRule.ExcludeDuplicatesFromCount"/> to false.
            </item>
            </list>
            </remarks>
            <param name="maximum">The maximum length allowed.</param>
            <param name="minimum">The minimum length allowed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="minimum"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="maximum"/> is not greater than or equal to <paramref name="minimum"/>.</exception>
        </member>
        <member name="M:ValidationFramework.LengthCollectionRule.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new, empty instance of the <see cref="T:ValidationFramework.EnumerableDuplicateRule"/> class using the specified <see cref="T:System.Collections.IEqualityComparer"/> object. 
            </summary>
            <remarks>
            The following are defaulted
            <list type="bullet">
            <item>
            <see cref="P:ValidationFramework.Rule.RuleSet"/> to null.
            </item>
            <item>
            <see cref="P:ValidationFramework.LengthCollectionRule.Comparer"/> to null.
            </item>
            <item>
            <see cref="P:ValidationFramework.LengthCollectionRule.ExcludeDuplicatesFromCount"/> to false.
            </item>
            </list>
            </remarks>
            <param name="errorMessage">The error message for this rule. Pass a null to use the the default value.</param>
            <param name="maximum">The maximum length allowed.</param>
            <param name="minimum">The minimum length allowed.</param>
            <exception cref="T:System.ArgumentException"><paramref name="errorMessage"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="minimum"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="maximum"/> is not greater than or equal to <paramref name="minimum"/>.</exception>
        </member>
        <member name="M:ValidationFramework.LengthCollectionRule.#ctor(System.String,System.String,System.Boolean,System.Int32,System.Int32,System.Boolean,System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new, empty instance of the <see cref="T:ValidationFramework.EnumerableDuplicateRule"/> class using the specified <see cref="T:System.Collections.IEqualityComparer"/> object. 
            </summary>
            <param name="errorMessage">The error message for this rule. Pass a null to use the the default value.</param>
            <param name="maximum">The maximum length allowed.</param>
            <param name="minimum">The minimum length allowed.</param>
            <param name="useErrorMessageProvider"><c>true</c> to use <see cref="P:ValidationFramework.Configuration.ConfigurationService.ErrorMessageProvider"/> when determining the error message for this <see cref="T:ValidationFramework.Rule"/>; otherwise <c>false</c>.</param>
            <param name="excludeDuplicatesFromCount">Indicates whether to exclude duplicate items from the count. Setting this to <see langword="true"/> will decrease the performance of <see cref="M:ValidationFramework.LengthCollectionRule.Validate(System.Object,System.Object,System.Object)"/></param>
            <param name="comparer">The <see cref="T:System.Collections.IEqualityComparer"/> object that defines how to compare objects for equality.
            -or- 
            a null reference to use the default hash code provider and the default comparer. The default comparer is each item's implementation of Object.Equals. 
            </param>
            <param name="ruleSet">A <see cref="T:System.String"/> used to group <see cref="T:ValidationFramework.Rule"/>s. Use a null to indicate no grouping.</param>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorMessage"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="minimum"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="maximum"/> is not greater than or equal to <paramref name="minimum"/>.</exception>
        </member>
        <member name="M:ValidationFramework.LengthCollectionRule.CheckType(System.RuntimeTypeHandle)">
            <summary>
            Check that the <see cref="T:System.RuntimeTypeHandle"/> is valid.
            </summary>
            <remarks>
            Called after <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> is set. Should throw <see cref="T:System.ArgumentException"/> if <paramref name="targetMemberRuntimeTypeHandle"/> is of the wrong type.
            </remarks>
            <param name="targetMemberRuntimeTypeHandle">The <see cref="T:System.RuntimeTypeHandle"/> that this <see cref="T:ValidationFramework.Rule"/> is applied to.</param>
        </member>
        <member name="M:ValidationFramework.LengthCollectionRule.Validate(System.Object,System.Object,System.Object)">
            <summary>
            Validate the member this <see cref="T:ValidationFramework.Rule"/> is applied to.
            </summary>
            <param name="targetObjectValue">The value of the object containing the member to validate.</param>
            <param name="targetMemberValue">The value of the member to validate.</param>
            <param name="context">An <see cref="T:System.Object"/> that contains data for the <see cref="T:ValidationFramework.Rule"/> to validate. The default is null.</param>
        </member>
        <member name="M:ValidationFramework.LengthCollectionRule.GetComputedErrorMessage(System.String,System.String)">
            <summary>
            Called after <see cref="P:ValidationFramework.Rule.InfoDescriptor"/> is set but only when <see cref="P:ValidationFramework.Rule.ErrorMessage"/> is null.
            </summary>
            <returns>The error message for the <see cref="T:ValidationFramework.Rule"/>.</returns>
            <param name="tokenizedMemberName">A user friendly representation of the member name.</param>
            <param name="descriptorType">
            If <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> is a <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> then <paramref name="descriptorType"/> will be 'property'.
            If <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> is a <see cref="T:ValidationFramework.Reflection.ParameterDescriptor"/> then <paramref name="descriptorType"/> will be 'parameter'.
            </param>
        </member>
        <member name="M:ValidationFramework.LengthCollectionRule.IsEquivalent(ValidationFramework.Rule)">
            <summary>
            Checks if the current <see cref="T:ValidationFramework.Rule"/> is equivalent to another <see cref="T:ValidationFramework.Rule"/>.
            </summary>
            <remarks>
            Called for each <see cref="T:ValidationFramework.Rule"/> in <see cref="T:ValidationFramework.Reflection.RuleCollection"/> when a new <see cref="T:ValidationFramework.Rule"/> is added. This method is only called when both the existing <see cref="T:ValidationFramework.Rule"/> and the <see cref="T:ValidationFramework.Rule"/> being are of the same <see cref="T:System.Type"/> and have the same <see cref="P:ValidationFramework.Rule.RuleSet"/>. So it is safe to directly cast <paramref name="rule"/> to the current type. All properties in <paramref name="rule"/> should be compared to the propeties of the current <see cref="T:ValidationFramework.Rule"/>.
            </remarks>
            <param name="rule">The <see cref="T:ValidationFramework.Rule"/> to check for equivalence.</param>
            <returns><see langword="true"/> if <paramref name="rule"/> is equivalent to the current <see cref="T:ValidationFramework.Rule"/>; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:ValidationFramework.LengthCollectionRule.RuleInterpretation">
            <summary>
            Gets a <see cref="T:System.String"/> that is a business interpretation of the <see cref="T:ValidationFramework.Rule"/>.
            </summary>
            <remarks>
            Used as a helper to document the API that <see cref="T:ValidationFramework.Rule"/>s area applied to.
            </remarks>
        </member>
        <member name="P:ValidationFramework.LengthCollectionRule.ExcludeDuplicatesFromCount">
            <summary>
            Gets whether to exclude duplicates when calculating the length.
            </summary>
        </member>
        <member name="P:ValidationFramework.LengthCollectionRule.Comparer">
            <summary>
            Gets the <see cref="T:System.Collections.IEqualityComparer"/> for the <see cref="T:ValidationFramework.LengthCollectionRule"/>.
            </summary>
        </member>
        <member name="T:ValidationFramework.Configuration.ValidationConfigurationSection">
            <summary>
            Defines a custom <see cref="T:System.Configuration.ConfigurationSection"/> for parsing validation settings. 
            </summary>
        </member>
        <member name="P:ValidationFramework.Configuration.ValidationConfigurationSection.ErrorMessageProvider">
            <summary>
            Gets or sets the name of the <see cref="T:System.Type"/> to use when creating <see cref="P:ValidationFramework.Configuration.ConfigurationService.ErrorMessageProvider"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.Configuration.ValidationConfigurationSection.MappingDocuments">
            <summary>
            Gets a list of urls to add as mapping documents
            </summary>
            <remarks>
            For each <see cref="T:ValidationFramework.Configuration.MappingDocumentElement"/> in this collection <see cref="M:ValidationFramework.Configuration.ConfigurationService.AddUrl(System.String)"/> will be called.
            </remarks>
        </member>
        <member name="T:ValidationFramework.Configuration.PropertyData">
            <summary>
            An object representation of the validation configuration for a property.
            </summary>
            <seealso cref="T:ValidationFramework.Configuration.ConfigurationService"/>
            <exclude/>
        </member>
        <member name="P:ValidationFramework.Configuration.PropertyData.RuleDatas">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:ValidationFramework.Configuration.RuleData"/> that represents the <see cref="T:ValidationFramework.Rule"/>s for this <see cref="T:ValidationFramework.Configuration.PropertyData"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.Configuration.PropertyData.Name">
            <summary>
            Gets or sets the name of the property.
            </summary>
        </member>
        <member name="T:ValidationFramework.CompareOperator">
            <summary>
            Specifies the validation comparison operators used <see cref="T:ValidationFramework.CompareRule`1"/>s. 
            </summary>
            <seealso cref="T:ValidationFramework.CompareRule`1"/>
        </member>
        <member name="F:ValidationFramework.CompareOperator.Equal">
            <summary>
            A comparison for equality.  
            </summary>
        </member>
        <member name="F:ValidationFramework.CompareOperator.GreaterThan">
            <summary>
            A comparison for greater than.  
            </summary>
        </member>
        <member name="F:ValidationFramework.CompareOperator.GreaterThanEqual">
            <summary>
            A comparison for greater than or equal to. 
            </summary>
        </member>
        <member name="F:ValidationFramework.CompareOperator.LessThan">
            <summary>
            A comparison for less than.  
            </summary>
        </member>
        <member name="F:ValidationFramework.CompareOperator.LessThanEqual">
            <summary>
            A comparison for less than or equal to.  
            </summary>
        </member>
        <member name="F:ValidationFramework.CompareOperator.NotEqual">
            <summary>
            A comparison for inequality.  
            </summary>
        </member>
        <member name="T:ValidationFramework.NotifyValidatableBase">
            <summary>
            Provides base class that developer can (optionally) inherit from to provide <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> and <see cref="T:System.ComponentModel.IDataErrorInfo"/> functionality for all sub-classes.
            </summary>
            <remarks>
            This ideal for windows forms applications to get immediate validation feedback on data bound controls.
            </remarks>
            <example>
            <code source="Examples\ExampleLibraryCSharp\BusinessBaseClasses\NotifyValidatableBaseSample.cs" title="The following code example shows how to inherit from NotifyValidatableBase." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\BusinessBaseClasses\NotifyValidatableBaseSample.vb" title="The following code example shows how to inherit from NotifyValidatableBase." lang="vbnet"/>
            </example>
            <seealso cref="T:ValidationFramework.IValidatable"/>
            <seealso cref="T:ValidationFramework.DataErrorInfoValidatableBase"/>
            <seealso cref="T:ValidationFramework.ValidatableBase"/>
        </member>
        <member name="T:ValidationFramework.DataErrorInfoValidatableBase">
            <summary>
            Provides base class that developer can inherit from to provide <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> and <see cref="T:System.ComponentModel.IDataErrorInfo"/> functionality for all sub-classes.
            </summary>
            <remarks>This ideal for windows forms applications to get immediate validation feedback on dataBound controls.</remarks>
            <example>
            <code source="Examples\ExampleLibraryCSharp\BusinessBaseClasses\DataErrorInfoValidatableBaseSample.cs" title="The following example shows how to inherit from DataErrorInfoValidatableBase." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\BusinessBaseClasses\DataErrorInfoValidatableBaseSample.vb" title="The following example shows how to inherit from DataErrorInfoValidatableBase." lang="vbnet"/>
            </example>
            <seealso cref="T:ValidationFramework.NotifyValidatableBase"/>
            <seealso cref="T:ValidationFramework.IValidatable"/>
            <seealso cref="T:ValidationFramework.ValidatableBase"/>
        </member>
        <member name="M:ValidationFramework.DataErrorInfoValidatableBase.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.DataErrorInfoValidatableBase"/> class.
            </summary>
            <param name="validateOnConstruction">A <see langword="bool"/> indicating if the properties, of the instance being created, should be validated on construction.</param>
        </member>
        <member name="M:ValidationFramework.DataErrorInfoValidatableBase.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.DataErrorInfoValidatableBase"/> class.
            </summary>
            <param name="validateOnConstruction">A <see langword="bool"/> indicating if the properties, of the instance being created, should be validated on construction.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules.</param>
        </member>
        <member name="M:ValidationFramework.DataErrorInfoValidatableBase.#ctor(System.Boolean,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.DataErrorInfoValidatableBase"/> class.
            </summary>
            <param name="validateOnConstruction">A <see langword="bool"/> indicating if the properties, of the instance being created, should be validated on construction.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
        </member>
        <member name="M:ValidationFramework.DataErrorInfoValidatableBase.#ctor(System.Boolean,System.String,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.DataErrorInfoValidatableBase"/> class.
            </summary>
            <param name="validateOnConstruction">A <see langword="bool"/> indicating if the properties, of the instance being created, should be validated on construction.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <param name="ignoreNoRules">Set to <c>true</c> to ignore the fact that no <see cref="T:ValidationFramework.Rule"/>s exists on the current type.</param>
        </member>
        <member name="M:ValidationFramework.DataErrorInfoValidatableBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.DataErrorInfoValidatableBase"/> class.
            </summary>
            <remarks><see cref="P:ValidationFramework.ValidatableBase.ValidateOnConstruction"/> will default to <see langword="false"/>.</remarks>
        </member>
        <member name="M:ValidationFramework.DataErrorInfoValidatableBase.ValidateProperty(System.String)">
            <summary>
            Perform validation for specified property.
            </summary>
            <param name="propertyName">The name of the property to validate. The parameter is case sensitive.</param>
        </member>
        <member name="P:ValidationFramework.DataErrorInfoValidatableBase.IsValid">
            <summary>
            Gets a <see lanword="bool"/> indicating if the current state is valid.
            </summary>
            <remarks>
            Since properties are validated when set, calling this property does not validate all properties.
            </remarks>
        </member>
        <member name="P:ValidationFramework.DataErrorInfoValidatableBase.Error">
            <summary>
            Gets an error message indicating what is wrong with this object. 
            </summary>
            <remarks>The uses <see cref="M:ValidationFramework.ResultFormatter.GetConcatenatedErrorMessages(System.Collections.Generic.ICollection{ValidationFramework.ValidationResult})"/> to merge the <see cref="P:ValidationFramework.ValidationResult.ErrorMessage"/>s of <see cref="P:ValidationFramework.ValidatableBase.ValidatorResultsInError"/>.</remarks>
        </member>
        <member name="P:ValidationFramework.DataErrorInfoValidatableBase.Item(System.String)">
            <summary>
            Gets the error message for the property with the given name. 
            </summary>
            <param name="columnName">The name of the property whose error message to get.  The parameter is case sensitive.</param>
            <returns>The error message for the property. The default is an <see cref="F:System.String.Empty"/>.</returns>
        </member>
        <member name="M:ValidationFramework.NotifyValidatableBase.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.NotifyValidatableBase"/> class.
            </summary>
            <param name="validateOnConstruction">A <see langword="bool"/> indicating if the properties, of the instance being created, should be validated on construction.</param>
        </member>
        <member name="M:ValidationFramework.NotifyValidatableBase.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.NotifyValidatableBase"/> class.
            </summary>
            <param name="validateOnConstruction">A <see langword="bool"/> indicating if the properties, of the instance being created, should be validated on construction.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules.</param>
        </member>
        <member name="M:ValidationFramework.NotifyValidatableBase.#ctor(System.Boolean,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.NotifyValidatableBase"/> class.
            </summary>
            <param name="validateOnConstruction">A <see langword="bool"/> indicating if the properties, of the instance being created, should be validated on construction.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
        </member>
        <member name="M:ValidationFramework.NotifyValidatableBase.#ctor(System.Boolean,System.String,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.NotifyValidatableBase"/> class.
            </summary>
            <param name="validateOnConstruction">A <see langword="bool"/> indicating if the properties, of the instance being created, should be validated on construction.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <param name="ignoreNoRules">Set to <c>true</c> to ignore the fact that no <see cref="T:ValidationFramework.Rule"/>s exists on the current type.</param>
        </member>
        <member name="M:ValidationFramework.NotifyValidatableBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.NotifyValidatableBase"/> class.
            </summary>
        </member>
        <member name="M:ValidationFramework.NotifyValidatableBase.NotifyAndValidate(System.String)">
            <summary>
            Perform validation and <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> functionality for specified property.
            </summary>
            <param name="propertyName">The name of the property to validate.  The parameter is case sensitive.</param>
        </member>
        <member name="M:ValidationFramework.NotifyValidatableBase.NotifyPropertyChanged(System.String)">
            <summary>
            Performs INotifyPropertyChanged functionality for specified property.
            </summary>
            <param name="propertyName">The name of the property that has changed. The parameter is case sensitive.</param>
        </member>
        <member name="M:ValidationFramework.NotifyValidatableBase.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ValidationFramework.NotifyValidatableBase.PropertyChanged"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="E:ValidationFramework.NotifyValidatableBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
            <remarks>
            The <see cref="E:ValidationFramework.NotifyValidatableBase.PropertyChanged"/> event can indicate all properties on the object have changed by using either a null reference or <see cref="F:System.String.Empty"/> as the <see cref="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName"/> in the <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/>.
            </remarks>
        </member>
        <member name="T:ValidationFramework.Web.CompareWebValidatorEx">
            <summary>
            A custom <see cref="T:System.Web.UI.WebControls.CompareValidator"/> that does not perform any server validation.
            </summary>
        </member>
        <member name="M:ValidationFramework.Web.CompareWebValidatorEx.EvaluateIsValid">
            <summary>
            Overrides <see cref="M:System.Web.UI.WebControls.CompareValidator.EvaluateIsValid"/> to always return <see langword="true"/>.
            </summary>
            <returns><see langword="true"/></returns>
        </member>
        <member name="T:ValidationFramework.RequiredGuidRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.RequiredRule`1"/>, that will check the existance of a <see cref="T:System.Guid"/>, should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.RequiredRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.RequiredRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\RequiredValidators\RequiredGuidRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\RequiredValidators\RequiredGuidRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.RequiredGuidRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RequiredGuidRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RequiredGuidRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.RequiredGuidRuleAttribute.InitialValue">
            <summary>
            Gets or sets the initial and invalid value.
            </summary>
            <seealso cref="P:ValidationFramework.RequiredRule`1.InitialValue"/>
        </member>
        <member name="T:ValidationFramework.Configuration.RangeStringRuleConfigReader">
            <summary>
            A <see cref="T:ValidationFramework.Configuration.IRuleConfigReader"/> that creates a <see cref="T:ValidationFramework.RangeStringRule"/> from a <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
            <remarks>
            <see cref="T:ValidationFramework.Configuration.RuleData"/> for default attributes.
              <b>Extra Attributes</b>
              <ul>
                <li>
                  <c>minimum</c> (required): Used to populate <see cref="P:ValidationFramework.RangeRule`1.Maximum"/>.   
                </li>
                <li>
                  <c>maximum</c> (required): Used to populate <see cref="P:ValidationFramework.RangeRule`1.Minimum"/>.   
                </li>
                <li>
                  <c>equalsMinimumIsValid</c> (optional): Used to populate <see cref="P:ValidationFramework.RangeRule`1.EqualsMinimumIsValid"/>.   
                </li>
                <li>
                  <c>equalsMaximumIsValid</c> (optional): Used to populate <see cref="P:ValidationFramework.RangeRule`1.EqualsMaximumIsValid"/>.   
                </li>
              </ul>
            </remarks>
            <example>
            <code lang="xml" title="This example shows an xml configuration for RangeStringRuleConfigReader">
            <rule errorMessage="hello" typeName="RangeStringRule" minimum="a" maximum="c" equalsMinimumIsValid="true" equalsMaximumIsValid="true"/>
            </code>
            </example>
            <seealso cref="T:ValidationFramework.RangeStringRule"/>
            <seealso cref="T:ValidationFramework.Configuration.ConfigurationService"/>
        </member>
        <member name="M:ValidationFramework.Configuration.RangeStringRuleConfigReader.ReadConfig(ValidationFramework.Configuration.RuleData,System.RuntimeTypeHandle)">
            <summary>
            Create a <see cref="T:ValidationFramework.Rule"/> from a <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
            <param name="ruleData">The <see cref="T:ValidationFramework.Configuration.RuleData"/> that represent the xml to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <param name="runtimeTypeHandle">The <see cref="T:System.RuntimeTypeHandle"/> for the <see cref="T:System.Type"/> to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <returns>A <see cref="T:ValidationFramework.Rule"/> that <paramref name="ruleData"/> represented</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ruleData"/> is null.</exception>
        </member>
        <member name="T:ValidationFramework.LengthStringRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.LengthStringRule"/> should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.LengthStringRule"/>
            <seealso cref="T:ValidationFramework.Configuration.LengthStringRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\LengthValidators\LengthStringRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\LengthValidators\LengthStringRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="T:ValidationFramework.LengthRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.LengthRule"/> should be applied to the program element.
            </summary>
        </member>
        <member name="M:ValidationFramework.LengthRuleAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.LengthRuleAttribute"/> class.
            </summary>
            <param name="maximum">The maximum length.</param>
        </member>
        <member name="M:ValidationFramework.LengthRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.LengthRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.LengthRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.LengthRuleAttribute.Maximum">
            <summary>
            Gets the maximum length.
            </summary>
            <seealso cref="P:ValidationFramework.LengthRule.Maximum"/>
        </member>
        <member name="P:ValidationFramework.LengthRuleAttribute.Minimum">
            <summary>
            Gets the minimum length.
            </summary>
            <exception cref="T:System.ArgumentException">Value is less than 0.</exception>
            <seealso cref="P:ValidationFramework.LengthRule.Minimum"/>
        </member>
        <member name="M:ValidationFramework.LengthStringRuleAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.LengthStringRuleAttribute"/> class.
            </summary>
            <param name="maximum">The maximum length allowed.</param>
        </member>
        <member name="M:ValidationFramework.LengthStringRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.LengthStringRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.LengthStringRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.LengthStringRuleAttribute.TrimWhiteSpace">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> to indicate if whitespace should be trimmed from the value being validated.
            </summary>
            <seealso cref="P:ValidationFramework.LengthStringRule.TrimWhiteSpace"/>
        </member>
        <member name="T:ValidationFramework.Configuration.EnumerableDuplicateRuleConfigReader">
            <summary>
            A <see cref="T:ValidationFramework.Configuration.IRuleConfigReader"/> that creates a <see cref="T:ValidationFramework.EnumerableDuplicateRule"/> from a <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
            <remarks>
            <see cref="T:ValidationFramework.Configuration.RuleData"/> for default attributes.
            </remarks>
            <example>
            <code lang="xml" title="This example shows an xml configuration for EnumerableDuplicateRuleConfigReader">
            <rule errorMessage="hello" typeName="EnumerableDuplicateRule" equalityComparerTypeName="System.StringComparer" equalityComparerPropertyName="InvariantCulture"/>
            </code>
            </example>
            <seealso cref="T:ValidationFramework.EnumerableDuplicateRule"/>
            <seealso cref="T:ValidationFramework.Configuration.ConfigurationService"/>
        </member>
        <member name="M:ValidationFramework.Configuration.EnumerableDuplicateRuleConfigReader.ReadConfig(ValidationFramework.Configuration.RuleData,System.RuntimeTypeHandle)">
            <summary>
            Create a <see cref="T:ValidationFramework.Rule"/> from a <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
            <param name="ruleData">The <see cref="T:ValidationFramework.Configuration.RuleData"/> that represent the xml to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <param name="runtimeTypeHandle">The <see cref="T:System.RuntimeTypeHandle"/> for the <see cref="T:System.Type"/> to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <returns>A <see cref="T:ValidationFramework.Rule"/> that <paramref name="ruleData"/> represented</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ruleData"/> is null.</exception>
        </member>
        <member name="T:ValidationFramework.CompareDateTimeRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.CompareRule`1"/>, that will compare a <see cref="T:System.DateTime"/>, should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.CompareRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.CompareRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\CompareValidators\CompareByteRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\CompareValidators\CompareByteRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.CompareDateTimeRuleAttribute.#ctor(System.String,ValidationFramework.CompareOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.CompareDateTimeRuleAttribute"/> class.
            </summary>
            <param name="operator">The comparison operation to perform.</param>
            <param name="valueToCompare">The value to compare with.</param>
        </member>
        <member name="M:ValidationFramework.CompareDateTimeRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>  
            <returns>A <see cref="T:ValidationFramework.CompareRule`1"/> that will compare two <see cref="T:System.DateTime"/>s.</returns>
        </member>
        <member name="M:ValidationFramework.CompareDateTimeRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
            <param name="parameterDescriptor"></param>
            <returns>A <see cref="T:ValidationFramework.CompareRule`1"/> that will compare two <see cref="T:System.DateTime"/>s.</returns>
        </member>
        <member name="M:ValidationFramework.CompareDateTimeRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
            <param name="fieldDescriptor"></param>
            <returns>A <see cref="T:ValidationFramework.CompareRule`1"/> that will compare two <see cref="T:System.DateTime"/>s.</returns>
        </member>
        <member name="P:ValidationFramework.CompareDateTimeRuleAttribute.ValueToCompare">
            <summary>
            Gets the value to compare.
            </summary>
            <remarks>
            Accepted formats are "dd MMM yyyy HH:mm:ss.ff", "yyyy-MM-ddTHH:mm:ss", "dd MMM yyyy hh:mm tt", "dd MMM yyyy hh:mm:ss tt", "dd MMM yyyy HH:mm:ss", "dd MMM yyyy HH:mm" and "dd MMM yyyy"
            </remarks>
            <seealso cref="P:ValidationFramework.CompareRule`1.ValueToCompare"/>
        </member>
        <member name="P:ValidationFramework.CompareDateTimeRuleAttribute.ValueToCompareDateTime">
            <summary>
            Gets a <see cref="T:System.DateTime"/> representation of <see cref="P:ValidationFramework.CompareDateTimeRuleAttribute.ValueToCompare"/>.
            </summary>
        </member>
        <member name="T:ValidationFramework.EnumUserFriendlyNameAttribute">
            <summary>
            Specifies the user friendly name of an <see cref="T:System.Enum"/>s <see langword="field"/>.
            </summary>
            <seealso cref="T:ValidationFramework.EnumUserFriendlyNameConverter"/>
        </member>
        <member name="M:ValidationFramework.EnumUserFriendlyNameAttribute.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:ValidationFramework.EnumUserFriendlyNameAttribute"/> class.
            </summary>
            <param name="userFriendlyName">The user friendly name.</param>
        </member>
        <member name="P:ValidationFramework.EnumUserFriendlyNameAttribute.UserFriendlyName">
            <summary>
            Gets a value indicating the user friendly name of the <see langword="field"/>.
            </summary>
        </member>
        <member name="T:ValidationFramework.RuleDescriber">
            <summary>
            Provides access to all <see cref="T:ValidationFramework.Reflection.TypeDescriptor"/>s for an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RuleDescriber.GetPropertyRules(System.Reflection.Assembly)">
            <summary>
            Read all the <see cref="T:ValidationFramework.Reflection.TypeDescriptor"/>s for an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to read attributes from.</param>
            <returns>All the <see cref="T:ValidationFramework.Reflection.TypeDescriptor"/>s for an <see cref="T:System.Reflection.Assembly"/>.</returns>
        </member>
        <member name="M:ValidationFramework.RuleDescriber.GetMethodRules(System.Reflection.Assembly)">
            <summary>
            Read all the <see cref="T:ValidationFramework.Reflection.MethodDescriptor"/>s for an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to read attributes from.</param>
            <returns>All the <see cref="T:ValidationFramework.Reflection.MethodDescriptor"/>s for an <see cref="T:System.Reflection.Assembly"/>.</returns>
        </member>
        <member name="T:ValidationFramework.Reflection.TypeDescriptor">
            <summary>
            A light-weight wrapper for <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.Reflection.TypeDescriptor.#ctor(System.RuntimeTypeHandle)">
            <summary>
            Initialize a new instance of the <see cref="T:ValidationFramework.Reflection.TypeDescriptor"/> class.
            </summary>
            <param name="runtimeTypeHandle">The <see cref="T:System.RuntimeTypeHandle"/> for the <see cref="T:System.Type"/> to wrap.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="runtimeTypeHandle"/> is null.</exception>
        </member>
        <member name="M:ValidationFramework.Reflection.TypeDescriptor.GetOrCreatePropertyDescriptor(System.String)">
            <summary>
            Get or create a <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> for this <see cref="T:ValidationFramework.Reflection.TypeDescriptor"/>
            </summary>
            <remarks>If the <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> exists in <see cref="P:ValidationFramework.Reflection.TypeDescriptor.Properties"/> it will be returned; otherwise a new <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> will be created, added to <see cref="P:ValidationFramework.Reflection.TypeDescriptor.Properties"/>, and returned.</remarks>
            <param name="name">The name of the <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> to get or create.</param>
            <returns>The existing <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/>, if it exists in <see cref="P:ValidationFramework.Reflection.TypeDescriptor.Properties"/>; otherwise a new <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/>, that has been created and added to <see cref="P:ValidationFramework.Reflection.TypeDescriptor.Properties"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.Reflection.TypeDescriptor.RemovePropertyDescriptor(System.String)">
            <summary>
            Remove a <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> from <see cref="P:ValidationFramework.Reflection.TypeDescriptor.Properties"/>.
            </summary>
            <returns>true if the <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> is successfully found and removed; otherwise, false.</returns>
            <param name="name">The name of the <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.Reflection.TypeDescriptor.RemovePropertyDescriptor(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Remove a <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> from <see cref="P:ValidationFramework.Reflection.TypeDescriptor.Properties"/>.
            </summary>
            <returns>true if the <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> is successfully found and removed; otherwise, false.</returns>
            <param name="propertyDescriptor">The <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyDescriptor"/> is null.</exception>
        </member>
        <member name="M:ValidationFramework.Reflection.TypeDescriptor.GetOrCreateFieldDescriptor(System.String)">
            <summary>
            Get or create a <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/> for this <see cref="T:ValidationFramework.Reflection.TypeDescriptor"/>
            </summary>
            <remarks>If the <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/> exists in <see cref="P:ValidationFramework.Reflection.TypeDescriptor.Fields"/> it will be returned; otherwise a new <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/> will be created, added to <see cref="P:ValidationFramework.Reflection.TypeDescriptor.Fields"/>, and returned.</remarks>
            <param name="name">The name of the <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/> to get or create.</param>
            <returns>The existing <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/>, if it exists in <see cref="P:ValidationFramework.Reflection.TypeDescriptor.Fields"/>; otherwise a new <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/>, that has been created and added to <see cref="P:ValidationFramework.Reflection.TypeDescriptor.Fields"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.Reflection.TypeDescriptor.RemoveFieldDescriptor(System.String)">
            <summary>
            Remove a <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/> from <see cref="P:ValidationFramework.Reflection.TypeDescriptor.Fields"/>.
            </summary>
            <returns>true if the <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/> is successfully found and removed; otherwise, false.</returns>
            <param name="name">The name of the <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/> to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.Reflection.TypeDescriptor.RemoveFieldDescriptor(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Remove a <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/> from <see cref="P:ValidationFramework.Reflection.TypeDescriptor.Fields"/>.
            </summary>
            <returns>true if the <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/> is successfully found and removed; otherwise, false.</returns>
            <param name="fieldDescriptor">The <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/> to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldDescriptor"/> is null.</exception>
        </member>
        <member name="P:ValidationFramework.Reflection.TypeDescriptor.RuntimeTypeHandle">
            <summary>
            Gets the <see cref="T:System.RuntimeTypeHandle"/> for the <see cref="T:System.Type"/> this <see cref="T:ValidationFramework.Reflection.TypeDescriptor"/> wraps.
            </summary>
        </member>
        <member name="P:ValidationFramework.Reflection.TypeDescriptor.Properties">
            <summary>
            Get all the <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/>s for this <see cref="T:ValidationFramework.Reflection.TypeDescriptor"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.Reflection.TypeDescriptor.Fields">
            <summary>
            Get all the <see cref="T:ValidationFramework.Reflection.FieldDescriptor"/>s for this <see cref="T:ValidationFramework.Reflection.TypeDescriptor"/>.
            </summary>
        </member>
        <member name="T:ValidationFramework.RequiredFloatRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.RequiredRule`1"/>, that will check the existance of a <see cref="T:System.Single"/>, should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.RequiredRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.RequiredRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\RequiredValidators\RequiredFloatRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\RequiredValidators\RequiredFloatRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.RequiredFloatRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RequiredFloatRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RequiredFloatRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.RequiredFloatRuleAttribute.InitialValue">
            <summary>
            Gets or sets the initial and invalid value.
            </summary>
            <seealso cref="P:ValidationFramework.RequiredRule`1.InitialValue"/>
        </member>
        <member name="T:ValidationFramework.Configuration.LengthCollectionRuleConfigReader">
            <summary>
            A <see cref="T:ValidationFramework.Configuration.IRuleConfigReader"/> that creates a <see cref="T:ValidationFramework.LengthCollectionRule"/> from a <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
            <remarks>
              <see cref="T:ValidationFramework.Configuration.RuleData"/> for default attributes.
              <b>Extra Attributes</b>
              <ul>
                <li>
                  <c>excludeDuplicatesFromCount</c> (optional): Used to populate <see cref="P:ValidationFramework.LengthCollectionRule.ExcludeDuplicatesFromCount"/>.  
                </li>
                <li>
                  <c>minimum</c> (optional): Used to populate <see cref="P:ValidationFramework.LengthRule.Maximum"/>.   
                </li>
                <li>
                  <c>maximum</c> (required): Used to populate <see cref="P:ValidationFramework.LengthRule.Minimum"/>.   
                </li>
              </ul>
            </remarks>
            <example>
            <code lang="xml" title="This example shows an xml configuration for LengthCollectionRuleConfigReader">
            <rule errorMessage="hello" excludeDuplicatesFromCount="true" typeName="LengthCollectionRule" minimum="1" maximum="5"/>
            </code>
            </example>
            <seealso cref="T:ValidationFramework.LengthCollectionRule"/>
            <seealso cref="T:ValidationFramework.Configuration.ConfigurationService"/>
        </member>
        <member name="M:ValidationFramework.Configuration.LengthCollectionRuleConfigReader.ReadConfig(ValidationFramework.Configuration.RuleData,System.RuntimeTypeHandle)">
            <summary>
            Create a <see cref="T:ValidationFramework.Rule"/> from a <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
            <param name="ruleData">The <see cref="T:ValidationFramework.Configuration.RuleData"/> that represent the xml to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <param name="runtimeTypeHandle">The <see cref="T:System.RuntimeTypeHandle"/> for the <see cref="T:System.Type"/> to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <returns>A <see cref="T:ValidationFramework.Rule"/> that <paramref name="ruleData"/> represented</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ruleData"/> is null.</exception>
        </member>
        <member name="T:ValidationFramework.LengthCollectionRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.LengthCollectionRule"/> should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.LengthCollectionRule"/>
            <seealso cref="T:ValidationFramework.Configuration.LengthCollectionRuleConfigReader"/>
            <remarks>If <see cref="P:ValidationFramework.LengthCollectionRuleAttribute.ExcludeDuplicatesFromCount"/> is true then <see cref="M:System.Object.GetHashCode"/> is used to discard duplicates from the count. If the collection is null <see langword="true"/> will be returned. To validate for nulls use a <see cref="T:ValidationFramework.RequiredObjectRuleAttribute"/>.</remarks>
        </member>
        <member name="M:ValidationFramework.LengthCollectionRuleAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.LengthCollectionRuleAttribute"/> class.
            </summary>
            <param name="maximum">The maximum length allowed.</param>
        </member>
        <member name="M:ValidationFramework.LengthCollectionRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.LengthCollectionRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.LengthCollectionRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.LengthCollectionRuleAttribute.ExcludeDuplicatesFromCount">
            <summary>
            Gets or sets whether to exclude duplicates when calculating the length.
            </summary>
            <remarks>Setting this to <see langword="true"/> will decrease the performance of <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/></remarks>
            <seealso cref="P:ValidationFramework.LengthCollectionRule.ExcludeDuplicatesFromCount"/>
        </member>
        <member name="T:ValidationFramework.CustomValidationEventArgs">
            <summary>
            Provides data for a <see cref="P:ValidationFramework.CustomValidationEventArgs.CustomRule"/> to perform a <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. 
            </summary>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\CustomRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\CustomRuleAttributeSample.vb" lang="vbnet"/>
            </example>
            <seealso cref="T:ValidationFramework.CustomRuleAttribute"/>
            <seealso cref="P:ValidationFramework.CustomValidationEventArgs.CustomRule"/>
            <seealso cref="T:ValidationFramework.Configuration.CustomRuleConfigReader"/>
        </member>
        <member name="M:ValidationFramework.CustomValidationEventArgs.#ctor(ValidationFramework.CustomRule,System.Object,System.Object,System.Object)">
            <summary>
            Initialize a new instance of the <see cref="T:ValidationFramework.CustomValidationEventArgs"/> class.
            </summary>
            <param name="customRule">The <see cref="T:ValidationFramework.CustomRule"/> that has fired the validation.</param>
            <param name="targetObjectValue">The value of the object containing the member to validate.</param>
            <param name="targetMemberValue">The value of the member to validate.</param>
            <param name="context">An <see cref="T:System.Object"/> that contains data for the <see cref="T:ValidationFramework.Rule"/> to validate. The default is null.</param>
        </member>
        <member name="P:ValidationFramework.CustomValidationEventArgs.TargetObjectValue">
            <summary>
            Gets the value of the object containing the member to validate.
            </summary>
        </member>
        <member name="P:ValidationFramework.CustomValidationEventArgs.TargetMemberValue">
            <summary>
            The value of the member to validate.
            </summary>
        </member>
        <member name="P:ValidationFramework.CustomValidationEventArgs.CustomRule">
            <summary>
            Gets or sets <see cref="T:ValidationFramework.CustomRule"/> that has fired the validation.
            </summary>
        </member>
        <member name="P:ValidationFramework.CustomValidationEventArgs.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
        </member>
        <member name="P:ValidationFramework.CustomValidationEventArgs.IsValid">
            <summary>
            Gets or sets a <see lanword="bool"/> indicating if the validation succeeded.
            </summary>
        </member>
        <member name="P:ValidationFramework.CustomValidationEventArgs.Context">
            <summary>
            Gets the <see cref="T:System.Object"/> that contains data for the <see cref="T:ValidationFramework.Rule"/> being validated. The default is null.
            </summary>
        </member>
        <member name="T:ValidationFramework.Configuration.RequiredRuleConfigReader">
            <summary>
            A <see cref="T:ValidationFramework.Configuration.IRuleConfigReader"/> that creates a <see cref="T:ValidationFramework.RequiredRule`1"/> from a <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
            <remarks>
              <see cref="T:ValidationFramework.Configuration.RuleData"/> for default attributes.
              <b>Extra Attributes</b>
              <ul>
                <li>
                  <c>initialValue</c> (optional): Used to populate <see cref="P:ValidationFramework.RequiredRule`1.InitialValue"/>. Accepted formats for <see cref="T:System.DateTime"/> are "dd MMM yyyy HH:mm:ss.ff", "yyyy-MM-ddTHH:mm:ss", "dd MMM yyyy hh:mm tt", "dd MMM yyyy hh:mm:ss tt", "dd MMM yyyy HH:mm:ss", "dd MMM yyyy HH:mm" and "dd MMM yyyy" 
                </li>
              </ul>
            </remarks>
            <example>
            <code lang="xml" title="This example shows an xml configuration for RequiredRuleConfigReader">
            <rule errorMessage="hello" initialValue="10" typeName="RequiredRule"/>
            </code>
            </example>
            <seealso cref="T:ValidationFramework.RequiredRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.ConfigurationService"/>
        </member>
        <member name="M:ValidationFramework.Configuration.RequiredRuleConfigReader.ReadConfig(ValidationFramework.Configuration.RuleData,System.RuntimeTypeHandle)">
            <summary>
            Create a <see cref="T:ValidationFramework.Rule"/> from a <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
            <param name="ruleData">The <see cref="T:ValidationFramework.Configuration.RuleData"/> that represent the xml to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <param name="runtimeTypeHandle">The <see cref="T:System.RuntimeTypeHandle"/> for the <see cref="T:System.Type"/> to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <returns>A <see cref="T:ValidationFramework.Rule"/> that <paramref name="ruleData"/> represented</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ruleData"/> is null.</exception>
        </member>
        <member name="M:ValidationFramework.Web.ExtendedRequiredFieldValidator.OnPreRender(System.EventArgs)">
            <summary>
            Right before the control is going to render, I add my client-side validation script if the browser is capable of handling it.
            </summary>		
        </member>
        <member name="M:ValidationFramework.Web.ExtendedRequiredFieldValidator.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            Add extra attributes to the client-side html of the control if client-side validation is going to happen.
            </summary>		
        </member>
        <member name="M:ValidationFramework.Web.ExtendedRequiredFieldValidator.EvaluateIsValid">
            <summary>
            Override the server validation so it always returns <see langword="true"/>.
            </summary>
            <returns><see langword="true"/></returns>
        </member>
        <member name="P:ValidationFramework.Web.ExtendedRequiredFieldValidator.InitialValue">
            <summary>
            This is the equivalent of the RequiredFieldValidator's InitialValue
            property.
            </summary>
        </member>
        <member name="T:ValidationFramework.ParameterValidationManager">
            <summary>
            Handles the validation of method parameters.
            </summary>
            <example>
            <code source="Examples\ExampleLibraryCSharp\ParameterValidationManager\BasicSample.cs" title="This example shows how to validate the parameters of a method." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\ParameterValidationManager\BasicSample.vb" title="This example shows how to validate the parameters of a method." lang="vbnet"/>
            <code source="Examples\ExampleLibraryCSharp\ParameterValidationManager\ExplicitSample.cs" title="This example shows how to validate the parameters of a that is an explicit implementation of an interface." lang="cs"/>
            <code source="Examples\ExampleLibraryCSharp\ParameterValidationManager\InheritedFromInterfaceSample.cs" title="This example shows how to validate the parameters of a method by using attributes applied to an interface." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\ParameterValidationManager\InheritedFromInterfaceSample.vb" title="This example shows how to validate the parameters of a method by using attributes applied to an interface." lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.ParameterValidationManager.ThrowException(System.Object,System.RuntimeMethodHandle,System.String,System.Object[])">
            <summary>
            Validate the parameters of a method. An <see cref="T:System.ArgumentException"/> will be thrown on the first invalid parameter.
            </summary>
            <remarks>
            This should be used if you expect at lease one parameter to have <see cref="T:ValidationFramework.Rule"/>s applied to it. 
            This is usually the case if you are using attributes to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using code it may be more appropriate to call <see cref="M:ValidationFramework.ParameterValidationManager.TryThrowException(System.Object,System.RuntimeMethodHandle,System.String,System.Object,System.Object[])"/> 
            </remarks>
            <exception cref="T:System.ArgumentException">If any of the <paramref name="parameters"/> is invalid.</exception>
            <param name="target">The instance that the method exists on. Null for static types.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="parameters">The values of the parameters to validate. In the same order as they appear in the methods signature.</param>
            <param name="runtimeMethodHandle">The <see cref="T:System.RuntimeMethodHandle"/> that represents the method to be validated.</param>
            <example>
            <code source="Examples\ExampleLibraryCSharp\ParameterValidationManager\BasicSample.cs" title="This example shows how to validate the parameters of a method using a RuntimeMethodHandle." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\ParameterValidationManager\BasicSample.vb" title="This example shows how to validate the parameters of a method using a RuntimeMethodHandle" lang="vbnet"/>
            </example>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.ParameterValidationManager.TryThrowException(System.Object,System.RuntimeMethodHandle,System.String,System.Object[])">
            <summary>
            Validate the parameters of a method. An <see cref="T:System.ArgumentException"/> will be thrown on the first invalid parameter.
            </summary>
            <remarks>
            This should be used if you are not certain if the parameters will have <see cref="T:ValidationFramework.Rule"/>s applied to them. 
            This is usually the case if you are using code to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using attributes it may be more appropriate to call <see cref="M:ValidationFramework.ParameterValidationManager.ThrowException(System.Object,System.RuntimeMethodHandle,System.String,System.Object,System.Object[])"/> 
            </remarks>
            <exception cref="T:System.ArgumentException">If any of the <paramref name="parameters"/> is invalid.</exception>
            <param name="target">The instance that the method exists on. Null for static types.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="parameters">The values of the parameters to validate. In the same order as they appear in the methods signature.</param>
            <param name="runtimeMethodHandle">The <see cref="T:System.RuntimeMethodHandle"/> that represents the method to be validated.</param>
            <example>
            <code source="Examples\ExampleLibraryCSharp\ParameterValidationManager\BasicSample.cs" title="This example shows how to validate the parameters of a method using a RuntimeMethodHandle." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\ParameterValidationManager\BasicSample.vb" title="This example shows how to validate the parameters of a method using a RuntimeMethodHandle" lang="vbnet"/>
            </example>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.ParameterValidationManager.ThrowException(System.Object,System.RuntimeMethodHandle,System.String,System.Object,System.Object[])">
            <summary>
            Validate the parameters of a method. An <see cref="T:System.ArgumentException"/> will be thrown on the first invalid parameter.
            </summary>
            <remarks>
            This should be used if you expect at lease one parameter to have <see cref="T:ValidationFramework.Rule"/>s applied to it. 
            This is usually the case if you are using attributes to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using code it may be more appropriate to call <see cref="M:ValidationFramework.ParameterValidationManager.TryThrowException(System.Object,System.RuntimeMethodHandle,System.String,System.Object,System.Object[])"/> 
            </remarks>
            <exception cref="T:System.ArgumentException">If any of the <paramref name="parameters"/> is invalid.</exception>
            <param name="target">The instance that the method exists on. Null for static types.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="parameters">The values of the parameters to validate. In the same order as they appear in the methods signature.</param>
            <param name="runtimeMethodHandle">The <see cref="T:System.RuntimeMethodHandle"/> that represents the method to be validated.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <example>
            <code source="Examples\ExampleLibraryCSharp\ParameterValidationManager\BasicSample.cs" title="This example shows how to validate the parameters of a method using a RuntimeMethodHandle." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\ParameterValidationManager\BasicSample.vb" title="This example shows how to validate the parameters of a method using a RuntimeMethodHandle" lang="vbnet"/>
            </example>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.ParameterValidationManager.TryThrowException(System.Object,System.RuntimeMethodHandle,System.String,System.Object,System.Object[])">
            <summary>
            Validate the parameters of a method. An <see cref="T:System.ArgumentException"/> will be thrown on the first invalid parameter.
            </summary>
            <remarks>
            This should be used if you are not certain if the parameters will have <see cref="T:ValidationFramework.Rule"/>s applied to them. 
            This is usually the case if you are using code to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using attributes it may be more appropriate to call <see cref="M:ValidationFramework.ParameterValidationManager.ThrowException(System.Object,System.RuntimeMethodHandle,System.String,System.Object,System.Object[])"/>
            </remarks>
            <exception cref="T:System.ArgumentException">If any of the <paramref name="parameters"/> is invalid.</exception>
            <param name="target">The instance that the method exists on. Null for static types.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="parameters">The values of the parameters to validate. In the same order as they appear in the methods signature.</param>
            <param name="runtimeMethodHandle">The <see cref="T:System.RuntimeMethodHandle"/> that represents the method to be validated.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <example>
            <code source="Examples\ExampleLibraryCSharp\ParameterValidationManager\BasicSample.cs" title="This example shows how to validate the parameters of a method using a RuntimeMethodHandle." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\ParameterValidationManager\BasicSample.vb" title="This example shows how to validate the parameters of a method using a RuntimeMethodHandle" lang="vbnet"/>
            </example>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.ParameterValidationManager.ThrowException(System.Object,System.RuntimeMethodHandle,System.Object[])">
            <summary>
            Validate the parameters of a method. An <see cref="T:System.ArgumentException"/> will be thrown on the first invalid parameter.
            </summary>
            <remarks>
            This should be used if you expect at lease one parameter to have <see cref="T:ValidationFramework.Rule"/>s applied to it. 
            This is usually the case if you are using attributes to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using code it may be more appropriate to call <see cref="M:ValidationFramework.ParameterValidationManager.TryThrowException(System.Object,System.RuntimeMethodHandle,System.Object[])"/> 
            </remarks>
            <exception cref="T:System.ArgumentException">If any of the <paramref name="parameters"/> is invalid.</exception>
            <param name="target">The instance that the method exists on. Null for static types.</param>
            <param name="parameters">The values of the parameters to validate. In the same order as they appear in the methods signature.</param>
            <param name="runtimeMethodHandle">The <see cref="T:System.RuntimeMethodHandle"/> that represents the method to be validated.</param>
            <example>
            <code source="Examples\ExampleLibraryCSharp\ParameterValidationManager\BasicSample.cs" title="This example shows how to validate the parameters of a method using a RuntimeMethodHandle." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\ParameterValidationManager\BasicSample.vb" title="This example shows how to validate the parameters of a method using a RuntimeMethodHandle" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.ParameterValidationManager.TryThrowException(System.Object,System.RuntimeMethodHandle,System.Object[])">
            <summary>
            Validate the parameters of a method. An <see cref="T:System.ArgumentException"/> will be thrown on the first invalid parameter.
            </summary>
            <remarks>
            This should be used if you are not certain if the parameters will have <see cref="T:ValidationFramework.Rule"/>s applied to them. 
            This is usually the case if you are using code to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using attributes it may be more appropriate to call <see cref="M:ValidationFramework.ParameterValidationManager.ThrowException(System.Object,System.RuntimeMethodHandle,System.Object[])"/> 
            </remarks>
            <exception cref="T:System.ArgumentException">If any of the <paramref name="parameters"/> is invalid.</exception>
            <param name="target">The instance that the method exists on. Null for static types.</param>
            <param name="parameters">The values of the parameters to validate. In the same order as they appear in the methods signature.</param>
            <param name="runtimeMethodHandle">The <see cref="T:System.RuntimeMethodHandle"/> that represents the method to be validated.</param>
            <example>
            <code source="Examples\ExampleLibraryCSharp\ParameterValidationManager\BasicSample.cs" title="This example shows how to validate the parameters of a method using a RuntimeMethodHandle." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\ParameterValidationManager\BasicSample.vb" title="This example shows how to validate the parameters of a method using a RuntimeMethodHandle" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.ParameterValidationManager.Validate(System.Object,System.RuntimeMethodHandle,System.String,System.Object[])">
            <summary>
            Validate the parameters of a method.
            </summary>
            <remarks>
            This should be used if you expect at lease one parameter to have <see cref="T:ValidationFramework.Rule"/>s applied to it. 
            This is usually the case if you are using attributes to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using code it may be more appropriate to call <see cref="M:ValidationFramework.ParameterValidationManager.TryValidate(System.Object,System.RuntimeMethodHandle,System.String,System.Object,System.Object[])"/> 
            </remarks>
            <param name="target">The instance that the method exists on. Null for static types.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="parameters">The values of the parameters to validate. In the same order as they appear in the methods signature.</param>
            <param name="runtimeMethodHandle">The <see cref="T:System.RuntimeMethodHandle"/> that represents the method to be validated.</param>
            <returns>A <see cref="T:System.Collections.Generic.IList`1"/> containing all <see cref="T:ValidationFramework.ValidationResult"/>s for invalid parameters.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.ParameterValidationManager.TryValidate(System.Object,System.RuntimeMethodHandle,System.String,System.Object[])">
            <summary>
            Validate the parameters of a method.
            </summary>
            <remarks>
            This should be used if you are not certain if the parameters will have <see cref="T:ValidationFramework.Rule"/>s applied to them. 
            This is usually the case if you are using code to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using attributes it may be more appropriate to call <see cref="M:ValidationFramework.ParameterValidationManager.Validate(System.Object,System.RuntimeMethodHandle,System.String,System.Object,System.Object[])"/>
            </remarks>
            <param name="target">The instance that the method exists on. Null for static types.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="parameters">The values of the parameters to validate. In the same order as they appear in the methods signature.</param>
            <param name="runtimeMethodHandle">The <see cref="T:System.RuntimeMethodHandle"/> that represents the method to be validated.</param>
            <returns>A <see cref="T:System.Collections.Generic.IList`1"/> containing all <see cref="T:ValidationFramework.ValidationResult"/>s for invalid parameters.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.ParameterValidationManager.Validate(System.Object,System.RuntimeMethodHandle,System.String,System.Object,System.Object[])">
            <summary>
            Validate the parameters of a method.
            </summary>
            <remarks>
            This should be used if you expect at lease one parameter to have <see cref="T:ValidationFramework.Rule"/>s applied to it. 
            This is usually the case if you are using attributes to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using code it may be more appropriate to call <see cref="M:ValidationFramework.ParameterValidationManager.TryValidate(System.Object,System.RuntimeMethodHandle,System.String,System.Object,System.Object[])"/> 
            </remarks>
            <param name="target">The instance that the method exists on. Null for static types.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="parameters">The values of the parameters to validate. In the same order as they appear in the methods signature.</param>
            <param name="runtimeMethodHandle">The <see cref="T:System.RuntimeMethodHandle"/> that represents the method to be validated.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <returns>A <see cref="T:System.Collections.Generic.IList`1"/> containing all <see cref="T:ValidationFramework.ValidationResult"/>s for invalid parameters.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.ParameterValidationManager.TryValidate(System.Object,System.RuntimeMethodHandle,System.String,System.Object,System.Object[])">
            <summary>
            Validate the parameters of a method.
            </summary>
            <remarks>
            This should be used if you are not certain if the parameters will have <see cref="T:ValidationFramework.Rule"/>s applied to them. 
            This is usually the case if you are using code to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using attributes it may be more appropriate to call <see cref="M:ValidationFramework.ParameterValidationManager.Validate(System.Object,System.RuntimeMethodHandle,System.String,System.Object,System.Object[])"/> 
            </remarks>
            <param name="target">The instance that the method exists on. Null for static types.</param>
            <param name="ruleSet">The rule set to validate. Use null to validate all rules. Is converted to uppercase.</param>
            <param name="parameters">The values of the parameters to validate. In the same order as they appear in the methods signature.</param>
            <param name="runtimeMethodHandle">The <see cref="T:System.RuntimeMethodHandle"/> that represents the method to be validated.</param>
            <param name="context">An <see cref="T:System.Object"/> to pass as the context parameter when calling <see cref="M:ValidationFramework.Rule.Validate(System.Object,System.Object,System.Object)"/>. Use a null for a non value.</param>
            <returns>A <see cref="T:System.Collections.Generic.IList`1"/> containing all <see cref="T:ValidationFramework.ValidationResult"/>s for invalid parameters.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.ParameterValidationManager.Validate(System.Object,System.RuntimeMethodHandle,System.Object[])">
            <summary>
            Validate the parameters of a method.
            </summary>
            <remarks>
            This should be used if you expect at lease one parameter to have <see cref="T:ValidationFramework.Rule"/>s applied to it. 
            This is usually the case if you are using attributes to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using code it may be more appropriate to call <see cref="M:ValidationFramework.ParameterValidationManager.TryValidate(System.Object,System.RuntimeMethodHandle,System.Object[])"/> 
            </remarks>
            <param name="target">The instance that the method exists on. Null for static types.</param>
            <param name="parameters">The values of the parameters to validate. In the same order as they appear in the methods signature.</param>
            <param name="runtimeMethodHandle">The <see cref="T:System.RuntimeMethodHandle"/> that represents the method to be validated.</param>
            <returns>A <see cref="T:System.Collections.Generic.IList`1"/> containing all <see cref="T:ValidationFramework.ValidationResult"/>s for invalid parameters.</returns>
        </member>
        <member name="M:ValidationFramework.ParameterValidationManager.TryValidate(System.Object,System.RuntimeMethodHandle,System.Object[])">
            <summary>
            Validate the parameters of a method.
            </summary>
            <remarks>
            This should be used if you are not certain if the parameters will have <see cref="T:ValidationFramework.Rule"/>s applied to them. 
            This is usually the case if you are using code to apply <see cref="T:ValidationFramework.Rule"/>s. 
            If <see cref="T:ValidationFramework.Rule"/>s are being assigned using attributes it may be more appropriate to call <see cref="M:ValidationFramework.ParameterValidationManager.Validate(System.Object,System.RuntimeMethodHandle,System.Object[])"/>
            </remarks>
            <param name="target">The instance that the method exists on. Null for static types.</param>
            <param name="parameters">The values of the parameters to validate. In the same order as they appear in the methods signature.</param>
            <param name="runtimeMethodHandle">The <see cref="T:System.RuntimeMethodHandle"/> that represents the method to be validated.</param>
            <returns>A <see cref="T:System.Collections.Generic.IList`1"/> containing all <see cref="T:ValidationFramework.ValidationResult"/>s for invalid parameters.</returns>
        </member>
        <member name="T:ValidationFramework.Configuration.KeyedCultureErrorMessageProvider">
            <summary>
            An <see cref="T:ValidationFramework.Configuration.IErrorMessageProvider"/> that uses the current culture to determine error messages.
            </summary>
        </member>
        <member name="T:ValidationFramework.Configuration.IErrorMessageProvider">
            <summary>
            Defines the signature for retrieving an error message.
            </summary>
        </member>
        <member name="M:ValidationFramework.Configuration.IErrorMessageProvider.RetrieveErrorMessage(ValidationFramework.Rule,System.Object,System.Object,System.Object)">
            <summary>
            Retrieve an error message.
            </summary>
            <param name="rule">The <see cref="T:ValidationFramework.Rule"/> that is requesting the error message.</param>
            <param name="targetObjectValue">The value of the object containing the member to validate.</param>
            <param name="targetMemberValue">The value of the member to validate.</param>
            <param name="context">An <see cref="T:System.Object"/> that contains data for the <see cref="T:ValidationFramework.Rule"/> to validate.</param>
            <returns>An error message.</returns>
            <remarks>
            Note: <see cref="T:ValidationFramework.Web.PropertyValidatorGeneratorControl"/> is client server in nature. Due to the this limitation when <see cref="M:ValidationFramework.Web.ISupportWebClientValidation.CreateWebClientValidators"/> is called only <paramref name="rule"/> will be passed through when populating <see cref="P:System.Web.UI.WebControls.BaseValidator.ErrorMessage"/>. All other parameters (<paramref name="targetObjectValue"/>, <paramref name="targetMemberValue"/> and <paramref name="context"/>) will be null. Server validation however will pass through all parameters.
            </remarks>
        </member>
        <member name="M:ValidationFramework.Configuration.KeyedCultureErrorMessageProvider.RetrieveErrorMessage(ValidationFramework.Rule,System.Object,System.Object,System.Object)">
            <summary>
            Retrieve an error message.
            </summary>
            <param name="rule">The <see cref="T:ValidationFramework.Rule"/> that is requesting the error message.</param>
            <param name="targetObjectValue">The value of the object containing the member to validate.</param>
            <param name="targetMemberValue">The value of the member to validate.</param>
            <param name="context">An <see cref="T:System.Object"/> that contains data for the <see cref="T:ValidationFramework.Rule"/> to validate.</param>
            <returns>An error message.</returns>
        </member>
        <member name="P:ValidationFramework.Configuration.KeyedCultureErrorMessageProvider.MessageGroups">
            <summary>
            Gets or sets the array of <see cref="T:ValidationFramework.Configuration.MessageGroup"/>s for the <see cref="T:ValidationFramework.Configuration.KeyedCultureErrorMessageProvider"/>.
            </summary>
        </member>
        <member name="T:ValidationFramework.Configuration.TypeData">
            <summary>
            An object representation of the validation configuration for an overload type.
            </summary>
            <remarks>Used to identify methods that have overloads.</remarks>
            <exclude/>
            <seealso cref="T:ValidationFramework.Configuration.ConfigurationService"/>
        </member>
        <member name="P:ValidationFramework.Configuration.TypeData.TypeName">
            <summary>
            Gets or sets the name of the <see cref="T:System.Type"/> that this <see cref="T:ValidationFramework.Configuration.TypeData"/> represents.
            </summary>
        </member>
        <member name="T:ValidationFramework.DateTimeConverter">
            <summary>
            Converts between <see cref="T:System.DateTime"/>s and <see langword="string"/>s.
            </summary>
            <remarks>Accepted formats for parsing are "dd MMM yyyy HH:mm:ss.ff", "yyyy-MM-ddTHH:mm:ss", "dd MMM yyyy hh:mm tt", "dd MMM yyyy hh:mm:ss tt", "dd MMM yyyy HH:mm:ss", "dd MMM yyyy HH:mm" and "dd MMM yyyy".</remarks>
        </member>
        <member name="F:ValidationFramework.DateTimeConverter.DateTimeFormat">
            <summary>
            The default format used by <see cref="M:ValidationFramework.DateTimeConverter.ToString(System.DateTime)"/> and <see cref="M:ValidationFramework.DateTimeConverter.ToString(System.Nullable{System.DateTime})"/>.
            </summary>
        </member>
        <member name="F:ValidationFramework.DateTimeConverter.parseFormats">
            <summary>
            The supported formats used to parse strings.
            </summary>
        </member>
        <member name="M:ValidationFramework.DateTimeConverter.Parse(System.String)">
            <summary>
            Converts the specified string representation of a date and time to its <see cref="T:System.DateTime"/> equivalent. 
            </summary>
            <remarks>
            Accepted formats for parsing are "dd MMM yyyy HH:mm:ss.ff", "yyyy-MM-ddTHH:mm:ss", "dd MMM yyyy hh:mm tt", "dd MMM yyyy hh:mm:ss tt", "dd MMM yyyy HH:mm:ss", "dd MMM yyyy HH:mm" and "dd MMM yyyy". <see cref="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)"/> is used to attempt to parse <paramref name="s"/>.
            </remarks>
            <param name="s">A string containing a date and (optionally) time to convert.</param>
            <returns>A <see cref="T:System.DateTime"/> equivalent to the date and time contained in <paramref name="s"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="s"/> cannot be parsed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="s"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.DateTimeConverter.ParseNullable(System.String)">
            <summary>
            Converts the specified string representation of a date and time to its <see cref="T:System.Nullable"/> <see cref="T:System.DateTime"/> equivalent. 
            </summary>
            <param name="s">A string containing a date and (optionally) time to convert.</param>
            <returns><see langword="null"/> if <paramref name="s"/> is <see cref="M:System.String.IsNullOrEmpty(System.String)"/>; otherwise the value returned from <see cref="M:ValidationFramework.DateTimeConverter.Parse(System.String)"/>.</returns>
        </member>
        <member name="M:ValidationFramework.DateTimeConverter.ToString(System.DateTime)">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to its equivalent string representation. 
            </summary>
            <param name="dateTime">The <see cref="T:System.DateTime"/> to convert.</param>
            <returns>A string representation <paramref name="dateTime"/>.</returns>
        </member>
        <member name="M:ValidationFramework.DateTimeConverter.ToString(System.Nullable{System.DateTime})">
            <summary>
            Converts a <see cref="T:System.Nullable"/> <see cref="T:System.DateTime"/> to its equivalent string representation. 
            </summary>
            <param name="dateTime">The <see cref="T:System.Nullable"/> <see cref="T:System.DateTime"/> to convert.</param>
            <returns><see langword="null"/> if A string representation <paramref name="dateTime"/>.</returns>
        </member>
        <member name="T:ValidationFramework.Reflection.TypeCache">
            <summary>
            Provides an in memory cache of <see cref="T:ValidationFramework.Reflection.TypeDescriptor"/>s.
            </summary>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Reflection\TypeCacheSample.cs" title="The following example shows how to programmatically add validation Rules to a property." lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Reflection\TypeCacheSample.vb" title="The following example shows how to programmatically add validation Rules to a property." lang="vbnet"/>
            <code source="Examples\ExampleLibraryCSharp\Reflection\AddCustomRuleWithTypeCacheSample.cs" lang="cs" title="This example shows how to progromatically add a CustomRule to a property."/>
            <code source="Examples\ExampleLibraryVB\Reflection\AddCustomRuleWithTypeCacheSample.vb" lang="vbnet" title="This example shows how to progromatically add a CustomRule to a property."/>
            </example>
        </member>
        <member name="M:ValidationFramework.Reflection.TypeCache.Clear">
            <summary>
            Clear all <see cref="T:ValidationFramework.Reflection.TypeDescriptor"/>s from <see cref="T:ValidationFramework.Reflection.TypeCache"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.Reflection.TypeCache.GetType(System.RuntimeTypeHandle)">
            <summary>
            Get, and adds to the cache, a <see cref="T:ValidationFramework.Reflection.TypeDescriptor"/> for a <see cref="T:System.RuntimeTypeHandle"/>. 
            </summary>
            <param name="runtimeTypeHandle">The <see cref="T:System.RuntimeTypeHandle"/> for which to get the <see cref="T:ValidationFramework.Reflection.TypeDescriptor"/>.</param>
            <returns>A <see cref="T:ValidationFramework.Reflection.TypeDescriptor"/> corresponding  to <paramref name="runtimeTypeHandle"/>.</returns>
        </member>
        <member name="M:ValidationFramework.Reflection.TypeCache.GetRulesForProperty``2(System.String)">
            <summary>
            A helper method that gets all <see cref="T:ValidationFramework.Rule"/>s of a specific type for a property on an object.
            </summary>
            <remarks>
            If performance is a concern it is better to call <see cref="M:ValidationFramework.Reflection.TypeCache.GetRulesForProperty``1(System.String,System.RuntimeTypeHandle)"/>.
            </remarks>
            <typeparam name="TRule">The type of <see cref="T:ValidationFramework.Rule"/> to retrieve.</typeparam>
            <typeparam name="TTarget">The target type to to retrieve attributes from.</typeparam>
            <param name="propertyName">The name of the property to get the <see cref="T:ValidationFramework.Rule"/>s from.</param>
            <returns>A <see cref="T:System.Collections.Generic.IList`1"/> containing all <see cref="T:ValidationFramework.Rule"/>s for the specified property.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.Reflection.TypeCache.GetRulesForProperty``1(System.String,System.RuntimeTypeHandle)">
            <summary>
            A helper method that gets all <see cref="T:ValidationFramework.Rule"/>s for a property on an object.
            </summary>
            <typeparam name="TRule">The type of <see cref="T:ValidationFramework.Rule"/> to retrieve.</typeparam>
            <param name="propertyName">The name of the property to get the <see cref="T:ValidationFramework.Rule"/>s from.</param>
            <param name="runtimeTypeHandle">The <see cref="T:System.RuntimeTypeHandle"/> representing the type to get the <see cref="T:ValidationFramework.Rule"/>s from.</param>
            <returns>A <see cref="T:System.Collections.Generic.IList`1"/> containing all <see cref="T:ValidationFramework.Rule"/>s for the specified property.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="T:ValidationFramework.ValidatableCollection`1">
            <summary>
            A strongly typed collection of <see cref="T:ValidationFramework.IValidatable"/> objects.
            </summary>
            <remarks>
            Allows the all items in the collection to be easily validated.
            </remarks>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="P:ValidationFramework.ValidatableCollection`1.IsValid">
            <summary>
            Check to see if each item is valid.
            </summary>
            <remarks>
            Even if an invalid item is found, continue to check for the rest of the items so that all error messages can be accumulated.
            </remarks>
        </member>
        <member name="P:ValidationFramework.ValidatableCollection`1.ErrorMessages">
            <summary>
            Gets a <see see="IList{T}"/> of <see langword="string"/>s that contain all the <see cref="P:ValidationFramework.Rule.ErrorMessage"/>s for all the <see cref="T:ValidationFramework.Rule"/>s.
            </summary>
        </member>
        <member name="T:ValidationFramework.Web.RegularExpressionWebValidatorEx">
            <summary>
            A custom <see cref="T:System.Web.UI.WebControls.RegularExpressionValidator"/> that does not perform any server validation.
            </summary>
        </member>
        <member name="M:ValidationFramework.Web.RegularExpressionWebValidatorEx.EvaluateIsValid">
            <summary>
            Overrides <see cref="M:System.Web.UI.WebControls.RegularExpressionValidator.EvaluateIsValid"/> to always return <see langword="true"/>.
            </summary>
            <returns><see langword="true"/></returns>
        </member>
        <member name="T:ValidationFramework.Web.RangeWebValidatorEx">
            <summary>
            A custom <see cref="T:System.Web.UI.WebControls.RangeValidator"/> that does not perform any server validation.
            </summary>
        </member>
        <member name="M:ValidationFramework.Web.RangeWebValidatorEx.EvaluateIsValid">
            <summary>
            Overrides <see cref="M:System.Web.UI.WebControls.CompareValidator.EvaluateIsValid"/> to always return <see langword="true"/>.
            </summary>
            <returns><see langword="true"/></returns>
        </member>
        <member name="T:ValidationFramework.RequiredBoolRule">
            <summary>
            Performs a required field validation on a <see langword="bool"/>.
            </summary>
            <seealso cref="T:ValidationFramework.Configuration.RequiredBoolRuleConfigReader"/>
            <seealso cref="T:ValidationFramework.RequiredBoolRuleAttribute"/>
        </member>
        <member name="M:ValidationFramework.RequiredBoolRule.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:ValidationFramework.RequiredBoolRule"/> class.
            </summary>
            <remarks>
            The following are defaulted
            <list type="bullet">
            <item>
            <see cref="P:ValidationFramework.Rule.ErrorMessage"/> to the default error message.
            </item>
            <item>
            <see cref="P:ValidationFramework.Rule.RuleSet"/> to null.
            </item>
            </list>	
            </remarks>
        </member>
        <member name="M:ValidationFramework.RequiredBoolRule.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:ValidationFramework.RequiredBoolRule"/> class.
            </summary>
            <remarks>
            The following are defaulted
            <list type="bullet">
            <item>
            <see cref="P:ValidationFramework.Rule.RuleSet"/> to null.
            </item>
            </list>	
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="errorMessage"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.RequiredBoolRule.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initialises a new instance of the <see cref="T:ValidationFramework.RequiredBoolRule"/> class.
            </summary>
            <param name="errorMessage">The error message for this rule. Pass a null to use the the default value.</param>
            <param name="ruleSet">A <see cref="T:System.String"/> used to group <see cref="T:ValidationFramework.Rule"/>s. Use a null to indicate no grouping.</param>
            <param name="useErrorMessageProvider"><c>true</c> to use <see cref="P:ValidationFramework.Configuration.ConfigurationService.ErrorMessageProvider"/> when determining the error message for this <see cref="T:ValidationFramework.Rule"/>; otherwise <c>false</c>.</param>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorMessage"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.RequiredBoolRule.Validate(System.Object,System.Object,System.Object)">
            <summary>
            Validate the member this <see cref="T:ValidationFramework.Rule"/> is applied to.
            </summary>
            <returns><see langword="true"/> if the member is valid; otherwise <see langword="false"/>.</returns>
            <param name="targetObjectValue">The value of the object containing the member to validate.</param>
            <param name="targetMemberValue">The value of the member to validate.</param>
            <param name="context">An <see cref="T:System.Object"/> that contains data for the <see cref="T:ValidationFramework.Rule"/> to validate. The default is null.</param>
        </member>
        <member name="T:ValidationFramework.Configuration.RequiredStringRuleConfigReader">
            <summary>
            A <see cref="T:ValidationFramework.Configuration.IRuleConfigReader"/> that creates a <see cref="T:ValidationFramework.RequiredStringRule"/> from a <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
            <remarks>
              <see cref="T:ValidationFramework.Configuration.RuleData"/> for default attributes.
              <b>Extra Attributes</b>
              <ul>
                <li>
                  <c>initialValue</c> (optional): Used to populate <see cref="P:ValidationFramework.RequiredRule`1.InitialValue"/>.   
                </li>
              </ul>
            </remarks>
            <example>
            <code lang="xml" title="This example shows an xml configuration for RequiredStringRuleConfigReader">
            <rule errorMessage="hello" typeName="RequiredStringRule" initialValue="hello2" trimWhiteSpace="false"/>
            </code>
            </example>
            <seealso cref="T:ValidationFramework.RequiredStringRule"/>
            <seealso cref="T:ValidationFramework.Configuration.ConfigurationService"/>
        </member>
        <member name="M:ValidationFramework.Configuration.RequiredStringRuleConfigReader.ReadConfig(ValidationFramework.Configuration.RuleData,System.RuntimeTypeHandle)">
            <summary>
            Create a <see cref="T:ValidationFramework.Rule"/> from a <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
            <param name="ruleData">The <see cref="T:ValidationFramework.Configuration.RuleData"/> that represent the xml to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <param name="runtimeTypeHandle">The <see cref="T:System.RuntimeTypeHandle"/> for the <see cref="T:System.Type"/> to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <returns>A <see cref="T:ValidationFramework.Rule"/> that <paramref name="ruleData"/> represented</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ruleData"/> is null.</exception>
        </member>
        <member name="T:ValidationFramework.Configuration.RequiredEnumRuleConfigReader">
            <summary>
            A <see cref="T:ValidationFramework.Configuration.IRuleConfigReader"/> that creates a <see cref="T:ValidationFramework.RequiredRule`1"/> from a <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
            <remarks>
              <see cref="T:ValidationFramework.Configuration.RuleData"/> for default attributes.
              <b>Extra Attributes</b>
              <ul>
                <li>
                  <c>initialValue</c> (optional): Used to populate <see cref="P:ValidationFramework.RequiredRule`1.InitialValue"/>.   
                </li>
              </ul>
            </remarks>
            <example>
            <code lang="xml" title="This example shows an xml configuration for RequiredEnumRuleConfigReader">
            <rule errorMessage="hello" initialValue="One" typeName="RequiredEnumRule"/>
            </code>
            </example>
            <seealso cref="T:ValidationFramework.RequiredRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.ConfigurationService"/>
        </member>
        <member name="M:ValidationFramework.Configuration.RequiredEnumRuleConfigReader.ReadConfig(ValidationFramework.Configuration.RuleData,System.RuntimeTypeHandle)">
            <summary>
            Create a <see cref="T:ValidationFramework.Rule"/> from a <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
            <param name="ruleData">The <see cref="T:ValidationFramework.Configuration.RuleData"/> that represent the xml to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <param name="runtimeTypeHandle">The <see cref="T:System.RuntimeTypeHandle"/> for the <see cref="T:System.Type"/> to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <returns>A <see cref="T:ValidationFramework.Rule"/> that <paramref name="ruleData"/> represented</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ruleData"/> is null.</exception>
        </member>
        <member name="T:ValidationFramework.Configuration.RequiredBoolRuleConfigReader">
            <summary>
            A <see cref="T:ValidationFramework.Configuration.IRuleConfigReader"/> that creates a <see cref="T:ValidationFramework.RequiredBoolRule"/> from a <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
            <remarks>
            <see cref="T:ValidationFramework.Configuration.RuleData"/> for default attributes.
              No extra elements or attributes.
            </remarks>
            <example>
            <code lang="xml" title="This example shows an xml configuration for RequiredBoolRuleConfigReader">
            <rule errorMessage="hello" typeName="RequiredBoolRule"/>
            </code>
            </example>
            <seealso cref="T:ValidationFramework.RequiredBoolRule"/>
            <seealso cref="T:ValidationFramework.Configuration.ConfigurationService"/>
        </member>
        <member name="M:ValidationFramework.Configuration.RequiredBoolRuleConfigReader.ReadConfig(ValidationFramework.Configuration.RuleData,System.RuntimeTypeHandle)">
            <summary>
            Create a <see cref="T:ValidationFramework.Rule"/> from a <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
            <param name="ruleData">The <see cref="T:ValidationFramework.Configuration.RuleData"/> that represent the xml to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <param name="runtimeTypeHandle">The <see cref="T:System.RuntimeTypeHandle"/> for the <see cref="T:System.Type"/> to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <returns>A <see cref="T:ValidationFramework.Rule"/> that <paramref name="ruleData"/> represented</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ruleData"/> is null.</exception>
        </member>
        <member name="T:ValidationFramework.RequiredEnumRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.RequiredRule`1"/>, that validates and enum, should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.RequiredRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.RequiredRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\RequiredValidators\RequiredEnumRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\RequiredValidators\RequiredEnumRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.RequiredEnumRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RequiredEnumRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RequiredEnumRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.RequiredEnumRuleAttribute.InitialValue">
            <summary>
            Gets or sets the initial and invalid value.
            </summary>
            <seealso cref="P:ValidationFramework.RequiredRule`1.InitialValue"/>
        </member>
        <member name="T:ValidationFramework.RequiredByteRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.RequiredRule`1"/>, that will check the existance of a <see cref="T:System.Byte"/>, should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.RequiredRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.RequiredRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\RequiredValidators\RequiredByteRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\RequiredValidators\RequiredByteRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.RequiredByteRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RequiredByteRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RequiredByteRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.RequiredByteRuleAttribute.InitialValue">
            <summary>
            Gets or sets the initial and invalid value.
            </summary>
            <seealso cref="P:ValidationFramework.RequiredRule`1.InitialValue"/>
        </member>
        <member name="T:ValidationFramework.LengthValidationHelper">
            <summary>
            Static class for all LengthValidation methods. 
            </summary>
        </member>
        <member name="T:ValidationFramework.ComparePropertyRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.ComparePropertyRule"/> should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.ComparePropertyRule"/>
            <seealso cref="T:ValidationFramework.Configuration.ComparePropertyRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\CompareValidators\ComparePropertyRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\CompareValidators\ComparePropertyRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.ComparePropertyRuleAttribute.#ctor(System.String,ValidationFramework.CompareOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.CompareByteRuleAttribute"/> class.
            </summary>
            <param name="operator">The comparison operation to perform.</param>
            <param name="propertyToCompare">The property to compare with.</param>
        </member>
        <member name="M:ValidationFramework.ComparePropertyRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.ComparePropertyRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.ComparePropertyRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.ComparePropertyRuleAttribute.PropertyToCompare">
            <summary>
            Gets the value to compare.
            </summary>
            <seealso cref="P:ValidationFramework.ComparePropertyRule.PropertyToCompare"/>
        </member>
        <member name="T:ValidationFramework.CompareIntRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.CompareRule`1"/>, that will compare a <see cref="T:System.Int32"/>, should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.CompareRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.CompareRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\CompareValidators\CompareIntRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\CompareValidators\CompareIntRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.CompareIntRuleAttribute.#ctor(System.Int32,ValidationFramework.CompareOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.CompareIntRuleAttribute"/> class.
            </summary>
            <param name="operator">The comparison operation to perform.</param>
            <param name="valueToCompare">The value to compare with.</param>
        </member>
        <member name="M:ValidationFramework.CompareIntRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.CompareIntRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.CompareIntRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.CompareIntRuleAttribute.ValueToCompare">
            <summary>
            Gets the value to compare.
            </summary>
            <seealso cref="P:ValidationFramework.CompareRule`1.ValueToCompare"/>
        </member>
        <member name="T:ValidationFramework.CompareByteRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.CompareRule`1"/>, that will compare a <see cref="T:System.Byte"/>, should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.CompareRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.CompareRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\CompareValidators\CompareByteRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\CompareValidators\CompareByteRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.CompareByteRuleAttribute.#ctor(System.Byte,ValidationFramework.CompareOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.CompareByteRuleAttribute"/> class.
            </summary>
            <param name="operator">The comparison operation to perform.</param>
            <param name="valueToCompare">The value to compare with.</param>
        </member>
        <member name="M:ValidationFramework.CompareByteRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.CompareByteRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.CompareByteRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.CompareByteRuleAttribute.ValueToCompare">
            <summary>
            Gets the value to compare.
            </summary>
            <seealso cref="P:ValidationFramework.CompareRule`1.ValueToCompare"/>
        </member>
        <member name="T:ValidationFramework.Configuration.MethodData">
            <summary>
            An object representation of the validation configuration for a method.
            </summary>
            <exclude/>
            <seealso cref="T:ValidationFramework.Configuration.ConfigurationService"/>
        </member>
        <member name="P:ValidationFramework.Configuration.MethodData.Name">
            <summary>
            Gets or sets name of the method this <see cref="T:ValidationFramework.Configuration.MethodData"/> represents.
            </summary>
        </member>
        <member name="P:ValidationFramework.Configuration.MethodData.Parameters">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:ValidationFramework.Configuration.ParameterData"/>s that represent the parameters to be validate.
            </summary>
            <remarks>The <see cref="T:ValidationFramework.Configuration.ParameterData"/>s will be converted to <see cref="T:ValidationFramework.Reflection.ParameterDescriptor"/>s.</remarks>
        </member>
        <member name="P:ValidationFramework.Configuration.MethodData.OverloadTypes">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:ValidationFramework.Configuration.TypeData"/>s that are used to uniquely identify overloads of a method.
            </summary>
        </member>
        <member name="T:ValidationFramework.Configuration.ConfigurationService">
            <summary>
            Allow the addition of <see cref="T:ValidationFramework.Rule"/>s via xml.
            </summary>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Configuration\ConfigurationServiceSample.cs" title="The following example shows how to programmatically add Rules via an embedded resource." lang="cs"/>
            <code source="Examples\ExampleLibraryCSharp\Configuration\ValidatableClass.validation.xml" title="This C# example assumes there is an embedded resource, named 'ValidatableClass.validation.xml' in the current Assembly, containing the following xml." lang="xml"/>
            <code source="Examples\ExampleLibraryVB\Configuration\ConfigurationServiceSample.vb" title="The following example shows how to programmatically add Rules via an embedded resource." lang="vbnet"/>
            <code source="Examples\ExampleLibraryVB\Configuration\ValidatableClass.validation.xml" title="This VB example assumes there is an embedded resource, named 'ValidatableClass.validation.xml' in the current Assembly, containing the following xml." lang="xml"/>
            </example>
        </member>
        <member name="F:ValidationFramework.Configuration.ConfigurationService.ValidationDefinitionsSchemaXMLNS">
            <summary>
            The XML Namespace for the validation-mapping. ("urn:validationFramework-validationDefinition-1.5")
            </summary>
        </member>
        <member name="M:ValidationFramework.Configuration.ConfigurationService.Initialize">
            <summary>
            Initializes the <see cref="T:ValidationFramework.Configuration.ConfigurationService"/>.
            </summary>
            <remarks>
            Retrieves <see cref="T:ValidationFramework.Configuration.ValidationConfigurationSection"/>from the current application's default configuration. 
            For that <see cref="T:ValidationFramework.Configuration.ValidationConfigurationSection"/> it does the following.
            <list type="bullet">
            <item>
            Configures <see cref="P:ValidationFramework.Configuration.ConfigurationService.ErrorMessageProvider"/> base on <see cref="P:ValidationFramework.Configuration.ValidationConfigurationSection.ErrorMessageProvider"/>.
            </item>
            <item>
            Goes through each <see cref="P:ValidationFramework.Configuration.ValidationConfigurationSection.MappingDocuments"/> and calls <see cref="M:ValidationFramework.Configuration.ConfigurationService.AddUrl(System.String)"/> for each <see cref="P:ValidationFramework.Configuration.MappingDocumentElement.Url"/>.
            </item>
            </list>
            Calling this only performs these action on the first call. Each successive call will be ignored.
            If this method is called simultaneous on two different threads one thread will obtain a lock and the other thread will have to wait. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">Any <see cref="P:ValidationFramework.Configuration.MappingDocumentElement.Url"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Any <see cref="P:ValidationFramework.Configuration.MappingDocumentElement.Url"/>  is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Any <see cref="P:ValidationFramework.Configuration.MappingDocumentElement.Url"/>  cannot be found.</exception>
            <exception cref="T:System.Net.WebException">The remote filename, defined by Any <see cref="P:ValidationFramework.Configuration.MappingDocumentElement.Url"/>, cannot be resolved.-or-An error occurred while processing the request.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Part of the filename or directory cannot be found.</exception>
            <exception cref="T:System.UriFormatException">Any <see cref="P:ValidationFramework.Configuration.MappingDocumentElement.Url"/> is not a valid URI.</exception>
        </member>
        <member name="M:ValidationFramework.Configuration.ConfigurationService.AddXmlFile(System.IO.FileInfo)">
            <summary>
            Add validation from a particular XML file.
            </summary>
            <param name="xmlFileInfo">The <see cref="T:System.IO.FileInfo"/> to the XML data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="xmlFileInfo"/> is null.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file represented by <paramref name="xmlFileInfo"/> cannot be found.</exception>
            <exception cref="T:System.Net.WebException">The remote filename cannot be resolved.-or-An error occurred while processing the request.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Part of the filename or directory cannot be found.</exception>
        </member>
        <member name="M:ValidationFramework.Configuration.ConfigurationService.AddXmlFile(System.String)">
            <summary>
            Add validation from a particular XML file.
            </summary>
            <param name="xmlFileUrl">The URL for the file containing the XML data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="xmlFileUrl"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="xmlFileUrl"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="xmlFileUrl"/> cannot be found.</exception>
            <exception cref="T:System.Net.WebException">The remote filename cannot be resolved.-or-An error occurred while processing the request.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Part of the filename or directory cannot be found.</exception>
            <exception cref="T:System.UriFormatException"><paramref name="xmlFileUrl"/> is not a valid URI.</exception>
        </member>
        <member name="M:ValidationFramework.Configuration.ConfigurationService.AddDirectory(System.IO.DirectoryInfo)">
            <summary>
            Add all validation definitions from a directory tree.
            </summary>
            <remarks>
            <para>
            Assume that any file named <c>*.validation.xml</c> is a validation definition document.
            </para>
            <para>
            This method is recursive.
            </para>
            </remarks>
            <param name="directoryInfo">a directory</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryInfo"/> is null.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in <paramref name="directoryInfo"/> is invalid, such as being on an unmapped drive.</exception>
            <exception cref="T:System.IO.FileNotFoundException">A file in one of the directories cannot be found.</exception>
            <exception cref="T:System.Net.WebException">The remote filename cannot be resolved.-or-An error occurred while processing the request.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Part of the filename or directory cannot be found.</exception>
        </member>
        <member name="M:ValidationFramework.Configuration.ConfigurationService.AddXmlString(System.String)">
            <summary>
            Add validation definitions from a <c>string</c>
            </summary>
            <param name="xml">The <see cref="T:System.String"/> containing the XML data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="xml"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="xml"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.Xml.XmlException"><paramref name="xml"/> is not a valid <see cref="F:System.Xml.XmlNodeType.Document"/>.</exception>
        </member>
        <member name="M:ValidationFramework.Configuration.ConfigurationService.AddXmlReader(System.Xml.XmlTextReader)">
            <summary>
            Adds the validation in the <see cref="T:System.Xml.XmlTextReader"/> after validating it against the validationFramework-validationDefinition-1.5 schema.
            </summary>
            <param name="xmlTextReader">The XmlTextReader that contains the validation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="xmlTextReader"/> is null.</exception>
        </member>
        <member name="M:ValidationFramework.Configuration.ConfigurationService.AddUrl(System.String)">
            <summary>
            Read validation definitions from a URL.
            </summary>
            <param name="url">a URL</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="url"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="url"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="url"/> cannot be found.</exception>
            <exception cref="T:System.Net.WebException">The remote filename cannot be resolved.-or-An error occurred while processing the request.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Part of the filename or directory cannot be found.</exception>
            <exception cref="T:System.UriFormatException"><paramref name="url"/> is not a valid URI.</exception>
        </member>
        <member name="M:ValidationFramework.Configuration.ConfigurationService.AddUrl(System.Uri)">
            <summary>
            Read validation definitions from a <see cref="T:System.Uri"/>.
            </summary>
            <param name="uri">a <see cref="T:System.Uri"/> to read the mappings from.</param>
            <returns>This configuration object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="uri"/> is null.</exception>
        </member>
        <member name="M:ValidationFramework.Configuration.ConfigurationService.AddDocument(System.Xml.XmlDocument)">
            <summary>
            Read validation definitions from an <see cref="T:System.Xml.XmlDocument"/>.
            </summary>
            <param name="xmlDocument">A loaded <see cref="T:System.Xml.XmlDocument"/> that contains the validation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="xmlDocument"/> is null.</exception>
        </member>
        <member name="M:ValidationFramework.Configuration.ConfigurationService.GetRule(ValidationFramework.Configuration.RuleData,System.RuntimeTypeHandle)">
            <summary>
            Made public for unit testing purposes.
            </summary>
            <exclude/>
        </member>
        <member name="M:ValidationFramework.Configuration.ConfigurationService.AddInputStream(System.IO.Stream)">
            <summary>
            Add validation definition from a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="xmlInputStream">The stream containing XML</param>
            <remarks>
            The <see cref="T:System.IO.Stream"/> passed in through the parameter <c>xmlInputStream</c> is not <b>guaranteed</b> to be cleaned up by this method.  It is the callers responsibility to ensure that the <c>xmlInputStream</c> is properly handled when this method completes.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="xmlInputStream"/> is null.</exception>
        </member>
        <member name="M:ValidationFramework.Configuration.ConfigurationService.AddResource(System.String,System.Reflection.Assembly)">
            <summary>
            Adds the validation definitions in the Resource of the <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="path">The path to the Resource file in the <see cref="T:System.Reflection.Assembly"/></param>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> that contains the Resource file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="assembly"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.IO.FileLoadException"><paramref name="path"/> could not be loaded.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/> was not found.</exception>
            <exception cref="T:System.BadImageFormatException"><paramref name="assembly"/> is not a valid assembly.</exception>
        </member>
        <member name="M:ValidationFramework.Configuration.ConfigurationService.AddClass(System.Type)">
            <summary>
            Add validation definitions a specific <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type to map.</param>
            <returns>This configuration object.</returns>
            <remarks>
            <para>If <paramref name="type"/> has a full name of <c>MyNameSpace.MyClass</c> the the resource named <c>MyNameSpace.MyClass.validation.xml</c>, embedded in the class' assembly, will be added.</para>
            <para>If the mappings and classes are defined in different assemblies or don't follow the naming convention, then this method cannot be used.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.IO.FileLoadException">The resource for <paramref name="type"/> could not be loaded.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The resource for <paramref name="type"/> was not found.</exception>
        </member>
        <member name="M:ValidationFramework.Configuration.ConfigurationService.AddAssembly(System.String)">
            <summary>
            Adds all of the Assembly's Resource files that end with "<c>.validation.xml</c>"
            </summary>
            <param name="assemblyName">The name of the <see cref="T:System.Reflection.Assembly"/> to load.</param>
            <remarks>
            <para>The <see cref="T:System.Reflection.Assembly"/> must be in the local bin, probing path, or GAC so that the <see cref="T:System.Reflection.Assembly"/> can be loaded by name.  
            If these conditions are not satisfied then your code should load the <see cref="T:System.Reflection.Assembly"/> and call the override <see cref="M:ValidationFramework.Configuration.ConfigurationService.AddAssembly(System.Reflection.Assembly)"/> instead.</para> 
            <para>This method is case sensitive, hence the resource files must end with lower case "<c>.validation.xml</c>".</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="assemblyName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="assemblyName"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.IO.FileLoadException"><paramref name="assemblyName"/> was found but could not be loaded.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="assemblyName"/> is not found.</exception>
            <exception cref="T:System.BadImageFormatException"><paramref name="assemblyName"/> is not a valid assembly.</exception>
        </member>
        <member name="M:ValidationFramework.Configuration.ConfigurationService.AddAssembly(System.Reflection.Assembly)">
            <summary>
            Adds all of the <paramref name="assembly"/> resource files that end with "<c>.validation.xml</c>".
            </summary>
            <remarks>This method is case sensitive, hence the resource files must end with lower case "<c>.validation.xml</c>".</remarks>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to load.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="assembly"/> is null.</exception>
        </member>
        <member name="P:ValidationFramework.Configuration.ConfigurationService.ErrorMessageProvider">
            <summary>
            Gets or sets the <see cref="T:ValidationFramework.Configuration.IErrorMessageProvider"/> to use.
            </summary>
        </member>
        <member name="T:ValidationFramework.Web.RequiredFieldWebValidatorEx">
            <summary>
            A custom <see cref="T:System.Web.UI.WebControls.RequiredFieldValidator"/> that does not perform any server validation.
            </summary>
        </member>
        <member name="M:ValidationFramework.Web.RequiredFieldWebValidatorEx.EvaluateIsValid">
            <summary>
            Overrides <see cref="M:System.Web.UI.WebControls.CompareValidator.EvaluateIsValid"/> to always return <see langword="true"/>.
            </summary>
            <returns><see langword="true"/></returns>
        </member>
        <member name="T:ValidationFramework.ValidatableRule">
            <summary>
            Validates a member that implements <see cref="T:ValidationFramework.IValidatable"/>.
            </summary>
            <remarks>
            Allow hierarchical validation of objects. 
            If <see cref="P:ValidationFramework.IValidatable.IsValid"/> returns <c>false</c> then <see cref="M:ValidationFramework.ValidatableRule.Validate(System.Object,System.Object,System.Object)"/> will return a <see cref="T:ValidationFramework.ValidationResult"/> with <see cref="P:ValidationFramework.ValidationResult.ErrorMessage"/> populated with the concatenated value of <see cref="P:ValidationFramework.IValidatable.ErrorMessages"/>.
            </remarks>
            <seealso cref="T:ValidationFramework.Configuration.ValidatableRuleConfigReader"/>
            <seealso cref="T:ValidationFramework.ValidatableRuleAttribute"/>
        </member>
        <member name="M:ValidationFramework.ValidatableRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.ValidatableRule"/> class.
            </summary>
            <remarks>
            The following are defaulted
            <list type="bullet">
            <item>
            <see cref="P:ValidationFramework.Rule.RuleSet"/> to null.
            </item>
            <item>
            <see cref="P:ValidationFramework.Rule.ErrorMessage"/> to the default error message.
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:ValidationFramework.ValidatableRule.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.ValidatableRule"/> class.
            </summary>
            <remarks>
            The following are defaulted
            <list type="bullet">
            <item>
            <see cref="P:ValidationFramework.Rule.RuleSet"/> to null.
            </item>
            <item>
            <see cref="P:ValidationFramework.Rule.ErrorMessage"/> to the default error message.
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:ValidationFramework.ValidatableRule.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.ValidatableRule"/> class.
            </summary>
            <remarks>
            The following are defaulted
            <list type="bullet">
            <item>
            <see cref="P:ValidationFramework.Rule.RuleSet"/> to null.
            </item>
            </list>
            </remarks>
            <param name="errorMessage">The error message for this rule. Pass a null to use the the default value.</param>
            <exception cref="T:System.ArgumentException"><paramref name="errorMessage"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.ValidatableRule.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.ValidatableRule"/> class.
            </summary>
            <param name="errorMessage">The error message for this rule. Pass a null to use the the default value.</param>
            <param name="ruleSet">A <see cref="T:System.String"/> used to group <see cref="T:ValidationFramework.Rule"/>s. Use a null to indicate no grouping.</param>
            <param name="useErrorMessageProvider"><c>true</c> to use <see cref="P:ValidationFramework.Configuration.ConfigurationService.ErrorMessageProvider"/> when determining the error message for this <see cref="T:ValidationFramework.Rule"/>; otherwise <c>false</c>.</param>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="errorMessage"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.ValidatableRule.#ctor(System.Boolean,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.ValidatableRule"/> class.
            </summary>
            <param name="useMemberErrorMessages"><c>true</c> to use the <see cref="P:ValidationFramework.IValidatable.ErrorMessages"/> of the member this <see cref="T:ValidationFramework.Rule"/> is applied to; otherwise <c>false</c>.</param>
            <param name="ruleSet">A <see cref="T:System.String"/> used to group <see cref="T:ValidationFramework.Rule"/>s. Use a null to indicate no grouping.</param>
            <param name="useErrorMessageProvider"><c>true</c> to use <see cref="P:ValidationFramework.Configuration.ConfigurationService.ErrorMessageProvider"/> when determining the error message for this <see cref="T:ValidationFramework.Rule"/>; otherwise <c>false</c>.</param>
            <exception cref="T:System.ArgumentException"><paramref name="ruleSet"/> is a <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:ValidationFramework.ValidatableRule.Validate(System.Object,System.Object,System.Object)">
            <summary>
            Validate the member this <see cref="T:ValidationFramework.Rule"/> is applied to.
            </summary>
            <param name="targetObjectValue">The value of the object containing the member to validate.</param>
            <param name="targetMemberValue">The value of the member to validate.</param>
            <param name="context">An <see cref="T:System.Object"/> that contains data for the <see cref="T:ValidationFramework.Rule"/> to validate. The default is null.</param>
        </member>
        <member name="M:ValidationFramework.ValidatableRule.GetComputedErrorMessage(System.String,System.String)">
            <summary>
            Called after <see cref="P:ValidationFramework.Rule.InfoDescriptor"/> is set but only when <see cref="P:ValidationFramework.Rule.ErrorMessage"/> is null.
            </summary>
            <returns>The error message for the <see cref="T:ValidationFramework.Rule"/>.</returns>
            <param name="tokenizedMemberName">A user friendly representation of the member name.</param>
            <param name="descriptorType">
            If <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> is a <see cref="T:ValidationFramework.Reflection.PropertyDescriptor"/> then <paramref name="descriptorType"/> will be 'property'.
            If <see cref="T:ValidationFramework.Reflection.InfoDescriptor"/> is a <see cref="T:ValidationFramework.Reflection.ParameterDescriptor"/> then <paramref name="descriptorType"/> will be 'parameter'.
            </param>
        </member>
        <member name="M:ValidationFramework.ValidatableRule.IsEquivalent(ValidationFramework.Rule)">
            <summary>
            Checks if the current <see cref="T:ValidationFramework.Rule"/> is equivalent to another <see cref="T:ValidationFramework.Rule"/>.
            </summary>
            <remarks>
            Called for each <see cref="T:ValidationFramework.Rule"/> in <see cref="T:ValidationFramework.Reflection.RuleCollection"/> when a new <see cref="T:ValidationFramework.Rule"/> is added. This method is only called when both the existing <see cref="T:ValidationFramework.Rule"/> and the <see cref="T:ValidationFramework.Rule"/> being are of the same <see cref="T:System.Type"/> and have the same <see cref="P:ValidationFramework.Rule.RuleSet"/>. So it is safe to directly cast <paramref name="rule"/> to the current type. All properties in <paramref name="rule"/> should be compared to the propeties of the current <see cref="T:ValidationFramework.Rule"/>.
            </remarks>
            <param name="rule">The <see cref="T:ValidationFramework.Rule"/> to check for equivalence.</param>
            <returns><see langword="true"/> if <paramref name="rule"/> is equivalent to the current <see cref="T:ValidationFramework.Rule"/>; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:ValidationFramework.ValidatableRule.UseMemberErrorMessages">
            <summary>
            Gets a value indicating if <see cref="P:ValidationFramework.IValidatable.ErrorMessages"/> should be use as the <see cref="P:ValidationFramework.Rule.ErrorMessage"/>.  
            </summary>
        </member>
        <member name="P:ValidationFramework.ValidatableRule.RuleInterpretation">
            <summary>
            Gets a <see cref="T:System.String"/> that is a business interpretation of the <see cref="T:ValidationFramework.Rule"/>.
            </summary>
            <remarks>
            Used as a helper to document the API that <see cref="T:ValidationFramework.Rule"/>s area applied to.
            </remarks>
        </member>
        <member name="T:ValidationFramework.RequiredShortRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.RequiredRule`1"/>, that will check the existance of a <see cref="T:System.Int16"/>, should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.RequiredRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.RequiredRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\RequiredValidators\RequiredShortRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\RequiredValidators\RequiredShortRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.RequiredShortRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RequiredShortRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RequiredShortRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.RequiredShortRuleAttribute.InitialValue">
            <summary>
            Gets or sets the initial and invalid value.
            </summary>
            <seealso cref="P:ValidationFramework.RequiredRule`1.InitialValue"/>
        </member>
        <member name="T:ValidationFramework.RegexRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.RegexRule"/> should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.Configuration.RegexRuleConfigReader"/>
            <seealso cref="T:ValidationFramework.RegexRule"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\RegexRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\RegexRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.RegexRuleAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ValidationFramework.RegexRuleAttribute"/> class.
            </summary>
            <param name="validationExpression">The regular expression pattern to match.</param>
        </member>
        <member name="M:ValidationFramework.RegexRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RegexRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RegexRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.RegexRuleAttribute.ValidationExpression">
            <summary>
            Gets the regular expression pattern to match.  
            </summary>
            <seealso cref="P:ValidationFramework.RegexRule.ValidationExpression"/>
        </member>
        <member name="P:ValidationFramework.RegexRuleAttribute.RegexOptions">
            <summary>
            A bitwise OR combination of <see cref="T:System.Text.RegularExpressions.RegexOptions"/> enumeration values.
            </summary>
            <seealso cref="P:ValidationFramework.RegexRule.RegexOptions"/>
        </member>
        <member name="T:ValidationFramework.Configuration.RegexRuleConfigReader">
            <summary>
            A <see cref="T:ValidationFramework.Configuration.IRuleConfigReader"/> that creates a <see cref="T:ValidationFramework.RegexRule"/> from a <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
            <remarks>
              <see cref="T:ValidationFramework.Configuration.RuleData"/> for default attributes.
              <b>Extra Attributes</b>
              <ul>
                <li>
                  <c>validationExpression</c> (required): Used to populate <see cref="P:ValidationFramework.RegexRule.ValidationExpression"/>.   
                </li>
                <li>
                  <c>regexOptions</c> (optional): Used to populate <see cref="P:ValidationFramework.RegexRule.RegexOptions"/>.   
                </li>
              </ul>
            </remarks>
            <example>
            <code lang="xml" title="This example shows an xml configuration for RegexRuleConfigReader. The RegexRule generated will validate an email address.">
            <rule validationExpression="\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*" errorMessage="hello" typeName="RegexRule" regexOptions="RightToLeft"/>
            </code>
            </example>
            <seealso cref="T:ValidationFramework.RegexRule"/>
            <seealso cref="T:ValidationFramework.Configuration.ConfigurationService"/>
        </member>
        <member name="M:ValidationFramework.Configuration.RegexRuleConfigReader.ReadConfig(ValidationFramework.Configuration.RuleData,System.RuntimeTypeHandle)">
            <summary>
            Create a <see cref="T:ValidationFramework.Rule"/> from a <see cref="T:ValidationFramework.Configuration.RuleData"/>.
            </summary>
            <param name="ruleData">The <see cref="T:ValidationFramework.Configuration.RuleData"/> that represent the xml to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <param name="runtimeTypeHandle">The <see cref="T:System.RuntimeTypeHandle"/> for the <see cref="T:System.Type"/> to create the <see cref="T:ValidationFramework.Rule"/> for.</param>
            <returns>A <see cref="T:ValidationFramework.Rule"/> that <paramref name="ruleData"/> represented</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ruleData"/> is null.</exception>
        </member>
        <member name="T:ValidationFramework.RangeByteRuleAttribute">
            <summary>
            Specifies that a <see cref="T:ValidationFramework.RangeRule`1"/>, that will check the range of a <see cref="T:System.Byte"/>, should be applied to the program element.
            </summary>
            <seealso cref="T:ValidationFramework.RangeRule`1"/>
            <seealso cref="T:ValidationFramework.Configuration.RangeRuleConfigReader"/>
            <example>
            <code source="Examples\ExampleLibraryCSharp\Validators\RangeValidators\RangeByteRuleAttributeSample.cs" lang="cs"/>
            <code source="Examples\ExampleLibraryVB\Validators\RangeValidators\RangeByteRuleAttributeSample.vb" lang="vbnet"/>
            </example>
        </member>
        <member name="M:ValidationFramework.RangeByteRuleAttribute.#ctor(System.Byte,System.Byte)">
            <summary>
            Initialises a new instance of the <see cref="T:ValidationFramework.RangeByteRuleAttribute"/> class.
            </summary>
            <param name="minimum">The minimum value.</param>
            <param name="maximum">The maximum value.</param>
        </member>
        <member name="M:ValidationFramework.RangeByteRuleAttribute.CreateParameterRule(ValidationFramework.Reflection.ParameterDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IParameterRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RangeByteRuleAttribute.CreatePropertyRule(ValidationFramework.Reflection.PropertyDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IPropertyRuleAttribute"/>.
            </summary>
        </member>
        <member name="M:ValidationFramework.RangeByteRuleAttribute.CreateFieldRule(ValidationFramework.Reflection.FieldDescriptor)">
            <summary>
            Create the <see cref="T:ValidationFramework.Rule"/> for this <see cref="T:ValidationFramework.IFieldRuleAttribute"/>.
            </summary>
        </member>
        <member name="P:ValidationFramework.RangeByteRuleAttribute.Minimum">
            <summary>
            Gets the minimum value.
            </summary>
            <seealso cref="P:ValidationFramework.RangeRule`1.Minimum"/>
        </member>
        <member name="P:ValidationFramework.RangeByteRuleAttribute.Maximum">
            <summary>
            Gets the maximum value.
            </summary>
            <seealso cref="P:ValidationFramework.RangeRule`1.Maximum"/>
        </member>
        <member name="T:ValidationFramework.EnumUserFriendlyNameConverter">
            <summary>
            Converts an <see cref="T:System.Enum"/> to a user friendly representation that can be displayed on a user interface.
            </summary>
            <seealso cref="T:ValidationFramework.EnumUserFriendlyNameAttribute"/>
        </member>
        <member name="M:ValidationFramework.EnumUserFriendlyNameConverter.Convert(System.Enum)">
            <summary>
            Converts an <see cref="T:System.Enum"/> to a user friendly representation that can be displayed on a user interface. 
            </summary>
            <param name="enumItem">The <see cref="T:System.Enum"/> to convert.</param>
            <returns>A user friendly string representing the <paramref name="enumItem"/>.</returns>
            <remarks>
            Uses the <see cref="T:ValidationFramework.EnumUserFriendlyNameAttribute"/> on each item in the <see cref="T:System.Enum"/> to determine the string returned.
            If no <see cref="T:ValidationFramework.EnumUserFriendlyNameAttribute"/> is specified it will use <see cref="M:ValidationFramework.StringUtilities.GetTokenizedValue(System.String)"/> for the return value.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="enumItem"/> is a null reference.</exception>
        </member>
    </members>
</doc>
